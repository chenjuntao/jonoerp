/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Tue Nov 11 10:31:07 CST 2014 by pw
 * Last edited on Tue Nov 11 10:31:07 CST 2014 by pw
 * 
 * comment: 中央工厂生产领料单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.RequisitionHeader;
import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class RequisitionHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(RequisitionHeaderBean.class);
	
	#sql private iterator HeaderIter(String form_id, String form_type, String form_ref_id, String item_name,String mainName,
			String workshop, String storage_id, String storage, String form_maker_id, String form_maker, Date audit_time_actual,
			Date form_time,Date form_time_actual, String auditor_id, String auditor, Date audit_time, String form_note, String form_status);
	
	public int newSerial(java.util.Date businessDate, String formType, String branchId) 
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String maxId = null;
		Date bDate = SqlDateUtil.getSqlDate(businessDate);
		#sql [myCtx] {
			SELECT
			    MAX(h.FORM_ID) into :maxId
			FROM
			:{Com_("D_T1_REQUISITION_HEADER")} h
			WHERE
			    h.FORM_TIME = :bDate
			AND h.FORM_TYPE = :formType
			AND h.FORM_BRANCH_ID = :branchId
		};
		closeDefaultContext(myCtx);
		
		int result = 1;
		if (maxId != null) {
			maxId = maxId.substring(maxId.length() - FormConstant.DEFAULT_SERIAL_LENGTH);
			result = Integer.parseInt(maxId) + 1;
		}
		return result;
	}
	
	public int saveEntity(RequisitionHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formId = header.getFormId();
		String formType = header.getFormType();
		String formRefId = header.getFormRefId();
		String workshop = header.getWorkshop();
		String storageId = header.getStorageId();
		String storage = header.getStorage();
		String formBranchId = header.getFormBranchId();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		Date formTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		String auditorId = header.getAuditorId();
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_REQUISITION_HEADER")}
				(FORM_ID, FORM_TYPE, FORM_REF_ID, WORKSHOP, STORAGE_ID, STORAGE, FORM_BRANCH_ID, FORM_MAKER_ID, FORM_MAKER, FORM_TIME, FORM_TIME_ACTUAL,
						AUDITOR_ID, AUDITOR, AUDIT_TIME, FORM_NOTE) 
			VALUES (:formId, :formType, :formRefId, :workshop, :storageId, :storage, :formBranchId, :formMakerId, :formMaker, :formTime, :formTimeActual,
					:auditorId, :auditor, :auditTime, :formNote)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(RequisitionHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String auditor_id =header.getAuditorId();
		String auditor =header.getAuditor();
		String storage = header.getStorage();
		String storageId = header.getStorageId();
		String workshop = header.getWorkshop();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_REQUISITION_HEADER")}
			SET
				STORAGE = :storage,
				STORAGE_ID = :storageId,
				WORKSHOP = :workshop
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int audit(RequisitionHeader header)
			throws NoPrivilegeException, SQLException, NoConnection {
			DefaultContext myCtx = getDefaultContext();

			String formId = header.getFormId();
			Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
			Date auditTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
			String auditor_id =header.getAuditorId();
			String auditor =header.getAuditor();
			String storage = header.getStorage();
			String storageId = header.getStorageId();
			String workshop = header.getWorkshop();
			#sql [myCtx] {
				UPDATE
				:{Com_("D_T1_REQUISITION_HEADER")}
				SET
					AUDIT_TIME = :auditTime,
					AUDITOR_ID = :auditor_id,
					AUDITOR = :auditor,
					AUDIT_TIME_ACTUAL =:auditTimeActual
				WHERE 
					FORM_ID = :formId
			};
			closeDefaultContext(myCtx);
			
			return 1;
		}

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_REQUISITION_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int count(java.util.Date startDate, java.util.Date endDate, String formType, String queryType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_REQUISITION_HEADER")} h
	        LEFT JOIN
	        :{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
            AND h.FORM_TYPE = :formType
			AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}

	
	public int count(String queryType ,String formRefId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(queryType);
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_REQUISITION_HEADER")} h
	        LEFT JOIN
	        :{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
            AND  (h.FORM_TYPE = 'return'
                    OR  h.FORM_TYPE = 'extra' )
            AND h.FORM_REF_ID= :formRefId
		};
		closeDefaultContext(myCtx);
		return total;
	}

	private String formQuery(String queryType) {
		String query = " 1=1";
		if(!TextUtil.isEmpty(queryType)){
			query = query + " AND NVL( s.STATUS, 'null') = '未审核'"; 
		}
		
		return query;
	}
	
	public List<RequisitionHeader> query(java.util.Date startDate, java.util.Date endDate, int startRow, int endRow, String formType, String queryType)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
		                		WITH
		                	    item AS
		                	    (
		                	        SELECT
		                	            *
		                	        FROM
		                	            (
		                	                SELECT
		                	                    d.FORM_ID,
		                	                    d.ITEM_ID,
		                	                    d.ITEM_NAME,
		                	                    row_number() over(partition BY d.FORM_ID ORDER BY d.RECEIVE_COUNT*nvl(p.ITEM_PRICE,0)
		                	                    DESC ) rn
		                	                FROM
		                	                :{Com_("D_T1_REQUISITION_DETAIL")} d
		                	                LEFT JOIN
		                	                :{Com_("D_T2_ITEM_PRICE")} p
		                	                ON
		                	                    p.ITEM_ID =d.ITEM_ID
		                	                AND p.PRICE_TYPE='BENCHMARK'
		                	                 )
		                	        WHERE
		                	            rn=1
		                	    )
			                    SELECT
			                        h.*,
			                        w.ITEM_NAME,
			                        i.ITEM_NAME mainName,
			                        s.STATUS AS FORM_STATUS
			                    FROM
			                    :{Com_("D_T1_REQUISITION_HEADER")} h
			                    LEFT JOIN
			                    :{Com_("D_T1_WORK_ORDER_HEADER")} w
			                    ON 
			                        w.FORM_ID = h.FORM_REF_ID
			                    LEFT JOIN 
			                    item i
			                    ON 
			                    i.FORM_ID = h.FORM_ID
			                    LEFT JOIN
			                    :{Com_("D_T0_FORM_STATUS")} s
			                    ON
			                        s.FORM_ID = h.FORM_ID
			                    AND s.IS_CURRENT = 1
			                    WHERE
			                        :{query :: 1=1}
			                    AND h.FORM_TYPE = :formType
			                    AND (
			                            h.FORM_TIME >= :sDate
			                        OR  :sDate IS NULL)
			                    AND (
			                            h.FORM_TIME <= :eDate
			                        OR  :eDate IS NULL)
			                    ORDER BY
			                        h.FORM_ID DESC) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<RequisitionHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}

	public RequisitionHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
				h.*,
				w.ITEM_NAME,
				'' mainName,
				'' as FORM_STATUS
			FROM
			:{Com_("D_T1_REQUISITION_HEADER")} h
			 LEFT JOIN
			 :{Com_("D_T1_WORK_ORDER_HEADER")} w
         ON 
             w.FORM_ID = h.FORM_REF_ID
			WHERE
				h.form_id = :formId
		};
		List<RequisitionHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<RequisitionHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<RequisitionHeader> headerLst = new ArrayList<RequisitionHeader>();
		while(headerIter.next()) {
			RequisitionHeader header = new RequisitionHeader();
			header.setFormId(headerIter.form_id());
			header.setFormType(headerIter.form_type());
			header.setFormRefId(headerIter.form_ref_id());
			header.setItemName(headerIter.item_name());
			header.setWorkshop(headerIter.workshop());
			header.setStorageId(headerIter.storage_id());
			header.setStorage(headerIter.storage());
			header.setFormMakerId(headerIter.form_maker_id());
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setFormTimeActual(SqlDateUtil.getUtilDate(headerIter.form_time_actual()));
			header.setAuditorId(headerIter.auditor_id());
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setFormNote(headerIter.form_note());
			header.setFormStatus(headerIter.form_status());
			header.setMainName(headerIter.mainName());
			header.setAuditTimeActual(SqlDateUtil.getUtilDate(headerIter.audit_time_actual()));
			headerLst.add(header);
		}
		return headerLst;
	}
}