/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Thu Feb 12 11:09:53 CST 2015 by lyz
 * Last edited on Thu Feb 12 11:09:53 CST 2015 by lyz
 * 
 * comment: 中央工厂售价调价单、中央工厂采购调价单、物流中心采购调价单、物流中心标准调价单、物流中心加盟调价单、物流中心零售调价单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.PriceAdjustHeader;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.business.form.FormPrefix;
import com.tanry.business.form.FormUtil;
import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.util.constant.PriceType;

public class PriceAdjustHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(PriceAdjustHeaderBean.class);
	
	#sql private iterator HeaderIter(
			String form_id, 
			Date form_time,
			String adjust_type,
			String adjust_type_name,
			String adjust_scope, 
			String effect_type,
			Date effect_time, 
			String note, 
			String form_maker,
			Date make_time, 
			String auditor,
			Date audit_time,
			String form_note, 
			String form_status
	);
	
	public int saveEntity(PriceAdjustHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		String adjustType = header.getAdjustType();
		String adjustScope = header.getAdjustScope();
		String supplierId = header.getSupplierId();
		String effectType = header.getEffectType();
		Date effectTime = SqlDateUtil.getSqlDate(header.getEffectTime());
		String note = header.getNote();
		String formMaker = header.getFormMaker();
		Date makeTime = SqlDateUtil.getSqlDate(header.getMakeTime());
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();
		String type;
		if (adjustType.indexOf("_") != -1)
			type = adjustType.substring(0, adjustType.indexOf("_"))+"%";
		else
			type = adjustType + "%";
		String maxId = null;
		#sql [myCtx] {
			SELECT
			    MAX(h.FORM_ID) into :maxId
			FROM
			:{Com_("D_T1_PRICE_ADJUST_HEADER")} h
			WHERE
			    h.FORM_TIME = :formTime
			AND h.ADJUST_TYPE LIKE :type
		};
		
		int newSerial = 0;
		if (maxId != null) {
			maxId = maxId.substring(maxId.length() - FormConstant.DEFAULT_SERIAL_LENGTH);
			newSerial = Integer.parseInt(maxId) + 1;
		}
		String formId = FormUtil.genFormIdBody(FormPrefix.PRICEADJUST + getTypePrefix(adjustType), "", formTime)
				+ FormUtil.formatSerial(newSerial);
		header.setFormId(formId);

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_PRICE_ADJUST_HEADER")} 
				(FORM_ID, FORM_TIME, ADJUST_TYPE, ADJUST_SCOPE, SUPPLIER_ID, EFFECT_TYPE, EFFECT_TIME, NOTE, FORM_MAKER, MAKE_TIME, AUDITOR, AUDIT_TIME, FORM_NOTE) 
			VALUES (:formId, :formTime, :adjustType, :adjustScope, :supplierId, :effectType, :effectTime, :note, :formMaker, :makeTime, :auditor, :auditTime, :formNote)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	private String getTypePrefix(String adjustType) {
		if (adjustType.startsWith(PriceType.PURCHASE)) {
			return "P";
		} else if (adjustType.startsWith(PriceType.BENCHMARK)) {
			return "B";
		} else if (adjustType.startsWith(PriceType.JOIN)) {
			return "J";
		} else if (adjustType.startsWith(PriceType.RETAIL)) {
			return "R";
		} else if (adjustType.startsWith(PriceType.WHOLESALE)) {
			return "W";
		} else if (adjustType.startsWith(PriceType.SALE)) {
			return "S";
		}
		return "";
	}
	
	public int updateEntity(PriceAdjustHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		String adjustType = header.getAdjustType();
		String adjustScope = header.getAdjustScope();
		String effectType = header.getEffectType();
		Date effectTime = SqlDateUtil.getSqlDate(header.getEffectTime());
		String note = header.getNote();
		String formMaker = header.getFormMaker();
		Date makeTime = SqlDateUtil.getSqlDate(header.getMakeTime());
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PRICE_ADJUST_HEADER")}
			SET
				FORM_ID = :formId,
			--	FORM_TIME = :formTime,
			--	ADJUST_TYPE = :adjustType,
			--	ADJUST_SCOPE = :adjustScope,
				EFFECT_TYPE = :effectType,
				EFFECT_TIME = :effectTime,
				NOTE = :note,
			--	FORM_MAKER = :formMaker,
			--	MAKE_TIME = :makeTime,
				AUDITOR = :auditor,
				AUDIT_TIME = :auditTime,
				FORM_NOTE = :formNote
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_PRICE_ADJUST_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T0_FORM_STATUS")}
			WHERE
				FORM_ID = :formId
		};
		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T0_OPERATELOG")}
			WHERE
				BUSINESS_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int audit(String formId, String userId, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PRICE_ADJUST_HEADER")}
			SET
				auditor = :userId,
				audit_time = :sAuditTime
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String adjustType, String queryType)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formLikeQuery(queryType,adjustType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_PRICE_ADJUST_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
			AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String queryType, String adjustType) {
		String query = " 1=1";
		if (BillStatus.UNADUIT_US.equals(queryType)) {
			query = query + " AND NVL( s.STATUS, 'null') = '" + BillStatus.UNADUIT_CN + "'";
		}
		query +=" AND h.ADJUST_TYPE IN ('" + adjustType.replaceAll(",", "','") + "') ";
		return query;
	}
	
	private String formLikeQuery(String queryType, String adjustType) {
		String query = " 1=1";
		if (BillStatus.UNADUIT_US.equals(queryType)) {
			query = query + " AND NVL( s.STATUS, 'null') = '" + BillStatus.UNADUIT_CN + "'";
		}
		query +=" AND h.ADJUST_TYPE LIKE '" + adjustType.replaceAll(",", "','") + "%'";
		return query;
	}
	
	public List<PriceAdjustHeader> query(java.util.Date startDate, java.util.Date endDate, String adjustType, String queryType, int startRow, int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query =formLikeQuery(queryType,adjustType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    SELECT
			                        h.*,
			                        '' adjust_type_name,
			                        s.status AS form_status
			                    FROM
			                    :{Com_("D_T1_PRICE_ADJUST_HEADER")} h
			                    LEFT JOIN
			                    :{Com_("D_T0_FORM_STATUS")} s
			                    ON
			                        s.FORM_ID = h.FORM_ID
			                    AND s.IS_CURRENT = 1
			                    WHERE
			                        :{query :: 1=1}
			                    AND (
			                            h.FORM_TIME >= :sDate
			                        OR  :sDate IS NULL)
			                    AND (
			                            h.FORM_TIME <= :eDate
			                        OR  :eDate IS NULL)
			                    ORDER BY
			                        h.FORM_ID DESC ) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<PriceAdjustHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public int countEffect(java.util.Date startDate, java.util.Date endDate, String adjustType, String queryType)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(queryType,adjustType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_PRICE_ADJUST_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
			  AND (
                      h.EFFECT_TIME >= :sDate
                  OR  :sDate IS NULL)
              AND (
                      h.EFFECT_TIME <= :eDate
                  OR  :eDate IS NULL)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	public List<PriceAdjustHeader> queryEffect(java.util.Date startDate, java.util.Date endDate, String adjustType, String queryType, int startRow, int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(queryType,adjustType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    SELECT
			                        h.*,
			                        s.status AS form_status,
			                        '' adjust_type_name
			                    FROM
			                    :{Com_("D_T1_PRICE_ADJUST_HEADER")} h
			                    LEFT JOIN
			                    :{Com_("D_T0_FORM_STATUS")} s
			                    ON
			                        s.FORM_ID = h.FORM_ID
			                    AND s.IS_CURRENT = 1
			                    WHERE
			                        :{query :: 1=1}
			                    AND (
			                            h.EFFECT_TIME >= :sDate
			                        OR  :sDate IS NULL)
			                    AND (
			                            h.EFFECT_TIME <= :eDate
			                        OR  :eDate IS NULL)
			                    ORDER BY
			                        h.FORM_ID DESC ) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<PriceAdjustHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public PriceAdjustHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,
			    s.STATUS form_status,
			    g.PRICE_GROUP_NAME adjust_type_name
			FROM
				:{Com_("D_T1_PRICE_ADJUST_HEADER")} h
			INNER JOIN
				:{Com_("D_T0_FORM_STATUS")} s   
			ON
			    h.form_id = s.form_id
			AND s.IS_CURRENT = 1
			LEFT JOIN
			   :{Com_("D_T2_PRICE_GROUP")} g
			ON
			    h.ADJUST_TYPE = g.PRICE_GROUP_ID
			WHERE
			    h.form_id = :formId};
		List<PriceAdjustHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	#sql private iterator pricegroupIter(String names,String id)
	public List<Map> queryPGroup(String GroupType)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		String thetype = GroupType + "%";
		pricegroupIter pIter = null;
		#sql [myCtx] pIter = {
			SELECT 
				A.PRICE_GROUP_ID AS id,
				A.PRICE_GROUP_NAME AS names 
			FROM 
			:{Com_("D_T2_PRICE_GROUP")} A
			WHERE
				A.PRICE_GROUP_ID LIKE :thetype
		};
		List<Map> pgList = new ArrayList<Map>();
		while(pIter.next()) {
			Map<String, Object> node = new HashMap<String, Object>();
			node.put("id", pIter.id());
			node.put("names", pIter.names());
			pgList.add(node);
		}
		pIter.close();
		closeDefaultContext(myCtx);
		return pgList;
	}
	
	private List<PriceAdjustHeader> processIter(HeaderIter headerIter) 
			throws NoPrivilegeException,SQLException,NoConnection {
		List<PriceAdjustHeader> headerLst = new ArrayList<PriceAdjustHeader>();
		while(headerIter.next()) {
			PriceAdjustHeader header = new PriceAdjustHeader();
			header.setFormId(headerIter.form_id());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setAdjustType(headerIter.adjust_type());
			header.setAdjustTypeName(headerIter.adjust_type_name());
			header.setAdjustScope(headerIter.adjust_scope());
			header.setEffectType(headerIter.effect_type());
			header.setEffectTime(SqlDateUtil.getUtilDate(headerIter.effect_time()));
			header.setNote(headerIter.note());
			header.setFormMaker(headerIter.form_maker());
			header.setMakeTime(SqlDateUtil.getUtilDate(headerIter.make_time()));
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setFormNote(headerIter.form_note());
			header.setFormStatus(headerIter.form_status());
			headerLst.add(header);
		}
		return headerLst;
	}
}