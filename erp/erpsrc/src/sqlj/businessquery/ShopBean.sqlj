/**查询各个门店的营业信息列表
 *read shop business info list
 *by cjt
 *first created on 2014.6.12
 *last edited on 2014.7.7
 *
 *edited by pw on 2014.7.28
 */

package logic.businessquery;

import sqlj.runtime.ref.*;
import java.sql.*;
import java.util.*;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import logic.pool.ConnectionPool;
import logic.*;
import com.tanry.framework.acl.*;
import java.sql.Date;
import com.tanry.framework.util.DateTimeUtil;
import pojo.businessquery.ShopBill;

public class ShopBean extends ConnectionPool{
	
	private String strDateFormat = "yyyy-MM-dd";//设置日期格式

	#sql public static iterator ShopIterator(
			String businessDate,
			String shopC,
			String shopName,
			Double foodAmt,
			Integer billNum,
			Double amtPerBill,
			Integer guestNum,
			Double amtPerGuest,
			Integer tableNum,
			Double amtPerTable,
			Double guestPerTable,
			Double disAmt,
			Double roundAmt,
			Double presentAmt,
			Double oughtAmt,
			Double payAmt); 
	
	#sql public static iterator DateIterator(String settletime);

	public ShopBean()
	{
	}
	
	/**
	 * 按天查询分页，得到总的不相同的天数
	 */
	public int countByDay(String startTime, String endTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		int total = 0;
		DefaultContext myCtx = getDefaultContext();
		if (myCtx != null) {
			#sql [myCtx] {
				SELECT count(DISTINCT
                    TO_CHAR(DBUSINESS, 'yyyy-MM-dd') ) into :total
                FROM
                	:{Com_("d_t_food_bill")} b
                WHERE
                	TO_CHAR(DBUSINESS, 'yyyy-MM-dd') >= :startTime
                AND TO_CHAR(DBUSINESS, 'yyyy-MM-dd') <= :endTime
                ORDER BY
                    TO_CHAR(DBUSINESS, 'yyyy-MM-dd')
			};
		} else {
            throw new NoConnection();
        }
		closeDefaultContext(myCtx);
		
		return total;
	}
	
	public List<ShopBill> byDay(String startTime, String endTime)
			throws NoPrivilegeException,SQLException,NoConnection	{
			
			List<ShopBill> shops = new ArrayList<ShopBill>();
			DefaultContext myCtx = getDefaultContext();
			ShopIterator shopByDayIterator = null;
			if (myCtx != null)		{
				#sql [myCtx] shopByDayIterator = {SELECT
					    TO_CHAR(DBUSINESS, 'yyyy-MM-dd') businessDate,
					    cBranch_C        shopC,
					    cBranch_N        shopName,
					    SUM(nFoodAmt)    foodAmt,
					    COUNT(cBranch_C) billNum,
					    CASE
					        WHEN (COUNT(cBranch_C) = 0)
					        THEN 0
					        ELSE ROUND(SUM(nFoodAmt) / COUNT(cBranch_C),2)
					    END            amtPerBill,
					    SUM(iGuestNum) guestNum,
					    CASE
					        WHEN (SUM(iGuestNum) = 0)
					        THEN 0
					        ELSE ROUND(SUM(nFoodAmt) / SUM(iGuestNum) ,2)
					    END                      amtPerGuest,
					    COUNT(DISTINCT cTable_N) tableNum,
					    CASE
					        WHEN (SUM(nFoodAmt) = 0)
					        THEN 0
					        ELSE ROUND(SUM(nFoodAmt) / COUNT(DISTINCT cTable_N) ,2)
					    END amtPerTable,
					    CASE
					        WHEN (SUM(iGuestNum)=0)
					        THEN 0
					        ELSE ROUND(SUM(iGuestNum) / COUNT(DISTINCT cTable_N) ,2)
					    END              guestPerTable,
					    SUM(nDisAmt)     disAmt,
					    SUM(nRoundAmt)   roundAmt,
					    SUM(nPresentAmt) presentAmt,
					    SUM(nOughtAmt)   oughtAmt,
					    SUM(nPayAmt)     payAmt
					FROM
					    :{Com_("d_t_food_bill")}
					WHERE
					    TO_CHAR(DBUSINESS, 'yyyy-MM-dd') IN
					    (
					        SELECT
					            TO_CHAR(DBUSINESS, 'yyyy-MM-dd')
					        FROM
					        	:{Com_("d_t_food_bill")} d
					        WHERE
					            DBUSINESS >= to_date(:startTime, 'yyyy-MM-dd')
					        AND DBUSINESS <= to_date(:endTime,'yyyy-MM-dd')
					        GROUP BY
					            TO_CHAR(DBUSINESS, 'yyyy-MM-dd') )
					GROUP BY
					    TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
					    cBranch_C,
					    cBranch_N
					ORDER BY
					    TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
					    cBranch_C};
				
				while(shopByDayIterator.next()){
					ShopBill shopBill = processIter(shopByDayIterator);
					shopBill.businessDate = shopByDayIterator.businessDate();
					shops.add(shopBill);
				}
				shopByDayIterator.close();

			}
			else{
	            throw new NoConnection();
	        }
			
			closeDefaultContext(myCtx);
			return shops;
		}

	public List<ShopBill> listShop(String startTime, String endTime, DefaultContext myCtx)
		throws NoPrivilegeException,SQLException,NoConnection	{
		
		List<ShopBill> shops = new ArrayList<ShopBill>();
		ShopIterator shopIterator = null;
		if (myCtx != null)		{
			#sql [myCtx] shopIterator = {
			  SELECT
			  		'all' businessDate,
				     cBranch_C shopC,
				     cBranch_N shopName,
				     SUM(nFoodAmt) foodAmt,
				     COUNT(cBranch_C) billNum,
				     
				     CASE
				        WHEN (COUNT(cBranch_C)  = 0)
				        THEN 0
				        ELSE ROUND(SUM(nFoodAmt) / COUNT(cBranch_C),2)
				     END amtPerBill,
				    
				     SUM(iGuestNum) guestNum,
				     
				     CASE
				        WHEN (SUM(iGuestNum)  = 0)
				        THEN 0
				        ELSE ROUND(SUM(nFoodAmt) / SUM(iGuestNum) ,2)
				     END amtPerGuest,
				     
				     COUNT(DISTINCT  cTable_N) tableNum,
			
				     CASE
				        WHEN (SUM(nFoodAmt)  = 0)
				        THEN 0
				        ELSE DECODE( COUNT(DISTINCT cTable_N),0,0,ROUND(SUM(nFoodAmt) / COUNT(DISTINCT cTable_N) ,2))
				     END amtPerTable,
				     
				     CASE
				        WHEN (SUM(iGuestNum)=0)
				        THEN 0
				        ELSE DECODE(COUNT(DISTINCT cTable_N),0,0,ROUND(SUM(iGuestNum) / COUNT(DISTINCT cTable_N) ,2))
				     END guestPerTable,
				     
			         SUM(nDisAmt)disAmt,
			         SUM(nRoundAmt) roundAmt,
			         SUM(nPresentAmt) presentAmt,
			         SUM(nOughtAmt) oughtAmt,
			         SUM(nPayAmt) payAmt
				FROM
					:{Com_("d_t_food_bill")}
				WHERE
				     DBUSINESS >= to_date(:startTime, :strDateFormat)
				AND  DBUSINESS <= to_date(:endTime, :strDateFormat)
				GROUP BY
				     cBranch_C,
				     cBranch_N
				ORDER BY
				     cBranch_C};
			
			while(shopIterator.next()){
				ShopBill shopBill = processIter(shopIterator);
				shops.add(shopBill);
			}
			shopIterator.close();
		}
		else{
            throw new NoConnection();
        }
		
		return shops;
	}
	
	public List<ShopBill> listShop(String startTime, String endTime)
			throws NoPrivilegeException,SQLException,NoConnection	{
			List<ShopBill> shops = new ArrayList<ShopBill>();
			DefaultContext myCtx = getDefaultContext();
			ShopIterator shopIterator = null;
			if (myCtx != null)		{
				#sql [myCtx] shopIterator = {
				  SELECT
				  		'all' businessDate,
					     cBranch_C shopC,
					     cBranch_N shopName,
					     SUM(nFoodAmt) foodAmt,
					     COUNT(cBranch_C) billNum,
					     
					     CASE
					        WHEN (COUNT(cBranch_C)  = 0)
					        THEN 0
					        ELSE  round(SUM(nFoodAmt) / COUNT(cBranch_C),2)
					     END amtPerBill,
					    
					     SUM(iGuestNum) guestNum,
					     
					     CASE
					        WHEN (SUM(iGuestNum)  = 0)
					        THEN 0
					        ELSE   round(SUM(nFoodAmt) / SUM(iGuestNum) ,2)
					     END amtPerGuest,
					     
					     COUNT(DISTINCT  cTable_N) tableNum,
					     
					     CASE
					        WHEN (SUM(nFoodAmt)  = 0)
					        THEN 0
					        ELSE DECODE( COUNT(DISTINCT cTable_N) ,0,0,ROUND(SUM(nFoodAmt) / COUNT(DISTINCT cTable_N) ,
					                2))
					     END amtPerTable,
					     
					     CASE
					        WHEN (SUM(iGuestNum)=0)
					        THEN 0
					        ELSE ROUND( DECODE(COUNT(DISTINCT cTable_N),0,0,SUM(iGuestNum) / COUNT(DISTINCT cTable_N))
					                ,2)
					     END guestPerTable,
					     
				         SUM(nDisAmt)disAmt,
				         SUM(nRoundAmt) roundAmt,
				         SUM(nPresentAmt) presentAmt,
				         SUM(nOughtAmt) oughtAmt,
				         SUM(nPayAmt) payAmt
					FROM
						:{Com_("d_t_food_bill")}
					WHERE
					     DBUSINESS >= to_date(:startTime, :strDateFormat)
					AND  DBUSINESS <= to_date(:endTime, :strDateFormat)
					GROUP BY
					     cBranch_C,
					     cBranch_N
					ORDER BY
					     cBranch_C};
				
				while(shopIterator.next()){
					ShopBill shopBill = processIter(shopIterator);
					shops.add(shopBill);
				}
				shopIterator.close();
			}
			else{
	            throw new NoConnection();
	        }
			
			closeDefaultContext(myCtx);
			return shops;
		}
		
	/**
	 * 按天查询分页，得到数据库中实际的开始日期和结束日期
	 */
	public Map<String, List> listShopByDay(String startTime, String endTime, int startRow, int endRow)
		throws NoPrivilegeException,SQLException,NoConnection {
		Map<String, List> result = new HashMap<String, List>();
		DateIterator dateIterator = null;
		List<String> dateLst = new ArrayList<String>();
		DefaultContext myCtx = getDefaultContext();
		if (myCtx != null) {
			#sql [myCtx] dateIterator = {
				SELECT
				    *
				FROM
				    (
				        SELECT
				            t.*,
				            ROWNUM rn
				        FROM
				            (
				                SELECT DISTINCT
				                    TO_CHAR(DBUSINESS, 'yyyy-MM-dd') settletime
				                FROM
				                	:{Com_("d_t_food_bill")} b
				                WHERE
				                	TO_CHAR(DBUSINESS, 'yyyy-MM-dd') >= :startTime
				                AND TO_CHAR(DBUSINESS, 'yyyy-MM-dd') <= :endTime
				                ORDER BY
				                    TO_CHAR(DBUSINESS, 'yyyy-MM-dd') ) t
				        WHERE
				            rownum < :endRow )
				WHERE
				    rn >= :startRow	
			};
			while(dateIterator.next()) {
				dateLst.add(dateIterator.settletime());
			}
			dateIterator.close();

			//将开始和结束日期之间的每天都列出来进行按天查询
			for (int i = 0; i < dateLst.size(); i++) {
				String date = dateLst.get(i);
				List shopList = listShop(date, date, myCtx); 
				if(shopList.size()>0) {
					result.put(date, shopList);
				}
			}
		} else {
            throw new NoConnection();
        }
		closeDefaultContext(myCtx);
		
		return result;
	}

	private ShopBill processIter(ShopIterator shopIterator) throws SQLException{		
		ShopBill shopBill = new ShopBill();
		shopBill.shopC = shopIterator.shopC();
		shopBill.shopName = shopIterator.shopName();
		shopBill.foodAmt = shopIterator.foodAmt();
		shopBill.billNum = shopIterator.billNum();
		shopBill.amtPerBill = shopIterator.amtPerBill();
		shopBill.guestNum = shopIterator.guestNum();
		shopBill.amtPerGuest = shopIterator.amtPerGuest();
		shopBill.tableNum = shopIterator.tableNum();
		shopBill.amtPerTable = shopIterator.amtPerTable();
		shopBill.guestPerTable = shopIterator.guestPerTable();
		shopBill.disAmt = shopIterator.disAmt();
		shopBill.roundAmt = shopIterator.roundAmt();
		shopBill.presentAmt = shopIterator.presentAmt();
		shopBill.oughtAmt = shopIterator.oughtAmt();
		shopBill.payAmt = shopIterator.payAmt();
		return shopBill;
	}
}