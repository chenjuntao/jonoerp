/**
 *read bill list
  *by cjt
 *first created on 2014.6.19
 *latt edited on 2014.7.10
 */

package logic.businessquery;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;
import sqlj.runtime.ref.DefaultContext;
import com.tanry.framework.acl.NoPrivilegeException;
import pojo.businessquery.Bill;

public class BillBean extends ConnectionPool
{
	private  String strDateFormat = "yyyy-MM-dd";//设置日期格式

	#sql  public static iterator BillIterator(String cBill_C,
											String DBUSINESS,  
											String cPeriod_N, 
											String cShift_N, 
											Integer iGuestNum, 
											String cBranch_N,
											String dtBillTime, 
											String dtSettleTime, 
											String cCreateMan, 
											String cSettleMan,
											Double nFoodAmt, 
											Double nRoundAmt, 
											Double nPresentAmt, 
											Double nOughtAmt, 
											Double nPayAmt, 
											String cTable_N,
											Double nDisAmt, 
											String cDisManCur_n, 
											String cDisCurWhy, 
											String sRemark);
	
	#sql  public static iterator ShopTableInfoIterator(String cBranch_C,
													String CBRANCH_N,
													String CTABLE_N );
	
	//将ASCII码为0（即null）的字符串转换为空字符串，前者在IE中显示会出现问题
	private String ConvertAsciii0ToSpace(String str)
	{
		if (str != null)
		 {	
			if (str.length() == 1) 
			{
				int asciiValue = str.charAt(0);
				if (asciiValue == 0) 
				{
					return "";
				}
			}
		}
		return str;
	}
	
	//根据门店编号和台位编号获取门店名字和台位名字
	public Bill getBillBean(String shopC, String table)
		throws NoPrivilegeException,SQLException,NoConnection{
		DefaultContext myCtx = getDefaultContext();
		ShopTableInfoIterator shopTableInfoIterator = null;
		Bill bill = new Bill();
							
		#sql [myCtx] shopTableInfoIterator = {
			SELECT
			    cBranch_C,
			    CBRANCH_N,
			    CTABLE_N
			FROM
			    :{Com_("d_t_food_bill")}
			WHERE
			    cBranch_C = :shopC
			AND cTable_N = :table
			AND ROWNUM = 1
		};
		
		while(shopTableInfoIterator.next()){
			bill.shopName = shopTableInfoIterator.CBRANCH_N();
			bill.table = shopTableInfoIterator.CTABLE_N();
		}
		
		shopTableInfoIterator.close();
		closeDefaultContext(myCtx);
		return bill;
	}

	//指定门店的指定台位的单据数量
	public int billCountByST(String startTime, String endTime, String shopC, String table)
		throws NoPrivilegeException,SQLException,NoConnection
	{
		int billCount = 0;
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {select count(*) into :billCount from :{Com_("d_t_food_bill")}
						where DBUSINESS >= to_date(:startTime, :strDateFormat)
						and DBUSINESS <= to_date(:endTime, :strDateFormat)
						and cBranch_C = :shopC and cTable_N = :table};
		closeDefaultContext(myCtx);
		return billCount;
	}
	
	//指定门店的指定台位的单据列表
	public List listBillByST(String startTime, String endTime, String shopC, String table, int startRow, int pageNum)
		throws NoPrivilegeException,SQLException,NoConnection
	{
		List bills = new ArrayList();
		DefaultContext myCtx = getDefaultContext();
		BillIterator billIterator = null;
		int endRow = startRow + pageNum;
		//遍历查找指定门店的指定台位的单据列表
		#sql [myCtx] billIterator = {select * from 
									(select rownum rn, cBill_C, cPeriod_N, cShift_N, iGuestNum, 
									dtBillTime, dtSettleTime, DBUSINESS, cCreateMan, cSettleMan,
									nFoodAmt, cTable_N,	nRoundAmt, nPresentAmt, nOughtAmt, nPayAmt, 
									cBranch_N, nDisAmt, cDisManCur_n, cDisCurWhy, sRemark 
									from :{Com_("d_t_food_bill")}
									where DBUSINESS >= to_date(:startTime, :strDateFormat)
									and DBUSINESS <= to_date(:endTime, :strDateFormat)
									and cBranch_C = :shopC and cTable_N = :table
									and rownum <= :endRow) where rn > :startRow};
		while(billIterator.next())
		{
			Bill bill = processIter(billIterator);
			bills.add(bill);
		}
		billIterator.close();
		closeDefaultContext(myCtx);
		return bills;
	}

	//指定开台人和指定结账人等的账单数量
	public int billCountByMan(String startTime, String endTime, 
			String createMan, String settleMan, String disManCur_N)
		throws NoPrivilegeException,SQLException,NoConnection
	{
		String conditionStr = " 1=1";
		if(!createMan.equals("%")){
			conditionStr += " and cCreateMan like '" + createMan + "'";
		}
		if(!settleMan.equals("%")){
			conditionStr += " and cSettleMan like '" + settleMan + "'";
		}
		if(!disManCur_N.equals("%")){
			conditionStr += " and cDisManCur_n like '" + disManCur_N + "'";
		}
		
		int billCount = 0;
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			select count(*) into :billCount 
			from :{Com_("d_t_food_bill")}
			where 
				DBUSINESS >= to_date(:startTime, :strDateFormat)
			and DBUSINESS <= to_date(:endTime, :strDateFormat)
			and :{conditionStr}
		};
		closeDefaultContext(myCtx);
		return billCount;
	}

	//指定开台人和指定结账人等的账单列表
	public List listBillByMan(String startTime, String endTime, String createMan, 
			String settleMan, String disManCur_N, int startRow, int pageNum)
		throws NoPrivilegeException,SQLException,NoConnection
	{
		String conditionStr = " 1=1";
		if(!createMan.equals("%")){
			conditionStr += " and cCreateMan like '" + createMan + "'";
		}
		if(!settleMan.equals("%")){
			conditionStr += " and cSettleMan like '" + settleMan + "'";
		}
		if(!disManCur_N.equals("%")){
			conditionStr += " and cDisManCur_n like '" + disManCur_N + "'";
		}
		
		List bills = new ArrayList();
		DefaultContext myCtx = getDefaultContext();
		BillIterator billIterator = null;
		int endRow = startRow + pageNum;
		//遍历查找指定开台人和指定结账人等的账单列表
		#sql [myCtx] billIterator = {
				select * from
					(select rownum rn, cBill_C, cPeriod_N, cShift_N, iGuestNum, 
					dtBillTime, dtSettleTime, DBUSINESS, cCreateMan, cSettleMan,
				    nFoodAmt, cTable_N, nRoundAmt, nPresentAmt, nOughtAmt, nPayAmt, 
				    cBranch_N, nDisAmt, cDisManCur_n, cDisCurWhy, sRemark 
					from :{Com_("d_t_food_bill")}
					where DBUSINESS >= to_date(:startTime, :strDateFormat)
					and DBUSINESS <= to_date(:endTime, :strDateFormat)
					and :{conditionStr}
					and rownum <= :endRow) 
				where rn > :startRow
		};
		while(billIterator.next())
		{
			Bill bill = processIter(billIterator);
			bills.add(bill);
		}
		billIterator.close();
		closeDefaultContext(myCtx);
		return bills;
	}

	//指定门店的指定付款类型的单据数量
	public int billCountByPay(String startTime, String endTime, String shopC, String payType)
		throws NoPrivilegeException,SQLException,NoConnection
	{
		int billCount = 0;
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			select count(*) into :billCount 
			from :{Com_("d_t_food_bill")} a,:{Com_("d_t_bill_pay")} b
			where 
				a.DBUSINESS >= to_date(:startTime, :strDateFormat)
			and a.DBUSINESS <= to_date(:endTime, :strDateFormat)
			and a.cBill_C = b.cBill_C and a.cBranch_C = :shopC and b.cPay_C = :payType
		};
		closeDefaultContext(myCtx);
		return billCount;
	}
	
	//指定门店的指定付款类型的单据列表
	public List listBillByPay(String startTime, String endTime, String shopC, String payType, int startRow, int pageNum)
		throws NoPrivilegeException,SQLException,NoConnection
	{
		List bills = new ArrayList();
		DefaultContext myCtx = getDefaultContext();
		BillIterator billIterator = null;
		int endRow = startRow + pageNum;
		//遍历查找指定门店的指定台位的单据列表
		#sql [myCtx] billIterator = {select * from 
									(select rownum rn, a.cBill_C, a.cPeriod_N, a.cShift_N, a.iGuestNum, 
									a.dtBillTime, dtSettleTime, a.DBUSINESS, a.cCreateMan, a.cSettleMan,
									a.nFoodAmt, a.cTable_N,a.nRoundAmt, a.nPresentAmt, a.nOughtAmt, a.nPayAmt,
									a.cBranch_N, a.nDisAmt, a.cDisManCur_n, a.cDisCurWhy, a.sRemark 
									from :{Com_("d_t_food_bill")} a,:{Com_("d_t_bill_pay")} b
									where a.DBUSINESS >= to_date(:startTime, :strDateFormat)
									and a.DBUSINESS <= to_date(:endTime, :strDateFormat)
									and a.cBill_C = b.cBill_C and a.cBranch_C = :shopC and b.cPay_C = :payType
									and rownum <= :endRow) where rn > :startRow};
		while(billIterator.next())
		{
			Bill bill = processIter(billIterator);
			bills.add(bill);
		}
		billIterator.close();
		closeDefaultContext(myCtx);
		return bills;
	}

	//根据指定的单据号查询指定的单据信息
	public Bill listBillById(String id)
		throws NoPrivilegeException,SQLException,NoConnection
	{
		DefaultContext myCtx = getDefaultContext();
		BillIterator billIterator = null;
		Bill bill = new Bill();
		
		#sql [myCtx] billIterator = {
				select rownum rn, cBill_C, cPeriod_N, cShift_N, iGuestNum, 
				dtBillTime, dtSettleTime, DBUSINESS, cCreateMan, cSettleMan,
				nFoodAmt, cTable_N,	nRoundAmt, nPresentAmt, nOughtAmt, nPayAmt,
				cBranch_N,nDisAmt, cDisManCur_n, cDisCurWhy, sRemark 
				from :{Com_("d_t_food_bill")}
				where cBill_C = :id};
		while(billIterator.next())
		{
			bill = processIter(billIterator);
		}
		billIterator.close();
		closeDefaultContext(myCtx);
		return bill;
	}
	
	
	//指定门店的指定台位的单据数量
		public int listBillBylikeCodeCount(String startDate,String endDate,String code ,String shopC)
			throws NoPrivilegeException,SQLException,NoConnection
		{
			int billCount = 0;
			DefaultContext myCtx = getDefaultContext();
			#sql [myCtx] {SELECT
				 count(*) into :billCount
				  
				 FROM
				     :{Com_("d_t_food_bill")} d
				 WHERE
				     d.CBRANCH_C LIKE :shopC
				 AND d.cBill_C LIKE :code
				 AND d.DBUSINESS >= to_date(:startDate, 'yyyy-mm-dd')
				 AND d.DBUSINESS <= to_date(:endDate, 'yyyy-mm-dd')};
			closeDefaultContext(myCtx);
			return billCount;
		}
	
		public List<Bill> listBillBylikeCode(String startDate,String endDate,String code ,String shopC,int startRow,int pageNum)
			throws NoPrivilegeException,SQLException,NoConnection
		{
			List<Bill> bills = new ArrayList<Bill>();
			DefaultContext myCtx = getDefaultContext();
			BillIterator billIterator = null;
			int endRow = startRow + pageNum;
			#sql [myCtx] billIterator = {SELECT
				    *
				    FROM
				        (
				            SELECT
				                t.*,
				                ROWNUM RN
				            FROM
				                (
				                    SELECT
				                        cBill_C,
				                        dBusiness,
				                        cPeriod_N,
				                        cShift_N,
				                        iGuestNum,
				                        dtBillTime,
				                        dtSettleTime,
				                        cCreateMan,
				                        cSettleMan,
				                        nFoodAmt,
				                        cTable_N,
				                        nRoundAmt,
				                        nPresentAmt,
				                        nOughtAmt,
				                        nPayAmt,
				                        cBranch_N,
				                        nDisAmt,
				                        cDisManCur_n,
				                        cDisCurWhy,
				                        sRemark
				                    FROM
				                        :{Com_("d_t_food_bill")} d
				                    WHERE
				                    	d.CBRANCH_C LIKE :shopC
				                    AND d.cBill_C LIKE :code
				                    AND d.DBUSINESS >= to_date(:startDate, 'yyyy-mm-dd')
				                    AND d.DBUSINESS <= to_date(:endDate, 'yyyy-mm-dd')
				                    ORDER BY d.DBUSINESS DESC, d.dtBillTime DESC)t
				            WHERE
				                ROWNUM <= :endRow)
				    WHERE
				        RN >= :startRow};
			while(billIterator.next())
			{
				Bill bill = processIter(billIterator);
				bills.add(bill);
			}
			billIterator.close();
			closeDefaultContext(myCtx);
			return bills;
		}
		
		private Bill processIter(BillIterator billIterator) throws SQLException {
			Bill bill = new Bill();
			bill.dBusiness = billIterator.DBUSINESS();
			bill.billC = billIterator.cBill_C();
			bill.period = billIterator.cPeriod_N();
			bill.shift = ConvertAsciii0ToSpace(billIterator.cShift_N());
			bill.guestNum = billIterator.iGuestNum();
			bill.billTime = billIterator.dtBillTime();
			bill.settleTime = billIterator.dtSettleTime();
			bill.shopName = billIterator.cBranch_N();
			bill.table = billIterator.cTable_N();
			bill.createMan = ConvertAsciii0ToSpace(billIterator.cCreateMan());
			bill.settleMan = ConvertAsciii0ToSpace(billIterator.cSettleMan());
			bill.foodAmt = billIterator.nFoodAmt();
			bill.roundAmt = billIterator.nRoundAmt();
			bill.presentAmt = billIterator.nPresentAmt();
			bill.oughtAmt = billIterator.nOughtAmt();
			bill.payAmt = billIterator.nPayAmt();
			bill.disAmt = billIterator.nDisAmt();
			bill.disCurMan =  ConvertAsciii0ToSpace(billIterator.cDisManCur_n());
			bill.disCurWhy = ConvertAsciii0ToSpace(billIterator.cDisCurWhy());
			bill.remark = ConvertAsciii0ToSpace(billIterator.sRemark());
			return bill;
		}
}