package logic.businessquery;

import sqlj.runtime.ref.*;
import java.sql.*;
import java.util.*;
import logic.pool.ConnectionPool;
import logic.*;
import com.tanry.framework.acl.*;
import java.util.Map;
import java.util.HashMap;

public class PeriodBusinessBean extends ConnectionPool{
	#sql  public static iterator  PeriodBusinessIterator(
			String id,
			String rownumber,
			String timeSlot,
			Integer guestCount,
			Integer billCount,
			Integer guestPerTime,
			Double guestPerCost,
			Double foodAmtSum,
			Double payAmt,
			String shopC,
			String shopName,
			Double oughtAmt);
	
	public PeriodBusinessBean(){
	}
	
	public List<Map> listPeriodBusiness(String queryText)
		throws NoPrivilegeException,SQLException,NoConnection{
		DefaultContext myCtx = getDefaultContext();
		PeriodBusinessIterator periodBusinessIterator = null;
		
		List<Map> headerLst = new ArrayList<Map>();
		if (myCtx != null){
			
			#sql [myCtx] periodBusinessIterator = {
				WITH
				    t1 AS
				    (
				        SELECT
				            TO_CHAR(b.dtBillTime,'hh24')                               timeSlot,
				            SUM(b.iGuestNum)                                           guestCount,
				            COUNT(b.CBILL_C)                                           billCount,
				            DECODE(SUM(b.iGuestNum),0,0,floor(60 / SUM(b.iGuestNum)) )               guestPerTime,
				            DECODE(SUM(b.iGuestNum), 0,0,ROUND(SUM(nFoodAmt) / SUM(b.iGuestNum),2 )) guestPerCost,
				            SUM(nFoodAmt)                                                            foodAmtSum,
				            SUM (nPayAmt)                                                            payAmt,
				            SUM(nOughtAmt)                                                           oughtAmt,
				            b.CBRANCH_N                                                              shopName,
				            b.CBRANCH_C                                                              shopC
				        FROM
				            :{Com_("d_t_food_bill")} b
				        WHERE
				        	:{queryText}
				        GROUP BY
				            b.CBRANCH_C,
				            b.CBRANCH_N,
				            TO_CHAR(b.dtBillTime,'hh24')
				    )
				    ,
				    t2 AS
				    (
				        SELECT
				            t1.timeSlot,
				            SUM(t1.guestCount) guestCount,
				            SUM(t1.billCount)  billCount,
				            t1.guestPerTime,
				            t1.guestPerCost,
				            SUM(t1.foodAmtSum)foodAmtSum,
				            SUM(t1.payAmt)    payAmt,
				            SUM(t1.oughtAmt)  oughtAmt,
				            t1.shopName,
				            t1.shopC
				        FROM
				            t1
				        GROUP BY
				            GROUPING SETS( (t1.shopC,t1.shopName,t1.timeSlot,t1.guestCount,t1.billCount,
				            t1.guestPerTime, t1.guestPerCost, t1.foodAmtSum ,t1.payAmt,t1.oughtAmt),NULL)
				        ORDER BY
				            t1.timeSlot,
				            t1.shopC
				    )
				SELECT
				    DECODE(t2.timeSlot,NULL,'合计',rownum) rownumber,
				    DECODE(t2.timeSlot,NULL,'合计',rownum) id,
				    t2.*
				FROM
				    t2};

			while(periodBusinessIterator.next()){
				Map header = new HashMap();
				
				header.put("id", periodBusinessIterator.id());
				header.put("rownumber", periodBusinessIterator.rownumber());
				header.put("timeSlot", periodBusinessIterator.timeSlot());
				header.put("guestCount", periodBusinessIterator.guestCount());
				header.put("billCount", periodBusinessIterator.billCount());
				header.put("guestPerTime", periodBusinessIterator.guestPerTime());
				header.put("guestPerCost", periodBusinessIterator.guestPerCost());
				header.put("foodAmtSum", periodBusinessIterator.foodAmtSum());
				header.put("oughtAmt", periodBusinessIterator.oughtAmt());
				header.put("payAmt", periodBusinessIterator.payAmt());
				header.put("shopC", periodBusinessIterator.shopC());
				header.put("shopName", periodBusinessIterator.shopName());
				headerLst.add(header);
			}
			periodBusinessIterator.close();
		}else {
            throw new NoConnection();
        }
		
		closeDefaultContext(myCtx);
		return headerLst;
	}
}
