/**
 * Copyright (c) 2013
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on 2016年1月25日 by cjt
 * Last edited on 2016年1月25日 by cjt
 */

package logic.restapi;

import java.sql.Date;
import java.sql.SQLException;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.DateTimeUtil;

/**
 * 传递数据日志表
 */
public class RestApiLogBean extends ConnectionPool {
	private String comId = "com";
	#sql public static iterator LogIter(
			String log_id, 
			String api, 
			String code,	
			int receive,
			int success,
			int fail,
			Date log_time,
			String sender
		);
	
	public int saveEntity(Map map) throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getComContext(comId);

		String logId = map.get("logId").toString();
		String api = map.get("api").toString();
		String code = map.get("code").toString();
		int receive = (int)map.get("receive");
		int success = (int)map.get("success");
		int fail = (int)map.get("fail");
		Date logTime = SqlDateUtil.getSqlDate((java.util.Date)map.get("logTime"));
		String sender = map.get("sender").toString();
		
		#sql [myCtx] {
			INSERT INTO :{Com_("D_T_RESTAPI_LOG")}
				(LOG_ID, API, CODE, RECEIVE, SUCCESS, FAIL, LOG_TIME, SENDER) 
			VALUES 
				(:logId, :api, :code, :receive, :success, :fail, :logTime, :sender)
			};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int saveEntity(List<Map> maps) throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getComContext(comId);
		for(int i=0;i<maps.size();i++){
			Map map = maps.get(i);
			String logId = map.get("logId").toString();
			String api = map.get("api").toString();
			String code = map.get("code").toString();
			int receive = (int)map.get("receive");
			int success = (int)map.get("success");
			int fail = (int)map.get("fail");
			Date logTime = SqlDateUtil.getSqlDate((java.util.Date)map.get("logTime"));
			String sender = map.get("sender").toString();
			
			#sql [myCtx] {
				INSERT INTO :{Com_("D_T_RESTAPI_LOG")}
					(LOG_ID, API, CODE, RECEIVE, SUCCESS, FAIL, LOG_TIME, SENDER) 
				VALUES 
					(:logId, :api, :code, :receive, :success, :fail, :logTime, :sender)
			};
		}
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int countLog(String queryTxt) throws SQLException {
		DefaultContext myCtx = getComContext(comId);
		
		int total = 0;
		#sql [myCtx] {
			SELECT 
				count(*) into :total
			FROM :{Com_("D_T_RESTAPI_LOG")} l
			WHERE 
				:{queryTxt}
		};

		closeDefaultContext(myCtx);
		
		return total;
	}
	
	public List<Map> listLog(String queryTxt, int startRow, int endRow) throws SQLException {
		DefaultContext myCtx = getComContext(comId);
		LogIter logIter = null;
		List<Map> logLst = new ArrayList<Map>();
		
		#sql [myCtx] logIter = {
			SELECT
			    *
			FROM
			(
				SELECT 
					l.*, 
					ROWNUM rowNumber 
				FROM :{Com_("D_T_RESTAPI_LOG")} l
				WHERE 
					:{queryTxt}
				AND ROWNUM < :endRow
				ORDER BY log_time DESC
			)
		    WHERE
		        rowNumber >= :startRow
		};

		while(logIter.next()){
			Map log = new HashMap();
			log.put("logId", logIter.log_id());
			log.put("api", logIter.api());
			log.put("code", logIter.code());
			log.put("receive", logIter.receive());
			log.put("success", logIter.success());
			log.put("fail", logIter.fail());
			log.put("logTime", DateTimeUtil.getDateTime(SqlDateUtil.getUtilDate(logIter.log_time()),""));
			log.put("sender", logIter.sender());
			logLst.add(log);
		}
		logIter.close();
		
		closeDefaultContext(myCtx);
		return logLst;
	}

	/**
	 * 删除指定日期之前7天的日志数据
	 */
	public int deleteByDate(java.util.Date businessDate) 
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getComContext(comId);
		
//		String com = getSessionCom();

		//取前七天的日期，数据保留七日
		Date sBusinessDate = SqlDateUtil.getSqlDate(businessDate);
		Date sevenDaysBefore = SqlDateUtil.addDays(sBusinessDate, -7);
		
		#sql [myCtx] {
			DELETE FROM :{Com_("D_T_RESTAPI_ERR_MSG")} msg
			WHERE EXISTS(
				SELECT * FROM :{Com_("D_T_RESTAPI_LOG")} log 
				WHERE log.log_id = msg.log_id
				--AND log.SENDER = :com
				AND log.LOG_TIME < :sevenDaysBefore
			)
		};
		
		#sql [myCtx] {
			DELETE FROM :{Com_("D_T_RESTAPI_ERR_JSON")} json
		    WHERE EXISTS(
				SELECT * FROM :{Com_("D_T_RESTAPI_LOG")} log 
				WHERE log.log_id = json.log_id
				--AND log.SENDER = :com
				AND log.LOG_TIME < :sevenDaysBefore
			)
		};
				
		#sql [myCtx] {
			DELETE FROM :{Com_("D_T_RESTAPI_LOG")} 
			WHERE LOG_TIME < :sevenDaysBefore
			--AND SENDER = :com
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
}