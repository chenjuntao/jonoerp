package logic.module.outer;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

import pojo.form.CollectDetail;
import pojo.form.RequestHeader;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.DateTimeUtil;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;

public class OutOrderHandleBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(OutOrderHandleBean.class);
	
	#sql private iterator OutOrderIter(
			String form_id,
			String buyer_name,
			String buyer_address,
			String provider,
			Date receive_time,
			Date audit_time,
			String form_note,
			Double all_pay_amt,
			String max_pay_item,
			String status
		);
	
	
	/**
	 * startDate 	审核开始日期
	 * endDate	  	审核结束日期
	 * branchId 	物流中心Id
	 * outOrderId   外部订货方Id
	 * initstatus   初始状态
	 * status		状态
	 */
	public List<Map> query(java.util.Date startDate, java.util.Date endDate, String branchId,String outOrderId, String initStatus, String status)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = queryCondition(branchId,outOrderId,initStatus,status);
		
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		OutOrderIter outOrderIter = null;
		#sql [myCtx] outOrderIter = {
			SELECT
			    h.FORM_ID,
			    h.BUYER_NAME,
			    h.BUYER_ADDRESS,
			    h.PROVIDER,
			    h.RECEIVE_TIME,
			    h.AUDIT_TIME,
			    h.FORM_NOTE,
			    h.ALL_PAY_AMT,
			    h.MAX_PAY_ITEM,
			    s.STATUS
			FROM
			:{Com_("D_T1_REQUEST_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    h.FORM_ID = s.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
			 :{query ::}
			AND h.FORM_TYPE = 'outer'
			AND (
			        h.AUDIT_TIME >= :sDate
			    OR  :sDate IS NULL)
			AND (
			        h.AUDIT_TIME <= :eDate
			    OR  :eDate IS NULL) order by h.FORM_ID};
		List<Map> resultLst = outerOrderIter(outOrderIter);
		outOrderIter.close();
		
		closeDefaultContext(myCtx);
		return resultLst;
	}
	
	private String queryCondition(String branchId,String outOrderId,String initStatus, String status){
		String query = " 1=1";
		
		if (!TextUtil.isEmpty(branchId)) { 
			query = query + " AND h.PROVIDER_ID = '" + branchId + "'";
		}
		
		if (!TextUtil.isEmpty(outOrderId)) { 
			query = query + " AND h.BUYER_ID = '" + outOrderId + "'";
		}
		
		if (!TextUtil.isEmpty(initStatus)) { 
			query = query + " AND s.STATUS in ('" + initStatus.replaceAll(",", "','") + "')";
		}
		
		if (!TextUtil.isEmpty(status)) { 
			query = query + " AND s.STATUS = '" + status + "'";
		}
		
		return query;
	}
	
	/**
	 * startDate 	审核开始日期
	 * endDate	  	审核结束日期
	 * branchId 	物流中心Id
	 * outOrderId   外部订货方Id
	 */
	public Double sum(java.util.Date startDate, java.util.Date endDate, String branchId,String outOrderId,String initStatus, String status)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = queryCondition(branchId,outOrderId,initStatus,status);
		
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		Double sumAmount = 0.0;
		
		DefaultContext myCtx = getDefaultContext();
		OutOrderIter outOrderIter = null;
		#sql [myCtx] {
			SELECT
				round(sum(h.ALL_PAY_AMT),2) into :sumAmount
			FROM
			:{Com_("D_T1_REQUEST_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    h.FORM_ID = s.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
			 :{query ::}
			AND h.FORM_TYPE = 'outer'
			AND (
			        h.AUDIT_TIME >= :sDate
			    OR  :sDate IS NULL)
			AND (
			        h.AUDIT_TIME <= :eDate
			    OR  :eDate IS NULL)};
		
		closeDefaultContext(myCtx);
		return sumAmount;
	}
	
	private List<Map> outerOrderIter(OutOrderIter outOrderIter) 
			throws SQLException {
		List<Map> headLst = new ArrayList<Map>();
		while(outOrderIter.next()) {
			Map<String, Object> head = new HashMap<String, Object>();
			head.put("form_id", outOrderIter.form_id());
			head.put("buyer_name", outOrderIter.buyer_name());
			head.put("buyer_address", outOrderIter.buyer_address());
			head.put("provider", outOrderIter.provider());
			head.put("receive_time", outOrderIter.receive_time());
			head.put("audit_time", outOrderIter.audit_time());
			head.put("form_note", outOrderIter.form_note());
			head.put("all_pay_amt", outOrderIter.all_pay_amt());
			head.put("max_pay_item", outOrderIter.max_pay_item());
			head.put("status", outOrderIter.status());
			
			headLst.add(head);
		}
		return headLst;
	}
	
}