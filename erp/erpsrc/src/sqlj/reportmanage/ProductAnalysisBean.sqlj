package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.acl.NoPrivilegeException;

public class ProductAnalysisBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(ProductAnalysisBean.class);
	
	#sql private iterator HeaderIter(
			Date complete_time,
			String item_id, 
			String item_name,
			String item_dimension,
			Double item_count,
			Double actual,
			String item_id2,
			String item_name2,
			String item_dimension2,
			Double item_count2, 
			Double inputed_count, 
			Double diff, 
			String form_id);
	
	#sql private iterator SumIter(
			Double item_count,
			Double actual,
			Double item_count2,
			Double inputed_count,
			Double diff
		);
	
	#sql private iterator TotalIter(
			Integer totals
		);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("complete_time", "Date");
		map.put("item_id", "String");
		map.put("item_name", "String"); 
		map.put("item_dimension", "String"); 
		map.put("item_count", "Number");
		map.put("actual", "Number");
		map.put("item_id2", "String");
		map.put("item_name2", "String");
		map.put("item_dimension2", "String");
		map.put("item_count2", "Number");
		map.put("inputed_count", "Number"); 
		map.put("diff", "Number"); 
		map.put("form_id", "String"); 
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		
		map.put("complete_time", "t");
		map.put("item_id", "t");
		map.put("item_name", "t"); 
		map.put("item_dimension", "t"); 
		map.put("item_count", "t");
		map.put("actual", "t");
		map.put("item_id2", "t");
		map.put("item_name2", "t");
		map.put("item_dimension2", "t");
		map.put("item_count2", "t");
		map.put("inputed_count", "t"); 
		map.put("diff", "t"); 
		map.put("form_id", "t"); 
		
		return map;
	}
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		TotalIter totalIter = null;
		int totals = 0; 
		
		#sql [myCtx] totalIter = {
			WITH
			    t AS
			    (
			        SELECT
			            d.COMPLETE_TIME,
			            i.ITEM_ID,
			            i.ITEM_NAME,
			            i.ITEM_DIMENSION,
			            ROUND(t.ITEM_GROSS_COUNT*h.INPUTED_COUNT,4) ITEM_COUNT,
			            i.RECEIVED_COUNT -i.RETURNED_COUNT          actual,
			            h.ITEM_ID                                   ITEM_ID2,
			            h.ITEM_NAME                                 ITEM_NAME2,
			            h.ITEM_DIMENSION                            ITEM_DIMENSION2,
			            h.ITEM_COUNT                                ITEM_COUNT2,
			            h.INPUTED_COUNT,
			            ROUND(t.ITEM_GROSS_COUNT*h.INPUTED_COUNT,4) - i.RECEIVED_COUNT+i.RETURNED_COUNT diff,
			            h.FORM_ID
			        FROM
			            :{Com_("D_T1_WORK_ORDER_HEADER")} h
			        INNER JOIN
			            :{Com_("D_T1_WORKORDER_ITEM")} i
			        ON
			            h.FORM_ID = i.FORM_ID
			        INNER JOIN
			            :{Com_("D_T2_THERAPY")} t
			        ON
			            h.ITEM_ID = t.THERAPY_ID
			        AND i.ITEM_ID = t.ITEM_ID
			        INNER JOIN
			            :{Com_("D_T1_ARRENGMENT_DETAIL")} d
			        ON
			            h.FORM_ID = d.WORK_ORDER_ID
			    )
			SELECT
			    COUNT(*) totals
			FROM
			    t
			WHERE
			    1 = 1 :{queryStr :: ''}};

		if(totalIter.next()) {
			totals = totalIter.totals();
		}
		
		totalIter.close();
		closeDefaultContext(myCtx);
		return totals;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (WITH
			                	    t AS
			                	    (SELECT
			                	    	    d.COMPLETE_TIME,
			                	    	    i.ITEM_ID,
			                	    	    i.ITEM_NAME,
			                	    	    i.ITEM_DIMENSION,
			                	    	    ROUND(t.ITEM_GROSS_COUNT*h.INPUTED_COUNT,4) ITEM_COUNT,
			                	    	    i.RECEIVED_COUNT -i.RETURNED_COUNT          actual,
			                	    	    h.ITEM_ID                                   ITEM_ID2,
			                	    	    h.ITEM_NAME                                 ITEM_NAME2,
			                	    	    h.ITEM_DIMENSION                            ITEM_DIMENSION2,
			                	    	    h.ITEM_COUNT                                ITEM_COUNT2,
			                	    	    h.INPUTED_COUNT,
			                	    	    ROUND(t.ITEM_GROSS_COUNT*h.INPUTED_COUNT,4) - i.RECEIVED_COUNT+i.RETURNED_COUNT diff,
			                	    	    h.FORM_ID
			                	    	FROM
			                	    	    :{Com_("D_T1_WORK_ORDER_HEADER")} h
			                	    	INNER JOIN
			                	    	    :{Com_("D_T1_WORKORDER_ITEM")} i
			                	    	ON
			                	    	    h.FORM_ID = i.FORM_ID
			                	    	INNER JOIN
			                	    	    :{Com_("D_T2_THERAPY")} t
			                	    	ON
			                	    	    h.ITEM_ID = t.THERAPY_ID
			                	    	AND i.ITEM_ID = t.ITEM_ID
			                	    	INNER JOIN
			                	    	    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
			                	    	ON
			                	    	    h.FORM_ID = d.WORK_ORDER_ID)
			                	SELECT
			                	    *
			                	FROM
			                	    t WHERE
			                	    1 = 1 :{queryStr :: ''} :{sortStr :: ''} ) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
			WITH
        	    t AS
        	    (SELECT
        	    	    d.COMPLETE_TIME,
        	    	    i.ITEM_ID,
        	    	    i.ITEM_NAME,
        	    	    i.ITEM_DIMENSION,
        	    	    ROUND(t.ITEM_GROSS_COUNT*h.INPUTED_COUNT,4) ITEM_COUNT,
        	    	    i.RECEIVED_COUNT -i.RETURNED_COUNT          actual,
        	    	    h.ITEM_ID                                   ITEM_ID2,
        	    	    h.ITEM_NAME                                 ITEM_NAME2,
        	    	    h.ITEM_DIMENSION                            ITEM_DIMENSION2,
        	    	    h.ITEM_COUNT                                ITEM_COUNT2,
        	    	    h.INPUTED_COUNT,
        	    	    ROUND(t.ITEM_GROSS_COUNT*h.INPUTED_COUNT,4) - i.RECEIVED_COUNT+i.RETURNED_COUNT diff,
        	    	    h.FORM_ID
        	    	FROM
        	    	    :{Com_("D_T1_WORK_ORDER_HEADER")} h
        	    	INNER JOIN
        	    	    :{Com_("D_T1_WORKORDER_ITEM")} i
        	    	ON
        	    	    h.FORM_ID = i.FORM_ID
        	    	INNER JOIN
        	    	    :{Com_("D_T2_THERAPY")} t
        	    	ON
        	    	    h.ITEM_ID = t.THERAPY_ID
        	    	AND i.ITEM_ID = t.ITEM_ID
        	    	INNER JOIN
        	    	    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
        	    	ON
        	    	    h.FORM_ID = d.WORK_ORDER_ID)
        	SELECT
        		sum(t.ITEM_COUNT)ITEM_COUNT,
	    	    sum(t.actual)actual,
	    	    sum(t.ITEM_COUNT2)ITEM_COUNT2,
	    	    sum(t.INPUTED_COUNT)INPUTED_COUNT,
	    	    sum(t.diff) diff
        	FROM
        	    t WHERE
        	    1 = 1 :{queryStr :: ''} };
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("item_count", sumIter.item_count());
			sumMap.put("actual", sumIter.actual());
			sumMap.put("item_count2", sumIter.item_count2());
			sumMap.put("inputed_count", sumIter.inputed_count());
			sumMap.put("diff", sumIter.diff());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("complete_time", headerIter.complete_time());
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_count", headerIter.item_count());
			header.put("actual", headerIter.actual());
			header.put("item_id2", headerIter.item_id2());
			header.put("item_name2", headerIter.item_name2());
			header.put("item_dimension2", headerIter.item_dimension2());
			header.put("item_count2", headerIter.item_count2());
			header.put("inputed_count", headerIter.inputed_count());
			header.put("diff", headerIter.diff());
			header.put("form_id", headerIter.form_id());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}