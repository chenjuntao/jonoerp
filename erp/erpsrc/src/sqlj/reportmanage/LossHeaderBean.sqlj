package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.acl.NoPrivilegeException;

public class LossHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(LossHeaderBean.class);
	
	#sql private iterator HeaderIter(
			String storage_id, 
			String storage, 
			String loss_branch_id, 
			String loss_branch, 
			String item_id,
	 	 	String item_name,
	 	 	String item_dimension,
	 	 	String item_specification,
	 	 	String item_category,
	 	 	String category_name,
	 	 	Double item_count,
	 	 	Double pay_amt,
	 	 	Double storage_count);
	
	#sql private iterator SumIter(
			Double item_count,
			Double pay_amt);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("storage_id", "String");
		map.put("storage", "String");
		map.put("loss_branch_id", "String");
		map.put("loss_branch", "String");
		map.put("item_id", "String");
		map.put("item_name", "String");
		map.put("item_dimension", "String"); 
		map.put("item_specification", "String"); 
		map.put("item_category", "String"); 
		map.put("category_name", "String"); 
		map.put("item_count", "Number");
		map.put("pay_amt", "Number");
		map.put("storage_count", "Number");
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("storage_id", "h");
		map.put("storage", "h");
		map.put("loss_branch_id", "h");
		map.put("loss_branch", "h");
		map.put("item_id", "d");
		map.put("item_name", "d");
		map.put("item_dimension", "d"); 
		map.put("item_specification", "d"); 
		map.put("item_category", "d"); 
		map.put("category_name", "c"); 
		map.put("item_count", "d");
		map.put("pay_amt", "d");
		map.put("storage_count", "d");
		return map;
	}
	
	public int count(String queryStr, String sortStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    (SELECT
		    	    COUNT(*)
		    FROM
		    :{Com_("D_T1_LOSS_DETAIL")} d
		    LEFT JOIN
		    :{Com_("D_T2_ITEM_CATEGORY")} c
		    ON
		        d.ITEM_CATEGORY = c.CATEGORY_ID
		    LEFT JOIN
		    :{Com_("D_T1_LOSS_HEADER")} h
		    ON
		        h.FORM_ID = d.FORM_ID
		    LEFT JOIN
		    :{Com_("D_T2_BRANCH")} b
		    ON
		        h.LOSS_BRANCH_ID = b.BRANCH_ID
		    LEFT JOIN
		    :{Com_("D_T0_FORM_STATUS")}s 
		    ON
		        s.FORM_ID = d.FORM_ID
		    AND s.IS_CURRENT = 1
		    WHERE
		        1 = 1  AND s.STATUS NOT IN ('未审核') :{queryStr :: ''}
		    GROUP BY
		        h.LOSS_BRANCH_ID ,
		        h.LOSS_BRANCH,
		        h.STORAGE_ID,
		        h.STORAGE,
		        d.ITEM_ID,
		        d.ITEM_NAME,
		        d.ITEM_CATEGORY,
		        c.CATEGORY_NAME,
		        d.ITEM_DIMENSION,
		        d.ITEM_SPECIFICATION ) a};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,  String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (SELECT
			                	    h.LOSS_BRANCH_ID ,
			                	    h.LOSS_BRANCH,
			                	    h.STORAGE_ID,
			                	    h.STORAGE,
			                	    d.ITEM_ID,
			                	    d.ITEM_NAME,
			                	    d.ITEM_DIMENSION,
			                	    d.ITEM_SPECIFICATION,
			                	    d.ITEM_CATEGORY,
			                	    c.CATEGORY_NAME,
			                	    SUM(d.ITEM_COUNT)    ITEM_COUNT,
			                	    SUM(d.PAY_AMT)       PAY_AMT ,
			                	    SUM(d.STORAGE_COUNT) STORAGE_COUNT
			                	FROM
			                	:{Com_("D_T1_LOSS_DETAIL")} d
			                	LEFT JOIN
			                	:{Com_("D_T2_ITEM_CATEGORY")} c
			                	ON
			                	    d.ITEM_CATEGORY = c.CATEGORY_ID
			                	LEFT JOIN
			                	:{Com_("D_T1_LOSS_HEADER")} h
			                	ON
			                	    h.FORM_ID = d.FORM_ID
			                	LEFT JOIN
			                	:{Com_("D_T2_BRANCH")} b
			                	ON
			                	    h.LOSS_BRANCH_ID = b.BRANCH_ID
			                	WHERE
			                	    1 = 1 AND h.AUDIT_TIME IS NOT NULL :{queryStr :: ''}
			                	GROUP BY
			                	    h.LOSS_BRANCH_ID ,
			                	    h.LOSS_BRANCH,
			                	    h.STORAGE_ID,
			                	    h.STORAGE,
			                	    d.ITEM_ID,
			                	    d.ITEM_NAME,
			                	    d.ITEM_CATEGORY,
			                	    c.CATEGORY_NAME,
			                	    d.ITEM_DIMENSION,
			                	    d.ITEM_SPECIFICATION :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr, String sortStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {SELECT
			    SUM (ITEM_COUNT) ITEM_COUNT,
			    SUM(PAY_AMT)     PAY_AMT
			FROM
			    (
			        SELECT
			            SUM( d.ITEM_COUNT) ITEM_COUNT,
			            SUM(d.PAY_AMT)     PAY_AMT
			        FROM
			        :{Com_("D_T1_LOSS_DETAIL")} d
			        LEFT JOIN
			        :{Com_("D_T2_ITEM_CATEGORY")} c
			        ON
			            d.ITEM_CATEGORY = c.CATEGORY_ID
			        LEFT JOIN
			        :{Com_("D_T1_LOSS_HEADER")} h
			        ON
			            h.FORM_ID = d.FORM_ID
			        LEFT JOIN
			        :{Com_("D_T2_BRANCH")} b
			        ON
			            h.LOSS_BRANCH_ID = b.BRANCH_ID
			        LEFT JOIN
			        :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            s.FORM_ID = d.FORM_ID
			        AND s.IS_CURRENT = 1
			        WHERE
			            1 = 1  AND s.STATUS NOT IN ('未审核') :{queryStr :: ''}
			        GROUP BY
			            h.LOSS_BRANCH_ID ,
			            h.LOSS_BRANCH,
			            h.STORAGE_ID,
			            h.STORAGE,
			            d.ITEM_ID,
			            d.ITEM_NAME,
			            d.ITEM_CATEGORY,
			            c.CATEGORY_NAME,
			            d.ITEM_DIMENSION,
			            d.ITEM_SPECIFICATION ) a};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("item_count", sumIter.item_count());
			sumMap.put("pay_amt", sumIter.pay_amt());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("storage_id", headerIter.storage_id());
			header.put("storage", headerIter.storage());
			header.put("loss_branch_id", headerIter.loss_branch_id());
			header.put("loss_branch", headerIter.loss_branch());
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_specification", headerIter.item_specification());
			header.put("item_category", headerIter.item_category());
			header.put("category_name", headerIter.category_name());
			header.put("item_count", headerIter.item_count());
			header.put("pay_amt", headerIter.pay_amt());
			header.put("storage_count", headerIter.storage_count());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}