package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class InputHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(InputHeaderBean.class);
	
    #sql private iterator HeaderIter(
            String input_department_id, 
            String input_department, 
            String storage_id, 
            String storage,
            String provider_id,
            String provider,
            String item_id,
			String item_name,
			String item_dimension,
			String item_specification,
			String item_category,
			Double order_count,
			Double receive_count,
			Double different_count,
			Double item_unit_price,
			Double pay_amt,
			Double receive_price,
			Double receive_amt,
			Double different_amt,
			String category_name);
    
    #sql private iterator SumIter(
			Double order_count,
			Double receive_count,
			Double different_count,
			Double pay_amt,
			Double receive_amt,
			Double different_amt);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("input_department_id", "String");
		map.put("input_department", "String");
		map.put("storage_id", "String");
		map.put("storage", "String");
		map.put("provider_id", "String");
		map.put("provider", "String");
		map.put("item_id", "String");
		map.put("item_name", "String");
		map.put("item_dimension", "String");
		map.put("item_specification", "String");
		map.put("item_category", "String");
		map.put("order_count", "Number");
		map.put("receive_count", "Number");
		map.put("different_count", "Number");
		map.put("item_unit_price", "Number");
		map.put("pay_amt", "Number");
		map.put("receive_price", "Number");
		map.put("receive_amt", "Number");
		map.put("different_amt", "Number");
		map.put("category_name", "String");
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("input_department_id", "h");
		map.put("input_department", "h");
		map.put("storage_id", "h");
		map.put("storage", "h");
		map.put("item_id", "d");
		map.put("item_name", "d");
		map.put("provider_id", "h");
		map.put("provider", "h");
		map.put("item_dimension", "d");
		map.put("item_specification", "d");
		map.put("item_category", "d");
		map.put("order_count", "d");
		map.put("receive_count", "d");
		map.put("different_count", "d");
		map.put("item_unit_price", "d");
		map.put("pay_amt", "d");
		map.put("receive_price",  "d");
		map.put("receive_amt",  "d");
		map.put("different_amt",  "d");
		map.put("category_name", "c");
		
		return map;
	}
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    (SELECT
		    		COUNT(*)
            	FROM
            	    :{Com_("D_T1_INPUT_HEADER")} h
            	INNER JOIN
            	    :{Com_("D_T0_FORM_STATUS")} s
            	ON
            	    h.FORM_ID = s.FORM_ID
            	AND s.IS_CURRENT = 1
            	INNER JOIN
            	    :{Com_("D_T1_INPUT_DETAIL")} d
            	ON
            	    h.FORM_ID = d.FORM_ID
            	LEFT JOIN
            	    :{Com_("D_T2_ITEM_CATEGORY")} c
            	ON
            	    d.ITEM_CATEGORY = c.CATEGORY_ID
            	LEFT JOIN
            	    :{Com_("D_T2_BRANCH")} b
            	ON
            	    h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
            	WHERE
            	    1 = 1
            	AND s.STATUS = '已审核' :{queryStr :: ''}
            	GROUP BY
            	    h.INPUT_DEPARTMENT_ID,
            	    h.INPUT_DEPARTMENT,
            	    h.STORAGE_ID,
            	    h.STORAGE,
            	    h.PROVIDER_ID,
            	    h.PROVIDER,
            	    d.ITEM_ID ,
            	    d.ITEM_NAME,
            	    d.ITEM_DIMENSION,
            	    d.ITEM_SPECIFICATION,
            	    d.ITEM_CATEGORY,
            	    d.ITEM_UNIT_PRICE,
            	    d.RECEIVE_PRICE,
            	    c.CATEGORY_NAME) a};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM 
			                (SELECT
			                	    h.INPUT_DEPARTMENT_ID,
			                	    h.INPUT_DEPARTMENT,
			                	    h.STORAGE_ID,
			                	    h.STORAGE,
			                	    h.PROVIDER_ID,
			                	    h.PROVIDER,
			                	    d.ITEM_ID,
			                	    d.ITEM_NAME,
			                	    d.ITEM_DIMENSION,
			                	    d.ITEM_SPECIFICATION,
			                	    d.ITEM_CATEGORY,
			                	    c.CATEGORY_NAME,
			                	    SUM( NVL(d.ORDER_COUNT,0))   ORDER_COUNT ,
			                	    SUM( NVL(d.RECEIVE_COUNT,0)) RECEIVE_COUNT,
			                	    SUM(NVL(d.DIFFERENT_COUNT,0))DIFFERENT_COUNT ,
			                	    d.ITEM_UNIT_PRICE,
			                	    SUM( NVL(d.PAY_AMT,0)) PAY_AMT,
			                	    d.RECEIVE_PRICE,
			                	    SUM( ROUND(NVL(d.RECEIVE_AMT,0),2))                                RECEIVE_AMT,
			                	    ROUND( SUM( NVL(d.PAY_AMT,0))-SUM( ROUND(NVL(d.RECEIVE_AMT,0),2))) DIFFERENT_AMT
			                	FROM
			                	    :{Com_("D_T1_INPUT_HEADER")} h
			                	INNER JOIN
			                	    :{Com_("D_T1_INPUT_DETAIL")} d
			                	ON
			                	    h.FORM_ID = d.FORM_ID
			                	LEFT JOIN
			                	    :{Com_("D_T2_ITEM_CATEGORY")} c
			                	ON
			                	    d.ITEM_CATEGORY = c.CATEGORY_ID
			                	LEFT JOIN
			                	    :{Com_("D_T2_BRANCH")} b
			                	ON
			                	    h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
			                	WHERE
			                	    1 = 1
                	    		AND h.AUDIT_TIME IS NOT NULL :{queryStr :: ''}
			                	GROUP BY
			                	    h.INPUT_DEPARTMENT_ID,
			                	    h.INPUT_DEPARTMENT,
			                	    h.STORAGE_ID,
			                	    h.STORAGE,
			                	    h.PROVIDER_ID,
			                	    h.PROVIDER,
			                	    d.ITEM_ID ,
			                	    d.ITEM_NAME,
			                	    d.ITEM_DIMENSION,
			                	    d.ITEM_SPECIFICATION,
			                	    d.ITEM_CATEGORY,
			                	    d.ITEM_UNIT_PRICE,
			                	    d.RECEIVE_PRICE,
			                	    c.CATEGORY_NAME :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
			SELECT
			    SUM( ORDER_COUNT)        ORDER_COUNT ,
			    SUM( RECEIVE_COUNT)      RECEIVE_COUNT,
			    SUM(DIFFERENT_COUNT)     DIFFERENT_COUNT ,
			    SUM( PAY_AMT)            PAY_AMT,
			    SUM(RECEIVE_AMT)         RECEIVE_AMT,
			    SUM(PAY_AMT-RECEIVE_AMT) DIFFERENT_AMT
			FROM
			    (
			        SELECT
			            SUM( ORDER_COUNT)        ORDER_COUNT ,
			            SUM( RECEIVE_COUNT)      RECEIVE_COUNT,
			            SUM(DIFFERENT_COUNT)     DIFFERENT_COUNT ,
			            SUM( PAY_AMT)            PAY_AMT,
			            SUM(RECEIVE_AMT)         RECEIVE_AMT,
			            SUM(PAY_AMT-RECEIVE_AMT) DIFFERENT_AMT
			        FROM
			            :{Com_("D_T1_INPUT_HEADER")} h
			        INNER JOIN
			            :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            h.FORM_ID = s.FORM_ID
			        AND s.IS_CURRENT = 1
			        INNER JOIN
			            :{Com_("D_T1_INPUT_DETAIL")} d
			        ON
			            h.FORM_ID = d.FORM_ID
			        LEFT JOIN
			            :{Com_("D_T2_ITEM_CATEGORY")} c
			        ON
			            d.ITEM_CATEGORY = c.CATEGORY_ID
			        LEFT JOIN
			            :{Com_("D_T2_BRANCH")} b
			        ON
			            h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
			        WHERE
			            1 = 1
			        AND s.STATUS = '已审核' :{queryStr :: ''}
			        GROUP BY
			            h.INPUT_DEPARTMENT_ID,
			            h.INPUT_DEPARTMENT,
			            h.STORAGE_ID,
			            h.STORAGE,
			            h.PROVIDER_ID,
			            h.PROVIDER,
			            d.ITEM_ID ,
			            d.ITEM_NAME,
			            d.ITEM_DIMENSION,
			            d.ITEM_SPECIFICATION,
			            d.ITEM_CATEGORY,
			            d.ITEM_UNIT_PRICE,
			            d.RECEIVE_PRICE,
			            c.CATEGORY_NAME )};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("order_count", sumIter.order_count());
			sumMap.put("receive_count", sumIter.receive_count());
			sumMap.put("different_count", sumIter.different_count());
			sumMap.put("pay_amt", sumIter.pay_amt());
			sumMap.put("receive_amt", sumIter.receive_amt());
			sumMap.put("different_amt", sumIter.different_amt());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("input_department_id", headerIter.input_department_id());
			header.put("input_department","["+headerIter.input_department_id()+"]"+ headerIter.input_department());
			header.put("storage_id", headerIter.storage_id());
			header.put("storage", headerIter.storage());
			header.put("provider_id", headerIter.provider_id());
			header.put("provider", headerIter.provider());
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_specification", headerIter.item_specification());
			header.put("item_category", headerIter.item_category());
			header.put("order_count", headerIter.order_count());
			header.put("receive_count", headerIter.receive_count());
			header.put("different_count", headerIter.different_count());
			header.put("item_unit_price", headerIter.item_unit_price());
			header.put("pay_amt", headerIter.pay_amt());
			header.put("receive_price", headerIter.receive_price());
			header.put("receive_amt", headerIter.receive_amt());
			header.put("different_amt", headerIter.different_amt());
			header.put("category_name", headerIter.category_name());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}