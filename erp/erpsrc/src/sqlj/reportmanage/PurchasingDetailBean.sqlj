package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.acl.NoPrivilegeException;

public class PurchasingDetailBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(PurchasingDetailBean.class);
	
	#sql private iterator HeaderIter(
			String form_id,
			String delivery_type,
			String delivery_text,
			String provider,
			String provider_id,
			String requester,
			String receiver_id,
			String receiver,
			String storage,
			String item_id,
			String item_name,
			String item_dimension,
			String item_specification,
			String item_category,
			Double item_count,
			Double item_unit_price,
			Double receive_price,
			Double receive_amt,
			Double different_amt,
			String category_name,
			Double pay_amt,
			Date form_time,
			Date audit_time);
	
	#sql private iterator SumIter(
			Double item_count,
			Double pay_amt,
			Double receive_amt);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("form_id", "String");
		map.put("delivery_text", "String");
		map.put("delivery_type", "String");
		map.put("provider", "String");
		map.put("provider_id", "String");
		map.put("requester", "String");
		map.put("receiver_id", "String");
		map.put("receiver", "String");
		map.put("storage", "String");
		map.put("item_id", "String");
		map.put("item_name", "String");
		map.put("item_dimension", "String");
		map.put("item_specification", "String");
		map.put("item_category", "String");
		map.put("category_name", "String"); 
		map.put("item_count", "Number"); 
		map.put("item_unit_price", "Number"); 
		map.put("pay_amt", "Number"); 
		map.put("receive_price", "Number");
		map.put("receive_amt", "Number");
		map.put("different_amt", "Number");
		map.put("form_time", "Date"); 
		map.put("audit_time", "Date"); 
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("form_id", "d");
		map.put("item_id", "d");
		map.put("item_name", "d");
		map.put("item_dimension", "d");
		map.put("item_specification", "d");
		map.put("item_category", "d");
		map.put("category_name", "c");
		map.put("receiver_id", "h"); 
		map.put("receiver", "h"); 
		map.put("item_count", "d"); 
		map.put("item_unit_price", "d"); 
		map.put("pay_amt", "d"); 
		map.put("receive_price",  "d");
		map.put("receive_amt",  "d");
		map.put("different_amt",  "d");
		map.put("form_time", "h"); 
		map.put("audit_time", "h"); 
		map.put("provider", "h"); 
		map.put("provider_id", "h"); 
		map.put("requester", "h"); 
		map.put("storage", "h"); 
		map.put("delivery_type", "h"); 
		
		return map;
	}
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_PURCHASING_HEADER")} h
		INNER JOIN
		    :{Com_("D_T1_PURCHASING_DETAIL")} d
		ON
		    h.FORM_ID = d.FORM_ID
		INNER JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    h.FORM_ID = s.FORM_ID
		AND s.IS_CURRENT = 1
		INNER JOIN
		    :{Com_("D_T2_BRANCH")} b
		ON
		    h.REQUESTER_ID = b.BRANCH_ID
		LEFT JOIN
		    :{Com_("D_T2_ITEM_CATEGORY")} c
		ON
		    d.ITEM_CATEGORY = c.CATEGORY_ID
		WHERE
		    1 = 1
		AND s.STATUS in ('已审核','已结案') :{queryStr :: ''}};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr, String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (SELECT
			                	    d.FORM_ID,
			                	    d.ITEM_ID,
			                	    d.ITEM_NAME,
			                	    d.ITEM_DIMENSION,
			                	    d.ITEM_SPECIFICATION,
			                	    d.ITEM_CATEGORY,
			                	    ROUND(d.ITEM_COUNT,2) ITEM_COUNT,
			                	    d.ITEM_UNIT_PRICE,
			                	    ROUND(d.PAY_AMT,2) PAY_AMT,
			                	    d.RECEIVE_PRICE,
			                	    ROUND(NVL(d.RECEIVE_AMT,0),2)           RECEIVE_AMT,
			                	    ROUND(d.PAY_AMT-NVL(d.RECEIVE_AMT,0),2) DIFFERENT_AMT,
			                	    c.CATEGORY_NAME,
			                	    h.FORM_TIME,
			                	    h.AUDIT_TIME,
			                	    h.provider_id,
			                	    h.provider ,
			                	    h.requester,
			                	    h.receiver_id,
			                	    h.receiver,
			                	    h.delivery_type,
			                	    CASE
			                	        WHEN h.delivery_type = 'DIRECT'
			                	        THEN '直配'
			                	        WHEN h.delivery_type = 'UNIFIED'
			                	        THEN '统配'
			                	        WHEN h.delivery_type = 'CROSS'
			                	        THEN '越库'
			                	    END delivery_text,
			                	    h.storage
			                	FROM
			                	    :{Com_("D_T1_PURCHASING_HEADER")} h
			                	INNER JOIN
			                	    :{Com_("D_T1_PURCHASING_DETAIL")} d
			                	ON
			                	    h.FORM_ID = d.FORM_ID
			                	INNER JOIN
			                	    :{Com_("D_T2_BRANCH")} b
			                	ON
			                	    h.REQUESTER_ID = b.BRANCH_ID
			                	LEFT JOIN
			                	    :{Com_("D_T2_ITEM_CATEGORY")} c
			                	ON
			                	    d.ITEM_CATEGORY = c.CATEGORY_ID
			                	WHERE
			                	    1 = 1
			                	AND h.AUDIT_TIME IS NOT NULL :{queryStr :: ''} :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
			SELECT
			 	ROUND(SUM(d.ITEM_COUNT),2) ITEM_COUNT,
			    ROUND(SUM(d.PAY_AMT),2)    PAY_AMT,
			    ROUND(SUM(d.RECEIVE_AMT),2) RECEIVE_AMT
        	FROM
        	    :{Com_("D_T1_PURCHASING_HEADER")} h
        	INNER JOIN
        	    :{Com_("D_T1_PURCHASING_DETAIL")} d
        	ON
        	    h.FORM_ID = d.FORM_ID
        	INNER JOIN
        	    :{Com_("D_T0_FORM_STATUS")} s
        	ON
        	    h.FORM_ID = s.FORM_ID
        	AND s.IS_CURRENT = 1
        	INNER JOIN
        	    :{Com_("D_T2_BRANCH")} b
        	ON
        	    h.REQUESTER_ID = b.BRANCH_ID
        	LEFT JOIN
        	    :{Com_("D_T2_ITEM_CATEGORY")} c
        	ON
        	    d.ITEM_CATEGORY = c.CATEGORY_ID
        	WHERE
        	    1 = 1
    		AND s.STATUS in ('已审核','已结案') :{queryStr :: ''}};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("item_count", sumIter.item_count());
			sumMap.put("pay_amt", sumIter.pay_amt());
			sumMap.put("receive_amt", sumIter.receive_amt());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("form_id", headerIter.form_id());
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_specification", headerIter.item_specification());
			header.put("item_category", headerIter.item_category());
			header.put("receiver", headerIter.receiver());
			header.put("item_count", headerIter.item_count());
			header.put("item_unit_price", headerIter.item_unit_price());
			header.put("pay_amt", headerIter.pay_amt());
			header.put("receive_price", headerIter.receive_price());
			header.put("receive_amt", headerIter.receive_amt());
			header.put("different_amt", headerIter.different_amt());
			header.put("form_time", headerIter.form_time());
			header.put("audit_time", headerIter.audit_time());
			header.put("category_name", headerIter.category_name());
			header.put("provider", headerIter.provider());
			header.put("provider_id", headerIter.provider_id());
			header.put("requester", headerIter.requester());
			header.put("receiver", headerIter.receiver());
			header.put("receiver_id", headerIter.receiver_id());
			header.put("storage", headerIter.storage());
			header.put("delivery_type", headerIter.delivery_type());
			header.put("delivery_text", headerIter.delivery_text());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}