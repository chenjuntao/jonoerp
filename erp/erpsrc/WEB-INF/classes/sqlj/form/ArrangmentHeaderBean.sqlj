/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Tue Nov 04 17:07:13 CST 2014 by pw
 * Last edited on Tue Nov 04 17:07:13 CST 2014 by pw
 * 
 * comment: 中央工厂生产计划/排程单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.ArrangmentHeader;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.util.constant.BranchCode;

public class ArrangmentHeaderBean extends ConnectionPool {
	
	private static final int UN_AUDIT = 1;
	private static final int AUDIT_ED = 2;
	private static final int UN_OUT = 3;

	public static Logger log = Logger.getLogger(ArrangmentHeaderBean.class);
	
	#sql private iterator HeaderIter(String form_id, String form_ref_id, String form_maker_id, 
			String form_maker, Date form_time, String auditor_id, String auditor, 
			Date audit_time, String form_note, String purchase_status, String status);
	
	#sql private iterator DetailIter(
			String form_id,	String item_id, String item_name, String item_dimension,String item_specification, 
			 Double item_count, String provider_id, String provider);
	
	#sql private iterator SummaryIter(
			String itemId,String itemName,String itemDimension,String itemDimension2,Double deliveryFactor,String itemSpecification,String workshop, 
			String itemCategoryName,Double itemCount, Double itemUnitPrice, Double productionCycle, Date businessDate,
			Date completeTime,Double minOrderCount,Double suggestAmt);
	
	
	public List<Map> querySummary(String ids)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = " h.FORM_ID IN ('" + ids.replaceAll(",", "','") + "') ";
		String orderClause = " sb.SUPPLIER_ID, t.ITEM_ID ";
		String lcCode = BranchCode.DEFAULT_LOGISTICSCENTER;
		
		DefaultContext myCtx = getDefaultContext();
		DetailIter detailIter = null;
		#sql [myCtx] detailIter = {
				SELECT
			    sb.SUPPLIER_ID AS PROVIDER_ID,
			    b.BRANCH_NAME  AS PROVIDER,
			    h.FORM_ID,
			    t.ITEM_ID ,
			    t.ITEM_NAME ,
			    m.ITEM_DIMENSION ,
			    SUM( NVL(d.PRODUCE_COUNT * t.ITEM_GROSS_COUNT,0)) ITEM_COUNT ,
			    m.ITEM_SPECIFICATION
			FROM
			    :{Com_("D_T1_ARRENGMENT_HEADER")} h
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s
			ON
			    h.FORM_ID = s.FORM_ID
			LEFT JOIN
			    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
			ON
			    d.FORM_ID = h.FORM_ID
			LEFT JOIN
			    :{Com_("D_T2_THERAPY")} t
			ON
			    d.ITEM_ID = t.THERAPY_ID
			LEFT JOIN
			    :{Com_("D_T2_ITEM_META")} m
			ON
			    t.ITEM_ID = m.ITEM_ID
			LEFT JOIN
			    :{Com_("D_T2_SUPPLIER_BRANCH_ITEM")} sb
			ON
			    sb.ITEM_ID = t.ITEM_ID
			LEFT JOIN
			    :{Com_("D_T2_BRANCH")} b
			ON
			    b.BRANCH_ID = sb.SUPPLIER_ID
		    WHERE
	    		:{query :: 1=1}
				AND sb.PRIORITY = 0
				AND sb.BRANCH_ID = :lcCode
				AND s.STATUS = '已审核'
			GROUP BY
			    sb.SUPPLIER_ID ,
			    b.BRANCH_NAME,
			    h.FORM_ID,
			    t.ITEM_ID ,
			    t.ITEM_NAME ,
			    m.ITEM_DIMENSION ,
			    m.ITEM_SPECIFICATION
			ORDER BY
				:{orderClause :: 1}
		};
		List<Map> detailLst = processDetailIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	public List<Map> queryEstimateSummary(String cfCode, String ids)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = " d.FORM_ID IN ('" + ids.replaceAll(",", "','") + "') ";
		
		DefaultContext myCtx = getDefaultContext();
		SummaryIter summaryIter = null;
		#sql [myCtx] summaryIter = {
			WITH
			    purchase AS
			    (
			        SELECT
			            d.ITEM_ID ,
			            SUM(d.ITEM_COUNT) itemCount
			        FROM
			            :{Com_("D_T1_PURCHASING_HEADER")} h
			        LEFT JOIN
			            :{Com_("D_T1_PURCHASING_DETAIL")} d
			        ON
			            h.FORM_ID = d.FORM_ID
			        LEFT JOIN
			            :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            h.FORM_ID = s.FORM_ID
			        WHERE
			            h.PROVIDER_ID = :cfCode
			        AND s.STATUS = '已审核'
			        AND s.IS_CURRENT = 1
			        AND :{query :: 1=1}
			        GROUP BY
			            d.ITEM_ID
			        ORDER BY
			            d.ITEM_ID
			    )
			SELECT
			    p.item_id            itemId,
			    m.ITEM_NAME          itemName,
			    c.CATEGORY_NAME      itemCategoryName,
			    NVL(ip.ITEM_PRICE,0) itemUnitPrice ,
			    NVL(fw.WORKSHOP,fws.WORKSHOP)          workshop,
			    p.itemCount ,
			    m.ITEM_SPECIFICATION                                 itemSpecification,
			    m.ITEM_DIMENSION                                         itemDimension,
			    u.DELIVERY_UNIT                                         itemDimension2,
			    u.DELIVERY_FACTOR                                        deliveryFactor,
			    bd.BUSINESS_DATE                                          businessDate,
			    NVL(pc.PRODUCTION_CYCLE,0)                                productionCycle,
			    bd.BUSINESS_DATE + NVL(pc.PRODUCTION_CYCLE,0)             completeTime,
			    ceil(u.MIN_ORDER_COUNT / u.DELIVERY_FACTOR)             minOrderCount,
			    ceil(p.itemCount / u.DELIVERY_FACTOR) suggestAmt
			FROM
			    purchase p
			LEFT JOIN
			    :{Com_("D_T2_BRANCH")} bd
			ON
			    bd.BRANCH_ID = :cfCode
			LEFT JOIN
			    :{Com_("D_T2_PRODUCTION_CYCLE")} pc
			ON
			    pc.ITEM_ID = p.item_id
			LEFT JOIN
			    :{Com_("D_T2_DELIVERY_UNIT")} u
			ON
			    p.item_id = u.ITEM_ID
			LEFT JOIN
			    :{Com_("D_T2_ITEM_META")} m
			ON
			    p.item_id = m.ITEM_ID
			LEFT JOIN
			    :{Com_("D_T2_ITEM_CATEGORY")} c
			ON
			    m.CATEGORY_ID = c.CATEGORY_ID
	    	LEFT JOIN
	    	    :{Com_("D_T2_ITEM_WORKSHOP")} wp
	    	ON
	    	    p.ITEM_ID=wp.ITEM_ID
	    	LEFT JOIN
	    	    :{Com_("D_T2_FACTORY_WORKSHOP")} fw
	    	ON
	    	    fw.WORK_ORDER_ID=wp.WORK_ORDER_ID
    		LEFT JOIN
	    	    :{Com_("D_T2_FACTORY_WORKSHOP")} fws
	    	ON
	    	    fws.FACTORY_ID ='F00'
	    	AND fws.PRIORITY ='0'
			LEFT JOIN
			    :{Com_("D_T2_ITEM_PRICE")} ip
			ON
			    p.item_id = ip.ITEM_ID
			AND ip.IS_CURRENT = 1
			AND ip.PRICE_TYPE = 'BENCHMARK'
			ORDER BY
				productionCycle };
		List<Map> detailLst = processSummaryIter(summaryIter);
		summaryIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	private List<Map> processSummaryIter(SummaryIter summaryIter) 
			throws SQLException {
		List<Map> detailLst = new ArrayList<Map>();
		while(summaryIter.next()) {
			Map<String, Object> detail = new HashMap<String, Object>();
			detail.put("itemId", summaryIter.itemId());
			detail.put("itemName", summaryIter.itemName());
			detail.put("itemDimension", summaryIter.itemDimension());
			detail.put("itemDimension2", summaryIter.itemDimension2());
			detail.put("deliveryFactor", summaryIter.deliveryFactor());
			detail.put("workshop", summaryIter.workshop());
			detail.put("itemSpecification", summaryIter.itemSpecification());
			detail.put("itemCategoryName", summaryIter.itemCategoryName());
			detail.put("itemCount", summaryIter.itemCount());
			detail.put("itemUnitPrice", summaryIter.itemUnitPrice());
			detail.put("productionCycle", summaryIter.productionCycle());
			detail.put("businessDate", SqlDateUtil.getUtilDate(summaryIter.businessDate()));
			detail.put("completeTime", SqlDateUtil.getUtilDate(summaryIter.completeTime()));
			detail.put("minOrderCount", summaryIter.minOrderCount());
			detail.put("suggestAmt", summaryIter.suggestAmt());
			detailLst.add(detail);
		}
		return detailLst;
	}
	
	private List<Map> processDetailIter(DetailIter detailIter) 
			throws SQLException {
		List<Map> detailLst = new ArrayList<Map>();
		while(detailIter.next()) {
			Map<String, Object> detail = new HashMap<String, Object>();
			detail.put("formId", detailIter.form_id());
			detail.put("itemId", detailIter.item_id());
			detail.put("itemName", detailIter.item_name());
			detail.put("itemDimension", detailIter.item_dimension());
			detail.put("itemSpecification", detailIter.item_specification());
			detail.put("item_count", detailIter.item_count());
			detail.put("providerId", detailIter.provider_id());
			detail.put("provider", detailIter.provider());
			detailLst.add(detail);
		}
		return detailLst;
	}
	
	public int saveEntity(ArrangmentHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formId = header.getFormId();
		String formRefId = header.getFormRefId();
		String formBranchId = header.getFormBranchId();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		Date formTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		String auditorId = header.getAuditorId();
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_ARRENGMENT_HEADER")} 
				(FORM_ID, FORM_REF_ID, FORM_BRANCH_ID, FORM_MAKER_ID, FORM_MAKER, FORM_TIME, FORM_TIME_ACTUAL, AUDITOR_ID, AUDITOR, AUDIT_TIME, FORM_NOTE) 
			VALUES (:formId, :formRefId, :formBranchId, :formMakerId, :formMaker, :formTime, :formTimeActual, :auditorId, :auditor, :auditTime, :formNote)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(ArrangmentHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String formRefId = header.getFormRefId();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		String auditorId = header.getAuditorId();
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();

		#sql [myCtx] {
			UPDATE
				:{Com_("D_T1_ARRENGMENT_HEADER")}
			SET
				FORM_ID = :formId,
				FORM_REF_ID = :formRefId,
				FORM_MAKER_ID = :formMakerId,
				FORM_MAKER = :formMaker,
				FORM_TIME = :formTime,
				AUDITOR_ID = :auditorId,
				AUDITOR = :auditor,
				AUDIT_TIME = :auditTime,
				FORM_NOTE = :formNote
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
				:{Com_("D_T1_ARRENGMENT_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int audit(String formId, String userId,String userName, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
				:{Com_("D_T1_ARRENGMENT_HEADER")}
			SET
				auditor_id = :userId,
				auditor = :userName,
				audit_time = :sAuditTime
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	/**
	 * 设置是否下发采购单
	 */
	public int savePurchaseStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
				:{Com_("D_T1_ARRENGMENT_HEADER")}
			SET
				PURCHASE_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
				:{Com_("D_T1_ARRENGMENT_HEADER")} h
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.BUYER_NAME = " + branchId;
		}
		return query;
	}
	
	public List<ArrangmentHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
				:{Com_("D_T1_ARRENGMENT_HEADER")} h
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		List<ArrangmentHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public int countAudit(java.util.Date startDate, java.util.Date endDate, String branchId,int queryTag) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,queryTag);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT DISTINCT
		    COUNT(DISTINCT h.FORM_ID)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_ARRENGMENT_HEADER")} h
		LEFT JOIN
		    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
		ON
		    h.FORM_ID = d.FORM_ID
		LEFT JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    s.FORM_ID = h.FORM_ID
		LEFT JOIN
		    :{Com_("D_T0_FORM_STATUS")} s2
		ON
		    d.WORK_ORDER_ID = s2.FORM_ID
		WHERE
		    :{query ::}
		AND (
		        h.AUDIT_TIME >= :sDate
		    OR  :sDate IS NULL)
		AND (
		        h.AUDIT_TIME <= :eDate
		    OR  :eDate IS NULL)
		AND s.IS_CURRENT = 1
		AND s2.STATUS IS NULL
		ORDER BY
		    h.FORM_ID};
		closeDefaultContext(myCtx);
		return total;
	}
	
	public int countManual(java.util.Date startDate, java.util.Date endDate, String branchId,int queryTag) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,queryTag);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext() ;
		int total = 0;
		#sql [myCtx] {
		SELECT DISTINCT
		    COUNT(DISTINCT h.FORM_ID)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_ARRENGMENT_HEADER")} h
		LEFT JOIN
		    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
		ON
		    h.FORM_ID = d.FORM_ID
		LEFT JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    s.FORM_ID = h.FORM_ID
		LEFT JOIN
		    :{Com_("D_T0_FORM_STATUS")} s2
		ON
		    d.WORK_ORDER_ID = s2.FORM_ID
		WHERE
		    :{query ::}
		AND (
		        h.AUDIT_TIME >= :sDate
		    OR  :sDate IS NULL)
		AND (
		        h.AUDIT_TIME <= :eDate
		    OR  :eDate IS NULL)
	    AND h.FORM_REF_ID IS NULL
		AND s.IS_CURRENT = 1
		AND s2.STATUS IS NOT NULL
		ORDER BY
		    h.FORM_ID};
		closeDefaultContext(myCtx);
		return total;
	}
	
	public int countUnAudit(java.util.Date startDate, java.util.Date endDate, String branchId,int queryTag) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery1(branchId,queryTag);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_ARRENGMENT_HEADER")} h
		LEFT JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    s.FORM_ID = h.FORM_ID
		AND s.IS_CURRENT = 1
		WHERE
		    :{query ::}
		AND (
		        h.FORM_TIME >= :sDate
		    OR  :sDate IS NULL)
		AND (
		        h.FORM_TIME <= :eDate
		    OR  :eDate IS NULL)};
		closeDefaultContext(myCtx);
		return total;
	}

	private String formQuery(String branchId, int queryTag) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.BUYER_NAME = '" + branchId + "'";
		}
		
		switch (queryTag) {
		case UN_AUDIT:
			query = query + " AND NVL( s.STATUS, 'null') = '未审核'";
			break;
		case AUDIT_ED:
			query = query + " AND (NVL( s.STATUS, 'null') = '已审核' OR NVL( s.STATUS, 'null') = '已出库')";
			break;
		case UN_OUT:
			query = query + " AND NVL( s.STATUS, 'null') = '已审核'";
			break;
		}
		
		return query;
	}

	private String formQuery1(String branchId, int queryTag) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.FORM_BRANCH_ID = '" + branchId + "'";
		}
		
		switch (queryTag) {
		case UN_AUDIT:
			query = query + " AND NVL( s.STATUS, 'null') = '未审核'";
			break;
		case AUDIT_ED:
			query = query + " AND (NVL( s.STATUS, 'null') = '已审核' OR NVL( s.STATUS, 'null') = '已出库')";
			break;
		case UN_OUT:
			query = query + " AND NVL( s.STATUS, 'null') = '已审核'";
			break;
		}
		
		return query;
	}
	
	public List<ArrangmentHeader> queryAudit(java.util.Date startDate, java.util.Date endDate, String branchId, int queryTag) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,queryTag);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT DISTINCT
			    h.FORM_ID,
			    h.FORM_REF_ID,
			    h.FORM_MAKER_ID,
			    h.FORM_MAKER,
			    h.FORM_TIME,
			    h.AUDITOR_ID,
			    h.AUDITOR,
			    h.AUDIT_TIME,
			    h.FORM_NOTE,
			    h.PURCHASE_STATUS,
		    	s.STATUS
			FROM
			    :{Com_("D_T1_ARRENGMENT_HEADER")} h
			LEFT JOIN
			    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
			ON
			    h.FORM_ID = d.FORM_ID
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s2
			ON
			    d.WORK_ORDER_ID = s2.FORM_ID
			WHERE
			    :{query :: 1=1}
			AND (
			        h.AUDIT_TIME >= :sDate
			    OR  :sDate IS NULL)
			AND (
			        h.AUDIT_TIME <= :eDate
			    OR  :eDate IS NULL)
			AND s.IS_CURRENT = 1
			AND s2.STATUS IS NULL
			ORDER BY
			    h.FORM_ID};
		List<ArrangmentHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public List<ArrangmentHeader> queryManual(java.util.Date startDate, java.util.Date endDate, String branchId, int queryTag) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,queryTag);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT DISTINCT
			    h.FORM_ID,
			    h.FORM_REF_ID,
			    h.FORM_MAKER_ID,
			    h.FORM_MAKER,
			    h.FORM_TIME,
			    h.AUDITOR_ID,
			    h.AUDITOR,
			    h.AUDIT_TIME,
			    h.FORM_NOTE,
			    h.PURCHASE_STATUS,
		    	s.STATUS
			FROM
			    :{Com_("D_T1_ARRENGMENT_HEADER")} h
			LEFT JOIN
			    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
			ON
			    h.FORM_ID = d.FORM_ID
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s2
			ON
			    d.WORK_ORDER_ID = s2.FORM_ID
			WHERE
			    :{query :: 1=1}
			AND (
			        h.AUDIT_TIME >= :sDate
			    OR  :sDate IS NULL)
			AND (
			        h.AUDIT_TIME <= :eDate
			    OR  :eDate IS NULL)
		    AND h.FORM_REF_ID IS NULL
			AND s.IS_CURRENT = 1
			AND s2.STATUS IS NOT NULL
			ORDER BY
			    h.FORM_ID};
		List<ArrangmentHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public List<ArrangmentHeader> queryUnAudit(java.util.Date startDate, java.util.Date endDate, String branchId,int queryTag) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,queryTag);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
				    h.FORM_ID,
				    h.FORM_REF_ID,
				    h.FORM_MAKER_ID,
				    h.FORM_MAKER,
				    h.FORM_TIME,
				    h.AUDITOR_ID,
				    h.AUDITOR,
				    h.AUDIT_TIME,
				    h.FORM_NOTE,
				    h.PURCHASE_STATUS,
				    h.FORM_TIME_ACTUAL,
				    h.FORM_BRANCH_ID,
			    	s.STATUS
			    FROM
			        :{Com_("D_T1_ARRENGMENT_HEADER")} h
			    LEFT JOIN
			        :{Com_("D_T0_FORM_STATUS")} s
			    ON
			        s.FORM_ID = h.FORM_ID
			    WHERE
			        :{query ::}
				AND s.IS_CURRENT = 1
			    AND (
			            h.FORM_TIME >= :sDate
			        OR  :sDate IS NULL)
			    AND (
			            h.FORM_TIME <= :eDate
			        OR  :eDate IS NULL)};
		List<ArrangmentHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	/**
	 * 查询可以用于生成原料采购单的生产计划单
	 */
	public List<ArrangmentHeader> queryCFAudit(java.util.Date startDate, java.util.Date endDate) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String formStatus = BillStatus.AUDITED_CN;
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
			    :{Com_("D_T1_ARRENGMENT_HEADER")} h
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
		    	NVL( s.STATUS, 'null') = :formStatus
		    AND NVL(h.PURCHASE_STATUS,'null') != '已下发采购'
			AND	(h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
		};
		List<ArrangmentHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}

	public ArrangmentHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,
			    s.status
			FROM
				:{Com_("D_T1_ARRENGMENT_HEADER")} h
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				h.form_id = :formId
		};
		List<ArrangmentHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<ArrangmentHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<ArrangmentHeader> headerLst = new ArrayList<ArrangmentHeader>();
		while(headerIter.next()) {
			ArrangmentHeader header = new ArrangmentHeader();
			header.setFormId(headerIter.form_id());
			header.setFormRefId(headerIter.form_ref_id());
			header.setFormMakerId(headerIter.form_maker_id());
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setAuditorId(headerIter.auditor_id());
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setFormNote(headerIter.form_note());
			header.setPurchaseStatus(headerIter.purchase_status());
			header.setStatus(headerIter.status());
			headerLst.add(header);
		}
		return headerLst;
	}
}