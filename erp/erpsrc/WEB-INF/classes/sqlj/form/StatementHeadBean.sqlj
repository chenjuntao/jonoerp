/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Fri Mar 13 15:18:15 CST 2015 by pw
 * Last edited on Fri Mar 13 15:18:15 CST 2015 by pw
 * 
 * comment: 对账单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.StatementHead;
import com.tanry.business.form.FormConstant;
import sqlj.runtime.ref.DefaultContext;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class StatementHeadBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(StatementHeadBean.class);
	
	#sql private iterator HeaderIter(String status,String form_id, String form_type, String provider_id, String provider, String branch_id, String branch_name, String form_maker_id, String form_maker, Date form_time,Date form_time_actual, String auditor_id, String auditor, Date audit_time, Double all_pay_amt, Date start_date, Date end_date, String form_note);
	
	public int saveEntity(StatementHead header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formId = header.getFormId();
		String formType = header.getFormType();
		String providerId = header.getProviderId();
		String provider = header.getProvider();
		String branchId = header.getBranchId();
		String branchName = header.getBranchName();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		Date formTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		String auditorId = header.getAuditorId();
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		Double allPayAmt = header.getAllPayAmt();
		Date startDate = SqlDateUtil.getSqlDate(header.getStartDate());
		Date endDate = SqlDateUtil.getSqlDate(header.getEndDate());
		String formNote = header.getFormNote();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_STATEMENT_HEADER")} 
				(FORM_ID, FORM_TYPE, PROVIDER_ID, PROVIDER, BRANCH_ID, BRANCH_NAME, FORM_MAKER_ID, FORM_MAKER, FORM_TIME, FORM_TIME_ACTUAL, AUDITOR_ID, AUDITOR, AUDIT_TIME, ALL_PAY_AMT, START_DATE, END_DATE, FORM_NOTE) 
			VALUES (:formId, :formType, :providerId, :provider, :branchId, :branchName, :formMakerId, :formMaker, :formTime, :formTimeActual, :auditorId, :auditor, :auditTime, :allPayAmt, :startDate, :endDate, :formNote)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(StatementHead header)
			throws NoPrivilegeException, SQLException, NoConnection {
			DefaultContext myCtx = getDefaultContext();

			String formId = header.getFormId();
			Double allPayAmt = header.getAllPayAmt();

			#sql [myCtx] {
				UPDATE
				:{Com_("D_T1_STATEMENT_HEADER")}
				SET
					ALL_PAY_AMT = :allPayAmt
				WHERE 
					FORM_ID = :formId
			};
			closeDefaultContext(myCtx);
			
			return 1;
		}
	
	public int newSerial(java.util.Date businessDate,String formType)
			throws NoPrivilegeException, SQLException, NoConnection {
			DefaultContext myCtx = getDefaultContext();

			String maxId = null;
			Date bDate = SqlDateUtil.getSqlDate(businessDate);
			#sql [myCtx] {
				SELECT
				    MAX(h.FORM_ID) into :maxId
				FROM
				:{Com_("D_T1_STATEMENT_HEADER")} h
				WHERE
				    h.FORM_TIME = :bDate
				AND h.FORM_TYPE = :formType
			};
			closeDefaultContext(myCtx);

			int result = 1;
			if (maxId != null) {
				maxId = maxId.substring(maxId.length() - FormConstant.DEFAULT_SERIAL_LENGTH);
				result = Integer.parseInt(maxId) + 1;
			}
			return result;
		}
	

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_STATEMENT_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	

	public int count(java.util.Date startDate, java.util.Date endDate,String supplierId,String branchId, String formIdText, String status,String formType)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(supplierId, branchId,formIdText,status, formType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_STATEMENT_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
			AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String supplierId,String branchId,String formIdText,String status,String formType) {
		String query = " 1=1";
		
		if (!TextUtil.isEmpty(supplierId)) {
			query = query + " AND h.PROVIDER_ID = '" + supplierId + "'";
		}
		
		if (!TextUtil.isEmpty(formIdText)) {
			query = query + " AND upper(h.FORM_ID) like '%" + formIdText + "%'";
		}
		
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.BRANCH_ID = '" + branchId + "'";
		}
		
		if (!TextUtil.isEmpty(formType)) {
			query = query + " AND h.FORM_TYPE = '" + formType + "'";
		}
		
		if (!TextUtil.isEmpty(status)) {
			query = query + " AND s.STATUS =  '" + status + "'";
		}
		
		return query;
	}
	
	public List<StatementHead> query(java.util.Date startDate, java.util.Date endDate,String supplierId,String branchId, String formIdText, String status, String formType,int startRow, int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(supplierId, branchId,formIdText,status, formType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,s.status
			FROM
			:{Com_("D_T1_STATEMENT_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
			AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
		};
		List<StatementHead> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public StatementHead queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,s.status
			FROM
			:{Com_("D_T1_STATEMENT_HEADER")} h 
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			WHERE
				h.form_id = :formId 
			AND s.IS_CURRENT = 1
		};
		List<StatementHead> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<StatementHead> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<StatementHead> headerLst = new ArrayList<StatementHead>();
		while(headerIter.next()) {
			StatementHead header = new StatementHead();
			header.setFormId(headerIter.form_id());
			header.setFormType(headerIter.form_type());
			header.setProviderId(headerIter.provider_id());
			header.setProvider(headerIter.provider());
			header.setBranchId(headerIter.branch_id());
			header.setBranchName(headerIter.branch_name());
			header.setFormMakerId(headerIter.form_maker_id());
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setFormTimeActual(SqlDateUtil.getUtilDate(headerIter.form_time_actual()));
			header.setAuditorId(headerIter.auditor_id());
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setAllPayAmt(headerIter.all_pay_amt());
			header.setStartDate(SqlDateUtil.getUtilDate(headerIter.start_date()));
			header.setEndDate(SqlDateUtil.getUtilDate(headerIter.end_date()));
			header.setFormNote(headerIter.form_note());
			header.setStatus(headerIter.status());
			headerLst.add(header);
		}
		return headerLst;
	}
}