/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Sep 12, 2014 by liyzh
 * Last edited on Sep 12, 2014 by liyzh
 * 
 * 说明： 餐厅配送单、物流中心出货单、中央工厂出货单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.ShippingHeader;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.business.form.FormType;
import com.tanry.business.form.StatusConst;
import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.util.constant.BranchType;

public class ShippingHeaderBean  extends ConnectionPool {

	public static Logger log = Logger.getLogger(ShippingHeaderBean.class);
	
	#sql private iterator HeaderIter(
			String form_id, 
			String form_ref_id, 
			String form_type,
			String provider_id,
			String provider,
			Date receive_time,
			String requester_id,
			String requester,
			String request_address,
			String form_maker_id,
			String form_maker,
			Date form_time,
			Date form_time_actual,
			String auditor_id,
			String auditor,
			Date audit_time,
			Date audit_time_actual,
			String inputer_id,
			String inputer,
			Date input_time,
			Date input_time_actual,
			String form_note,
			Double all_pay_amt,
			String max_pay_item,
			String out_storage_id,
			String out_storage,
			String in_storage_id,
			String in_storage, String form_status, String pick_status, 
			String input_status, String return_status, String anti_status,
			String on_status,
			String isAddForm,
			String printTimes
		);

	/**
	 * 保存
	 */
	public int saveEntity(ShippingHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		String formId = header.getFormId();
		String formRefId = header.getFormRefId();
		String formType = header.getFormType();
		String providerId = header.getProviderId();
		String provider = header.getProvider();
		String outStorageId = header.getOutStorageId();
		String outStorage = header.getOutStorage();
		Date receiveTime = SqlDateUtil.getSqlDate(header.getReceiveTime());
		String requesterId = header.getRequesterId();
		String requester = header.getRequester();
		String requestAddress = header.getRequestAddress();
		String inStorageId = header.getInStorageId();
		String inStorage = header.getInStorage();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		Date formTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String inputer = header.getInputer();
		Date inputTime = SqlDateUtil.getSqlDate(header.getInputTime());
		String formNote = header.getFormNote();
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_SHIPPING_HEADER")} 
				(FORM_ID, FORM_REF_ID, FORM_TYPE, PROVIDER_ID, PROVIDER, OUT_STORAGE_ID, OUT_STORAGE, RECEIVE_TIME, 
						REQUESTER_ID, REQUESTER, REQUEST_ADDRESS, IN_STORAGE_ID, IN_STORAGE, 
					FORM_MAKER_ID, FORM_MAKER, FORM_TIME, FORM_TIME_ACTUAL, AUDITOR, AUDIT_TIME, INPUTER, INPUT_TIME, 
					FORM_NOTE, ALL_PAY_AMT, MAX_PAY_ITEM,ON_STATUS) 
			VALUES (:formId, :formRefId, :formType,
					:providerId,
					:provider, :outStorageId, :outStorage,
					:receiveTime, 
					:requesterId,
					:requester, 
					:requestAddress, :inStorageId, :inStorage,
					:formMakerId,
					:formMaker, 
					:formTime, :formTimeActual,
					:auditor, 
					:auditTime, 
					:inputer, 
					:inputTime, 
					:formNote, 
					:allPayAmt, 
					:maxPayItem,'')
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(ShippingHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String providerId = header.getProviderId();
		Date receiveTime = SqlDateUtil.getSqlDate(header.getReceiveTime());
		String requester = header.getRequester();
		String requestAddress = header.getRequestAddress();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String inputerId = header.getInputerId();
		String inputer = header.getInputer();
		Date inputTime = SqlDateUtil.getSqlDate(header.getInputTime());
		Date inputTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		String formNote = header.getFormNote();
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
			    RECEIVE_TIME =:receiveTime,
				FORM_NOTE = :formNote,
			    ALL_PAY_AMT = :allPayAmt,
			    MAX_PAY_ITEM = :maxPayItem,
			    INPUTER_ID = :inputerId,
			    INPUTER = :inputer,
			    INPUT_TIME = :inputTime,
			    INPUT_TIME_ACTUAL = :inputTimeActual
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int updateInStorage(ShippingHeader header)
			throws NoPrivilegeException, SQLException, NoConnection {
			DefaultContext myCtx = getDefaultContext();

			String formId = header.getFormId();
			String in_storage_id = header.getInStorageId();
			String in_storage = header.getInStorage();

			#sql [myCtx] {
				UPDATE
				:{Com_("D_T1_SHIPPING_HEADER")}
				SET
						IN_STORAGE_ID = :in_storage_id,
						IN_STORAGE = :in_storage
				WHERE 
					FORM_ID = :formId
			};
			closeDefaultContext(myCtx);
			
			return 1;
		}
	
	public int updateOutStorage(ShippingHeader header)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formId = header.getFormId();
		String out_storage_id = header.getOutStorageId();
		String out_storage = header.getOutStorage();
		
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				OUT_STORAGE_ID = :out_storage_id,
				OUT_STORAGE = :out_storage
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_SHIPPING_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public boolean exist(java.util.Date businessDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Date bDate = SqlDateUtil.getSqlDate(businessDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_SHIPPING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				h.FORM_TIME = :bDate
			AND h.REQUESTER_ID = :branchId
		};
		closeDefaultContext(myCtx);
		if (total > 0) {
			return true;
		}
		return false;
	}

	/**
	 * 设置捡货状态(未捡货/已捡货)
	 */
	public int savePickStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				PICK_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	/**
	 * 设置入库状态(未入库/已入库)
	 */
	public int saveInputStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				INPUT_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	/**
	 * 设置配送差异处理状态(未处理/已处理)
	 */
	public int saveDifferentStatus(String formId, String status)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				DIFFERENT_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	/**
	 * 设置退货状态(退货中/已退货)
	 */
	public int saveReturnStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				RETURN_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	/**
	 * 设置反审核状态(反审核中/已反审核)
	 */
	public int saveAntiStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				ANTI_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	/**
	 * 设置在途状态(空/在途)
	 */
	public int saveOnStatus(ShippingHeader header, String status)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		String formId = header.getFormId();
		String auditor = header.getAuditor();
		String auditorId=header.getAuditorId();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		Date auditTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				ON_STATUS = :status,
				AUDITOR_ID = :auditorId,
				AUDITOR = :auditor, 
				AUDIT_TIME = :auditTime,
				AUDIT_TIME_ACTUAL = :auditTimeActual
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int saveOnStatus(String formId, String status)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				ON_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	/**
	 * 餐厅配送单审核
	 */
	public int audit(String formId, String userId, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date auditTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_SHIPPING_HEADER")}
			SET
				auditor = :userId,
				audit_time = :sAuditTime,
				AUDIT_TIME_ACTUAL =:auditTimeActual
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, String formType,String branchType,String storageId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_SHIPPING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
			AND (h.INPUT_TIME >= :sDate or :sDate is null)
			AND (h.INPUT_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	public int countByCross(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, String formType,String branchType,String storageId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		:{Com_("D_T1_SHIPPING_HEADER")} h
		LEFT JOIN
		:{Com_("D_T0_FORM_STATUS")} s
		ON
		    s.FORM_ID = h.FORM_ID
		AND s.IS_CURRENT = 1
		WHERE
		    :{query :: 1=1}
		AND (
		        h.RECEIVE_TIME >= :sDate
		    OR  :sDate IS NULL)
		AND (
		        h.RECEIVE_TIME <= :eDate
		    OR  :eDate IS NULL)};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId, String queryType, String formType, String branchType, String storageId) {
		String query = " 1=1";
		if (!"-1".equals(branchId)) {
//			if (BranchType.LOGISTICSCENTER.equals(branchType)) {
//				query = query + " AND h.PROVIDER_ID = '" + branchId + "'";
//			} else {
//				query = query + " AND h.REQUESTER_ID = '" + branchId + "'";
//			}
			
			query = query + " AND h.REQUESTER_ID = '" + branchId + "'";//总部登陆的物流中心账号（会影响物流中心反审核）
		}

		if ("uninput".equals(queryType)) { // 获取未入库记录出货单
			query = query + " AND NVL(h.INPUT_STATUS, 'null') != '" + BillStatus.STORED_CN + "'";
		}
		
		if ("unaudit".equals(queryType)) { // 获取未审核记录越库单
			query = query + " AND NVL( s.STATUS, 'null') = '" + BillStatus.UNADUIT_CN + "'";
		}
		
		if ("antiaudit".equals(queryType)) { // 获取适合反审核的记录
			//已经做了差异处理和配退的配送单不能再进行反审核
			query = query + " AND NVL(h.ANTI_STATUS, 'null') not in ('反审核中','已反审核') ";
			query = query + " AND NVL(h.DIFFERENT_STATUS, 'null') not in ('已处理差异') ";
			query = query + " AND NVL(h.RETURN_STATUS, 'null') not in ('退货中','已退货') ";
			query = query + " AND h.INPUT_STATUS = '" + BillStatus.STORED_CN + "'";
			
		} else if ("return".equals(queryType)) { // 获取适合退货的记录
			//配退的前提是这种配送单没有差异，如果有差异则这张单先经过差异处理
			//暂时实现不了
			query = query + " AND NVL(h.ANTI_STATUS, 'null') != '反审核中'";
			query = query + " AND NVL(h.RETURN_STATUS, 'null') != '退货中'";
			query = query + " AND h.INPUT_STATUS = '" + BillStatus.STORED_CN + "'";
		}
		
		if ("request".equals(formType)) {// 餐厅同时查询越库配送单和统配配送单
			query = query + " AND h.FORM_TYPE in ('" + FormType.DISTRI_CROSS + "', '" + FormType.DISTRI_UNIFIED + "')";
		} else {
			query = query + " AND h.FORM_TYPE = '" + formType + "'";
		}

		if (BranchType.RESTAURANT.equals(branchType)) {
			if (storageId != null && !storageId.equals("")) {
				query = query + " AND h.IN_STORAGE_ID = '" + storageId + "'";
			}
		} else if(BranchType.LOGISTICSCENTER.equals(branchType)) {
			if (storageId != null && !storageId.equals("")) {
				query = query + " AND h.OUT_STORAGE_ID = '" + storageId + "'";
			}
		}
		return query;
	}
	
	/*未分页*/
	public List<ShippingHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, String formType,String branchType,String storageId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
    			h.*, s.STATUS AS FORM_STATUS, '' isAddForm, '' printTimes
			FROM
			:{Com_("D_T1_SHIPPING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
			AND (h.INPUT_TIME >= :sDate or :sDate is null)
			AND (h.INPUT_TIME <= :eDate or :eDate is null)
			ORDER BY
				h.FORM_ID DESC
		};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	/*未分页*/
	public List<ShippingHeader> queryByCross(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, String formType,String branchType,String storageId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
    			h.*, s.STATUS AS FORM_STATUS, '' isAddForm, '' printTimes
			FROM
			:{Com_("D_T1_SHIPPING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
			AND (h.RECEIVE_TIME >= :sDate or :sDate is null)
			AND (h.RECEIVE_TIME <= :eDate or :eDate is null)
			ORDER BY
				h.FORM_ID DESC
		};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	/*分页*/
	public List<ShippingHeader> queryByCross(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, String formType,String branchType,String storageId, int startRow, int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
			String query = formQuery(branchId, queryType, formType, branchType, storageId);
			Date sDate = SqlDateUtil.getSqlDate(startDate);
			Date eDate = SqlDateUtil.getSqlDate(endDate);
			
			DefaultContext myCtx = getDefaultContext();
			HeaderIter headerIter = null;
			#sql [myCtx] headerIter = {
					SELECT
					    *
				    FROM
				        (
				            SELECT
				                t.*,
				                ROWNUM rowNumber
				            FROM
				                (
				                		SELECT
				            			h.*, s.STATUS AS FORM_STATUS , '' isAddForm,'' printTimes
				        			FROM
				        			:{Com_("D_T1_SHIPPING_HEADER")} h
				        			LEFT JOIN
				        			:{Com_("D_T0_FORM_STATUS")} s
				        			ON
				        			    s.FORM_ID = h.FORM_ID
				        			AND s.IS_CURRENT = 1
				        			WHERE
				        				:{query :: 1=1}
				        			AND (h.RECEIVE_TIME >= :sDate or :sDate is null)
				        			AND (h.RECEIVE_TIME <= :eDate or :eDate is null)
				        			ORDER BY
				        				h.FORM_ID DESC ) t
				            WHERE
				                ROWNUM < :endRow)
				    WHERE
				        rowNumber >= :startRow
				};
			List<ShippingHeader> headerLst = processIter(headerIter);
			headerIter.close();
			closeDefaultContext(myCtx);
			return headerLst;
		}
	/*分页（添加明细查询条件）*/
	public List<ShippingHeader> queryByCross(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, String formType,String branchType,String storageId,String itemName, int startRow, int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
				SELECT
				    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (WITH
			        			    filter AS
			        			    (
			        			        SELECT DISTINCT
			        			            sd.FORM_ID
			        			        FROM
			        			        :{Com_("D_T1_SHIPPING_DETAIL")} sd
			        			        WHERE
			        			            1=1
			        			        AND (
			        			                sd.ITEM_ID = :itemName
			        			            OR  sd.ITEM_NAME = :itemName)
			        			        ORDER BY
			        			            sd.FORM_ID
			        			    )
			                		SELECT
			            			h.*, s.STATUS AS FORM_STATUS, '' isAddForm,'' printTimes
			        			FROM
			        			:{Com_("D_T1_SHIPPING_HEADER")} h
		        			    INNER JOIN
		        			    filter
		        			    ON
		        			    filter.FORM_ID = h.FORM_ID
			        			LEFT JOIN
			        			:{Com_("D_T0_FORM_STATUS")} s
			        			ON
			        			    s.FORM_ID = h.FORM_ID
			        			AND s.IS_CURRENT = 1
			        			WHERE
			        				:{query :: 1=1}
			        			AND (h.RECEIVE_TIME >= :sDate or :sDate is null)
			        			AND (h.RECEIVE_TIME <= :eDate or :eDate is null)
			        			ORDER BY
			        				h.FORM_ID DESC ) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow
			};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	/*分页（添加明细查询条件）*/
	public List<ShippingHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, String formType,String branchType,String storageId,String itemName, int startRow, int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
				SELECT
				    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (WITH
			        			    filter AS
			        			    (
			        			        SELECT DISTINCT
			        			            sd.FORM_ID
			        			        FROM
			        			        :{Com_("D_T1_SHIPPING_DETAIL")} sd
			        			        WHERE
			        			            1=1
			        			        AND (
			        			                sd.ITEM_ID = :itemName
			        			            OR  sd.ITEM_NAME = :itemName)
			        			        ORDER BY
			        			            sd.FORM_ID
			        			    )
			                		SELECT
			            			h.*, s.STATUS AS FORM_STATUS,'' isAddForm, '' printTimes
			        			FROM
			        			:{Com_("D_T1_SHIPPING_HEADER")} h
		        			    INNER JOIN
		        			    filter
		        			    ON
		        			    filter.FORM_ID = h.FORM_ID
			        			LEFT JOIN
			        			:{Com_("D_T0_FORM_STATUS")} s
			        			ON
			        			    s.FORM_ID = h.FORM_ID
			        			AND s.IS_CURRENT = 1
			        			WHERE
			        				:{query :: 1=1}
			        			AND (h.INPUT_TIME >= :sDate or :sDate is null)
			        			AND (h.INPUT_TIME <= :eDate or :eDate is null)
			        			ORDER BY
			        				h.FORM_ID DESC ) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow
			};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}

/*分页*/
public List<ShippingHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, String formType,String branchType,String storageId, int startRow, int endRow) 
		throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
				SELECT
				    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                		SELECT
			            			h.*, s.STATUS AS FORM_STATUS, '' isAddForm,'' printTimes
			        			FROM
			        			:{Com_("D_T1_SHIPPING_HEADER")} h
			        			LEFT JOIN
			        			:{Com_("D_T0_FORM_STATUS")} s
			        			ON
			        			    s.FORM_ID = h.FORM_ID
			        			AND s.IS_CURRENT = 1
			        			WHERE
			        				:{query :: 1=1}
			        			AND (h.INPUT_TIME >= :sDate or :sDate is null)
			        			AND (h.INPUT_TIME <= :eDate or :eDate is null)
			        			ORDER BY
			        				h.FORM_ID DESC ) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow
			};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	/**
	 * 根据配送日期查询配送单，用于生成捡货单
	 */
	public List<ShippingHeader> queryByReceiveTime(java.util.Date receiveTime,String status)
			throws NoPrivilegeException,SQLException,NoConnection {
		final int  NORMAL = 1;
		final int  ADD = 2;
		
		Date rTime = SqlDateUtil.getSqlDate(receiveTime);
		String query = " 1=1";
		// 越库配送单不参与捡货
		query = query + " AND h.FORM_TYPE not in ('" + FormType.DISTRI_CROSS + "', '" + FormType.DISTRI_PRODUCT + "', '" +  FormType.REQUEST_OUTER + "') ";
		String unaudit = BillStatus.UNADUIT_CN;
		
		switch (Integer.valueOf(status)) {
		case NORMAL:
			query += " AND ((rh.TEMPLATE_ID is not null) or (h.FORM_REF_ID is null))　";
			break;
		case ADD:
			query += " AND rh.TEMPLATE_ID is  null  AND h.FORM_REF_ID is not null ";
			break;
		}
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,
			    '' printTimes,
			    DECODE(h.FORM_TYPE,'INNER_UNIFIED',DECODE(h.FORM_REF_ID,NULL,'正常要货',DECODE(rh.ISADDFORM,'Y','加单','正常要货')),'正常要货')  isAddForm ,
			    s.STATUS                            AS FORM_STATUS
			FROM
			:{Com_("D_T1_SHIPPING_HEADER")} h
		    LEFT JOIN
		    :{Com_("D_T1_REQUEST_HEADER")} rh
			ON
			    h.FORM_REF_ID = rh.FORM_ID
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
			    h.RECEIVE_TIME = :rTime
			AND NVL( s.STATUS, 'null') = :unaudit
			AND NVL(h.PICK_STATUS, 'null') != '已捡货'
			AND :{query :: 1=1}
			ORDER BY
			    h.FORM_ID DESC};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	/**
	 * 根据配送日期查询配送单，用于生成捡货单
	 */
	public List<ShippingHeader> queryByReceiveTime(java.util.Date receiveTime,String status,String itemName)
			throws NoPrivilegeException,SQLException,NoConnection {
		final int  NORMAL = 1;
		final int  ADD = 2;
		
		Date rTime = SqlDateUtil.getSqlDate(receiveTime);
		String query = " 1=1";
		// 越库配送单不参与捡货
		query = query + " AND h.FORM_TYPE not in ('" + FormType.DISTRI_CROSS + "', '" + FormType.DISTRI_PRODUCT + "', '" +  FormType.REQUEST_OUTER + "') ";
		String unaudit = BillStatus.UNADUIT_CN;
		
		switch (Integer.valueOf(status)) {
		case NORMAL:
			query += " AND ((rh.TEMPLATE_ID is not null) or (h.FORM_REF_ID is null))　";
			break;
		case ADD:
			query += " AND rh.TEMPLATE_ID is  null  AND h.FORM_REF_ID is not null ";
			break;
		}
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
				WITH
				 a AS (
				        SELECT DISTINCT
				            t.FORM_ID
				        FROM
				        :{Com_("D_T1_SHIPPING_DETAIL")} t
				        WHERE
				            1=1
				        AND (
				                t.ITEM_ID = :itemName
				            OR  t.ITEM_NAME = :itemName)
				        ORDER BY
				            t.FORM_ID
				    )
				
			SELECT
			    h.*,
			    '' printTimes,
			    DECODE(h.FORM_TYPE,'INNER_UNIFIED',DECODE(h.FORM_REF_ID,NULL,'正常要货',DECODE(rh.ISADDFORM,'Y','加单','正常要货')),'正常要货')  isAddForm ,
			    s.STATUS                            AS FORM_STATUS
			FROM
			:{Com_("D_T1_SHIPPING_HEADER")} h
			 INNER JOIN
	        	a
	        ON
	             a.FORM_ID = h.FORM_ID
		    LEFT JOIN
		    :{Com_("D_T1_REQUEST_HEADER")} rh
			ON
			    h.FORM_REF_ID = rh.FORM_ID
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
			    h.RECEIVE_TIME = :rTime
			AND NVL( s.STATUS, 'null') = :unaudit
			AND NVL(h.PICK_STATUS, 'null') != '已捡货'
			AND :{query :: 1=1}
			ORDER BY
			    h.FORM_ID DESC};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public List<ShippingHeader> queryAll(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType,String formType,String branchType,String storageId, int startRow,int endRow,String sortQuery) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                	SELECT
	                        		h.*, s.STATUS AS FORM_STATUS,nvl(pt.TIMES,'') printTimes,
	                        		DECODE(h.FORM_TYPE,'INNER_UNIFIED',DECODE(h.FORM_REF_ID,NULL,'',DECODE(rh.ISADDFORM,'Y','Y','')),'')    isAddForm     
		                	    FROM
		                	    :{Com_("D_T1_SHIPPING_HEADER")} h
	                	        LEFT JOIN
	                	        :{Com_("D_T1_REQUEST_HEADER")} rh
		            			ON
		            			    h.FORM_REF_ID = rh.FORM_ID
		                	    LEFT JOIN
		                	    :{Com_("D_T0_FORM_STATUS")} s
		                	    ON
		                	        s.FORM_ID = h.FORM_ID
		                	    AND s.IS_CURRENT = 1
		                	    LEFT JOIN
		                	    :{Com_("D_T0_PRINT_TIMES")} pt
		                	    ON h.FORM_ID = pt.FORM_ID
		                	    WHERE
		                	        :{query :: 1=1}
		                	    AND (
		                	            h.FORM_TIME >= :sDate
		                	        OR  :sDate IS NULL)
		                	    AND (
		                	            h.FORM_TIME <= :eDate
		                	        OR  :eDate IS NULL)
	                	        :{sortQuery :: ''} ) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public List<ShippingHeader> queryAll(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType,String formType,String branchType,String storageId, int startRow,int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		return queryAll(startDate, endDate, branchId, queryType, formType, branchType, storageId, startRow, endRow,"");
	}
	
	public int countAll(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType,  String formType,String branchType,String storageId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		int counts = 0;
		String query = formQuery(branchId, queryType, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx]{
				SELECT
        			COUNT(*)
    			INTO
    				:counts
        	    FROM
        	    :{Com_("D_T1_SHIPPING_HEADER")} h
        	    LEFT JOIN
        	    :{Com_("D_T0_FORM_STATUS")} s
        	    ON
        	        s.FORM_ID = h.FORM_ID
        	    AND s.IS_CURRENT = 1
        	    WHERE
        	        :{query :: 1=1}
        	    AND (
        	            h.FORM_TIME >= :sDate
        	        OR  :sDate IS NULL)
        	    AND (
        	            h.FORM_TIME <= :eDate
        	        OR  :eDate IS NULL)
		};
		closeDefaultContext(myCtx);
		return counts;
	}
	
	public double sumAll(java.util.Date startDate, java.util.Date endDate, String branchId, String formType, String branchType, String storageId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Double allPayAmt = null;
		String query = formQuery(branchId, null, formType, branchType, storageId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx]{
			SELECT
				SUM(ALL_PAY_AMT)
			INTO
				:allPayAmt
    	    FROM
    	    :{Com_("D_T1_SHIPPING_HEADER")} h
    	    LEFT JOIN
    	    :{Com_("D_T0_FORM_STATUS")} s
    	    ON
    	        s.FORM_ID = h.FORM_ID
    	    AND s.IS_CURRENT = 1
    	    WHERE
    	        :{query :: 1=1}
    	    AND (
    	            h.FORM_TIME >= :sDate
    	        OR  :sDate IS NULL)
    	    AND (
    	            h.FORM_TIME <= :eDate
    	        OR  :eDate IS NULL)
    	    ORDER BY
    	        H.FORM_ID
		};
		
		closeDefaultContext(myCtx);
		if (allPayAmt == null) {
			return 0;
		}
		return allPayAmt;
	}

	public ShippingHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,
			    s.STATUS FORM_STATUS,
			    ''       isAddForm,
			    ''       printTimes
			FROM
			    :{Com_("D_T1_SHIPPING_HEADER")} h
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s
			ON
			    h.FORM_ID = s.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
			    h.form_id = :formId};
		List<ShippingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<ShippingHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<ShippingHeader> headerLst = new ArrayList<ShippingHeader>();
		while(headerIter.next()) {
			ShippingHeader header = new ShippingHeader();
			header.setFormId(headerIter.form_id());
			header.setFormRefId(headerIter.form_ref_id());
			header.setFormType(headerIter.form_type());
			header.setProviderId(headerIter.provider_id());
			header.setProvider(headerIter.provider());
			header.setReceiveTime(SqlDateUtil.getUtilDate(headerIter.receive_time()));
			header.setRequesterId(headerIter.requester_id());
			header.setRequester(headerIter.requester());
			header.setRequestAddress(headerIter.request_address());
			header.setFormMakerId(headerIter.form_maker_id());
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setFormTimeActual(SqlDateUtil.getUtilDate(headerIter.form_time_actual()));
			header.setAuditorId(headerIter.auditor_id());
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setInputerId(headerIter.inputer_id());
			header.setInputer(headerIter.inputer());
			header.setInputTime(SqlDateUtil.getUtilDate(headerIter.input_time()));
			header.setFormNote(headerIter.form_note());
			header.setAllPayAmt(headerIter.all_pay_amt());
			header.setMaxPayItem(headerIter.max_pay_item());
			header.setOutStorageId(headerIter.out_storage_id());
			header.setOutStorage(headerIter.out_storage());
			header.setInStorageId(headerIter.in_storage_id());
			header.setInStorage(headerIter.in_storage());
			header.setFormStatus(headerIter.form_status());
			header.setPickStatus(headerIter.pick_status());
			header.setInputStatus(headerIter.input_status());
			header.setReturnStatus(headerIter.return_status());
			header.setAntiStatus(headerIter.anti_status());
			header.setOnStatus(headerIter.on_status());
			header.setIsAddForm(headerIter.isAddForm());
			header.setPrintTimes(headerIter.printTimes());
			header.setAuditTimeActual(SqlDateUtil.getUtilDate(headerIter.audit_time_actual()));
			header.setInputTimeActual(SqlDateUtil.getUtilDate(headerIter.input_time_actual()));
			headerLst.add(header);
		}
		return headerLst;
	}
}