/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Aug 26, 2014 by liyzh
 * Last edited on Aug 26, 2014 by liyzh
 * 
 * 说明：物流中心采购单、中央工厂采购单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.PurchasingHeader;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BranchCode;
import com.tanry.framework.util.constant.BranchType;

public class PurchasingHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(PurchasingHeaderBean.class);
	
	#sql private iterator HeaderIter(String form_id, String form_ref_id, String delivery_type,
			String provider_id,
			String provider,
			String requester_id,
			String requester,
			String receiver_id,
			String receiver,
			String receive_address,
			Date receive_time,
			String form_maker_id,
			String form_maker,
			Date form_time,
			Date form_time_actual,
			String auditor_id,
			String auditor,
			Date audit_time,
			String form_note,
			String storage_id,
			String storage,
			Double all_pay_amt,
			String max_pay_item,
			Date audit_time_actual 
			);
	
	/**
	 * 未入库的采购单，树形结构
	 */
	#sql private iterator UnstorageIter(String id, String name, String parent);
	
	/**
	 * 根据营业日期和部门得到最大的单据序号，用来生成下一个单据流水号
	 */
	public int newSerial(java.util.Date businessDate, String branchId, String branchType) 
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String maxId = null;
		int length = FormConstant.DEFAULT_SERIAL_LENGTH;
		int nLen = 0 - length;
		Date bDate = SqlDateUtil.getSqlDate(businessDate);
		String query = " h.REQUESTER_ID = '" + branchId + "'";
		// 直配订单
		if (BranchType.RESTAURANT.equals(branchType)) {
			query = " h.RECEIVER_ID = '" + branchId + "'";
		}
		#sql [myCtx] {
			SELECT
				MAX(SUBSTR(h.FORM_ID, :nLen, :length) ) into :maxId
			FROM
			:{Com_("D_T1_PURCHASING_HEADER")} h
			WHERE
			    h.FORM_TIME = :bDate
			AND :{query :: 1=1} 
		};
		closeDefaultContext(myCtx);
		
		int result = 1;
		if (maxId != null) {
			maxId = maxId.substring(maxId.length() - length);
			result = Integer.parseInt(maxId) + 1;
		}
		return result;
	}
	
	/**
	 * 保存
	 */
	public int saveEntity(PurchasingHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String deliveryType = header.getDeliveryType();
		String formRefId = header.getFormRefId();
		String providerId = header.getProviderId();
		String provider = header.getProvider();
		String requesterId = header.getRequesterId();
		String requester = header.getRequester();
		String receiverId = header.getReceiverId();
		String receiver = header.getReceiver();
		String receiveAddress = header.getReceiveAddress();
		String storageId = header.getStorageId();
		String storage = header.getStorage();
		Date receiveTime = SqlDateUtil.getSqlDate(header.getReceiveTime());
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		Date formTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_PURCHASING_HEADER")}
				(FORM_ID, FORM_REF_ID, DELIVERY_TYPE, PROVIDER_ID, PROVIDER, RECEIVE_TIME, REQUESTER_ID, REQUESTER, 
						RECEIVER_ID, RECEIVER, RECEIVE_ADDRESS, STORAGE_ID, STORAGE, FORM_MAKER_ID, FORM_MAKER, 
						FORM_TIME, FORM_TIME_ACTUAL,
						AUDITOR, AUDIT_TIME, FORM_NOTE, ALL_PAY_AMT, MAX_PAY_ITEM) 
			VALUES (:formId, :formRefId, :deliveryType,
					:providerId, 
					:provider, 
					:receiveTime,
					:requesterId,  
					:requester, :receiverId, :receiver,
					:receiveAddress, :storageId, :storage,
					:formMakerId,  
					:formMaker, 
					:formTime, :formTimeActual,
					:auditor, 
					:auditTime, 
					:formNote, 
					:allPayAmt, 
					:maxPayItem)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(PurchasingHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String providerId = header.getProviderId();
		Date receiveTime = SqlDateUtil.getSqlDate(header.getReceiveTime());
		String requester = header.getRequester();
		String receiveAddress = header.getReceiveAddress();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PURCHASING_HEADER")}
			SET
				RECEIVE_TIME = :receiveTime,
				FORM_NOTE = :formNote,
			    ALL_PAY_AMT = :allPayAmt,
			    MAX_PAY_ITEM = :maxPayItem
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	//更新直配审核时间
	public int updateTime(String formId,PurchasingHeader header)
			throws NoPrivilegeException, SQLException, NoConnection {
			DefaultContext myCtx = getDefaultContext();

			String auditor = header.getAuditor();
			Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());

			#sql [myCtx] {
				UPDATE
				:{Com_("D_T1_PURCHASING_HEADER")}
				SET
					AUDITOR = :auditor,
					AUDIT_TIME = :auditTime
				WHERE 
					FORM_ID = :formId
			};
			closeDefaultContext(myCtx);
			
			return 1;
		}

	
	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_PURCHASING_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	/**
	 * 采购单审核
	 */
	public int audit(String formId, String userId, String userName, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date auditTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PURCHASING_HEADER")}
			SET
				AUDITOR_ID = :userId,
				AUDITOR = :userName,
				audit_time = :sAuditTime,
				AUDIT_TIME_ACTUAL =:auditTimeActual
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	/**
	 * 设置是否进行生产计划汇总(央厂)
	 */
	public int savePlanStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PURCHASING_HEADER")}
			SET
				PLAN_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	/**
	 * 设置是否出库(央厂)
	 */
	public int saveOutStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PURCHASING_HEADER")}
			SET
				OUT_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_PURCHASING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
				and (h.FORM_TIME >= :sDate or :sDate is null)
				and (h.FORM_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId, String queryType) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.REQUESTER_ID = '" + branchId + "'";
		}
		if ("unaudit".equals(queryType)) { // 获取未审核记录
			query = query + " AND NVL( s.STATUS, 'null') != '已作废'";
			query = query + " AND NVL( s.STATUS, 'null') != '已审核'"; 
		}
		if ("storage".equals(queryType)) { // 获取已入库记录
			query = query + " AND NVL( s.STATUS, 'null') = '已入库'";
		}
		return query;
	}
	
	public List<PurchasingHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T1_PURCHASING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1} 
			and (h.FORM_TIME >= :sDate or :sDate is null)
			and (h.FORM_TIME <= :eDate or :eDate is null)
		};
		List<PurchasingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}

	/*根据单据号模糊查询采购单，进行采购调价，排除供应商*/
	public List<PurchasingHeader> query(String formId, int startRow, int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		String query = "1=1";
		if(!TextUtil.isEmpty(formId)){
			formId="%"+formId+"%";
			query +=" AND h.form_id LIKE '"+formId +"' "; 	
		}
		
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    SELECT
			                        h.*
			                    FROM
			                        :{Com_("D_T1_PURCHASING_HEADER")} h
		                        INNER JOIN
			                        :{Com_("D_T0_FORM_STATUS")} s
			                    ON
			                        s.FORM_ID = h.FORM_ID
			                    AND s.IS_CURRENT = 1
			                    WHERE
			                        :{query :: 1=1}
			                    AND h.RECEIVER_ID IS NULL
			                    AND h.PROVIDER_ID !='F00'
			                    AND NVL( s.STATUS, 'null') != '未审核'
			                    ORDER BY
			                        h.FORM_ID DESC ) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<PurchasingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
			return headerLst;
	}
	
	public int count(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		String query = "1=1";
		if(!TextUtil.isEmpty(formId)){
			formId="%"+formId+"%";
			query +=" AND h.form_id LIKE '"+formId+"' " ; 	
		}
		int total = 0;
		
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_PURCHASING_HEADER")} h
		INNER JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    s.FORM_ID = h.FORM_ID
		AND s.IS_CURRENT = 1
		WHERE
		    :{query :: 1=1}
		AND h.RECEIVER_ID IS NULL
		AND NVL( s.STATUS, 'null') != '未审核'};
		closeDefaultContext(myCtx);
		return total;
	}
	
	#sql private iterator PrintIter(String form_id, String form_ref_id, String delivery_type,
			String provider_id,
			String provider,
			String requester_id,
			String requester,
			String receiver_id,
			String receiver,
			String receive_address,
			Date receive_time,
			String form_maker_id,
			String form_maker,
			Date form_time,
			Date form_time_actual,
			String auditor_id,
			String auditor,
			Date audit_time,
			String form_note,
			String storage_id,
			String storage,
			Double all_pay_amt,
			String max_pay_item,
			Integer times,
			Date audit_time_actual
			);
	
	public PurchasingHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		PrintIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,
			    p.TIMES
			FROM
			:{Com_("D_T1_PURCHASING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_PRINT_TIMES")} p
			ON
			    p.FORM_ID = h.FORM_ID
			WHERE
				h.form_id = :formId
		};
		List<PurchasingHeader> headerLst = processPrintIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	/**
	 * 根据门店获取所有未入库的采购单，树形结构数据，
	 * 单据当前状态为未入库，或者已入库（分多次入库的情况，已结案才是真正地完成入库操作）
	 */
	public List<Map> queryUnStorage(String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = " 1=1";
		if (!"-1".equals(branchId)) {
			query = query + " AND h.REQUESTER_ID = '" + branchId + "'";
		}
		DefaultContext myCtx = getDefaultContext();
		UnstorageIter unstorageIter = null;
		#sql [myCtx] unstorageIter = {
			WITH
			    purchase AS
			    (
			        SELECT
			            h.*
			        FROM
			        	:{Com_("D_T1_PURCHASING_HEADER")} H ,
			        	:{Com_("D_T0_FORM_STATUS")} S
			        WHERE
			            S.FORM_ID = H.FORM_ID
			      --  AND ( S.STATUS = '未入库' OR S.STATUS = '已入库' )
			        AND S.IS_CURRENT = 1
			        AND :{query :: 1=1} 
			    )
			SELECT
			    p.PROVIDER_ID   AS id,
			    s.BRANCH_NAME AS name,
			    'root'          AS parent
			FROM
			    purchase p,
			    :{Com_("D_T2_BRANCH")} s
			WHERE
			    s.BRANCH_ID = p.PROVIDER_ID
			GROUP BY
			    p.PROVIDER_ID,
			    s.BRANCH_NAME
			UNION ALL
			SELECT
			    p.form_id     AS id,
			    p.form_id     AS name,
			    p.PROVIDER_ID AS parent
			FROM
			    purchase p
		};
		List<Map> nodeLst = new ArrayList<Map>();
		while(unstorageIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", unstorageIter.id());
			node.put("name", unstorageIter.name());
			node.put("parent", unstorageIter.parent());
			nodeLst.add(node);
		}
		unstorageIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
	private List<PurchasingHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<PurchasingHeader> headerLst = new ArrayList<PurchasingHeader>();
		while(headerIter.next()) {
			PurchasingHeader header = new PurchasingHeader();
			header.setFormId(headerIter.form_id());
			header.setDeliveryType(headerIter.delivery_type());
			header.setProviderId(headerIter.provider_id());
			header.setProvider(headerIter.provider());
			header.setRequesterId(headerIter.requester_id());
			header.setRequester(headerIter.requester());
			header.setReceiverId(headerIter.receiver_id());
			header.setReceiver(headerIter.receiver());
			header.setReceiveAddress(headerIter.receive_address());
			header.setReceiveTime(SqlDateUtil.getUtilDate(headerIter.receive_time()));
			header.setFormMakerId(headerIter.form_maker_id());
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setFormTimeActual(SqlDateUtil.getUtilDate(headerIter.form_time_actual()));
			header.setAuditorId(headerIter.auditor_id());
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setFormNote(headerIter.form_note());
			header.setStorage(headerIter.storage());
			header.setStorageId(headerIter.storage_id());
			header.setAllPayAmt(headerIter.all_pay_amt());
			header.setMaxPayItem(headerIter.max_pay_item());
			header.setAuditTimeActual(SqlDateUtil.getUtilDate(headerIter.audit_time_actual()));
			headerLst.add(header);
		}
		return headerLst;
	}
	private List<PurchasingHeader> processPrintIter(PrintIter headerIter) 
			throws SQLException {
		List<PurchasingHeader> headerLst = new ArrayList<PurchasingHeader>();
		while(headerIter.next()) {
			PurchasingHeader header = new PurchasingHeader();
			header.setFormId(headerIter.form_id());
			header.setDeliveryType(headerIter.delivery_type());
			header.setProviderId(headerIter.provider_id());
			header.setProvider(headerIter.provider());
			header.setRequesterId(headerIter.requester_id());
			header.setRequester(headerIter.requester());
			header.setReceiverId(headerIter.receiver_id());
			header.setReceiver(headerIter.receiver());
			header.setReceiveAddress(headerIter.receive_address());
			header.setReceiveTime(SqlDateUtil.getUtilDate(headerIter.receive_time()));
			header.setFormMakerId(headerIter.form_maker_id());
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setFormTimeActual(SqlDateUtil.getUtilDate(headerIter.form_time_actual()));
			header.setAuditorId(headerIter.auditor_id());
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setFormNote(headerIter.form_note());
			header.setStorage(headerIter.storage());
			header.setStorageId(headerIter.storage_id());
			header.setAllPayAmt(headerIter.all_pay_amt());
			header.setMaxPayItem(headerIter.max_pay_item());
			header.setTimes(headerIter.times());
			header.setAuditTimeActual(SqlDateUtil.getUtilDate(headerIter.audit_time_actual()));
			headerLst.add(header);
		}
		return headerLst;
	}
}