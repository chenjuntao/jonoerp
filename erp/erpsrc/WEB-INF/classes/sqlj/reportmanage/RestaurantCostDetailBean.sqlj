package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class RestaurantCostDetailBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(RestaurantCostDetailBean.class);
	
	#sql private iterator HeaderIter(
			String item_id, 
			String item_name, 
			String item_dimension, 
			Double item_price,
			Double begin_count,
			Double begin_amt,
			Double end_count,
			Double end_amt,
			
			Double sum1, //本期进货
			Double amt1, //本期进货金额
			
			Double sum2, //调入数量
			Double amt2, //调入金额
			
			Double sum3, //调出数量
			Double amt3,  //调出金额
			
			Double sum4, //标准数量（理论扣库）
			Double amt4,  //标准金额
			
			Double sum5, //原料报损数量
			Double amt5,  //原料报损金额
			
			Double sum6, //出品报损数量
			Double amt6,  //出品报损金额
			
			Double sum7, //消耗数量 = 期初+本期进货-期末
			Double amt7,  //消耗金额
			
			Double sum8, //差异 = 期初+本期进货-期末
			Double amt8  //差异金额
		);
	
	public List<Map> query(String branchId,java.util.Date startDate, java.util.Date endDate, java.util.Date startPreDate,String tagId)  
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		Date sPreDate = SqlDateUtil.getSqlDate(startPreDate);
		
		String query = " 1=1";
		if(!TextUtil.isEmpty(tagId)){
			query = "  d1.TAG_ID = '" + tagId+ "' ";
		}
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			WITH
			    p AS
			    (
			        SELECT
			            p.ITEM_ID,
			            p.ITEM_PRICE
			        FROM
			            :{Com_("D_T2_ITEM_PRICE")} p
			        WHERE
			            p.IS_CURRENT = 1
			        AND p.PRICE_TYPE = 'BENCHMARK'
			    )
			    ,
			    a AS
			    (
			        SELECT
			            io.BRANCH_ID,
			            io.ITEM_ID,
			            SUM(
			                CASE
			                    WHEN io.REASON IN('CGRK',
			                                      'PSRK',
			                                      'PSTH',
			                                      'CGTH',
			                                      'PSFSH')
			                    THEN io.ITEM_COUNT_IN-io.ITEM_COUNT_OUT
			                    ELSE 0
			                END) sum1,
			            SUM(
			                CASE
			                    WHEN io.REASON IN ( 'DB')
			                    THEN io.ITEM_COUNT_IN
			                    ELSE 0
			                END)sum2,
			            SUM(
			                CASE
			                    WHEN io.REASON IN ( 'DB')
			                    THEN io.ITEM_COUNT_OUT
			                    ELSE 0
			                END)sum3,
			            SUM(
			                CASE
			                    WHEN io.REASON IN ( 'LLKU')
			                    THEN io.ITEM_COUNT_OUT
			                    ELSE 0
			                END)sum4,
			            SUM(
			                CASE
			                    WHEN io.REASON IN ( 'YLBS')
			                    THEN io.ITEM_COUNT_OUT
			                    ELSE 0
			                END)sum5,
			            SUM(
			                CASE
			                    WHEN io.REASON IN ( 'CPBS')
			                    THEN io.ITEM_COUNT_OUT
			                    ELSE 0
			                END)sum6
			        FROM
			            :{Com_("D_T0_STORAGE_IN_OUT")} io
			        LEFT JOIN
			            :{Com_("D_T2_TAG_DETAIL")} d1
			        ON
			            io.ITEM_ID = d1.CODE
			        AND d1.TAG_ID = :tagId
			        WHERE
			            :{query :: 1=1}
			        AND io.BUSINESS_DATE >= :sDate
			        AND io.BUSINESS_DATE <= :eDate
			        AND io.BRANCH_ID = :branchId
			        GROUP BY
			            io.BRANCH_ID,
			            io.ITEM_ID
			    )
			    ,
			    b AS
			    (
			        SELECT
			            BRANCH_ID,
			            ITEM_ID,
			            sum1,
			            sum2,
			            sum3,
			            sum4,
			            sum5,
			            sum6
			        FROM
			            a
			        WHERE
			            (
			                sum1>0
			            OR  sum2>0
			            OR  sum3>0
			            OR  sum4>0
			            OR  sum5>0
			            OR  sum6 >0)
			    )
			    ,
			    f AS
			    (
			        SELECT
			            *
			        FROM
			            (
			                SELECT
			                    t.*,
			                    row_number() over(partition BY CHECK_BRANCH_ID ORDER BY AUDIT_TIME DESC ) rn
			                FROM
			                    (
			                        SELECT
			                            h.CHECK_BRANCH_ID,
			                            h.FORM_ID,
			                            h.AUDIT_TIME
			                        FROM
			                            :{Com_("D_T1_CHECK_HEADER")} h
			                        WHERE
			                            1=1
			                        AND h.FORM_TYPE = 'form'
			                        AND h.CHECK_BRANCH_ID = :branchId
			                        AND h.AUDIT_TIME <= :sPreDate ) t )
			        WHERE
			            rn=1
			    )
			    ,
			    g AS
			    (
			        SELECT
			            d.ITEM_ID,
			            d.CHECK_COUNT begin_count
			        FROM
			            f
			        LEFT JOIN
			            :{Com_("D_T1_CHECK_DETAIL")} d
			        ON
			            f.form_id = d.FORM_ID
			        LEFT JOIN
			            :{Com_("D_T2_TAG_DETAIL")} d1
			        ON
			            d.ITEM_ID = d1.CODE
			        AND d1.TAG_ID = :tagId
			        WHERE
			            :{query :: 1=1}
			    )
			    ,
			    h AS
			    (
			        SELECT
			            *
			        FROM
			            (
			                SELECT
			                    t.*,
			                    row_number() over(partition BY CHECK_BRANCH_ID ORDER BY AUDIT_TIME DESC ) rn
			                FROM
			                    (
			                        SELECT
			                            h.CHECK_BRANCH_ID,
			                            h.FORM_ID,
			                            h.AUDIT_TIME
			                        FROM
			                            :{Com_("D_T1_CHECK_HEADER")} h
			                        WHERE
			                            1=1
			                        AND h.FORM_TYPE = 'form'
			                        AND h.CHECK_BRANCH_ID = :branchId
			                        AND h.AUDIT_TIME <= :eDate ) t )
			        WHERE
			            rn=1
			    )
			    ,
			    i AS
			    (
			        SELECT
			            d.ITEM_ID,
			            d.CHECK_COUNT end_count
			        FROM
			            h
			        LEFT JOIN
			            :{Com_("D_T1_CHECK_DETAIL")} d
			        ON
			            h.form_id = d.FORM_ID
			        LEFT JOIN
			            :{Com_("D_T2_TAG_DETAIL")} d1
			        ON
			            d.ITEM_ID = d1.CODE
			        AND d1.TAG_ID = :tagId
			        WHERE
			            :{query :: 1=1}
			    )
			    ,
			    j AS
			    (
			        SELECT
			            DECODE(g.item_id,NULL,i.item_id,g.item_id) item_id,
			            NVL(begin_count,0)                         begin_count,
			            NVL(end_count,0)                           end_count
			        FROM
			            g
			        FULL JOIN
			            i
			        ON
			            g.item_id = i.item_id
			    )
			    ,
			    k AS
			    (
			        SELECT
			            DECODE(j.item_id,NULL,b.item_id,j.item_id) item_id ,
			            NVL(BEGIN_COUNT,0)                         BEGIN_COUNT,
			            NVL(END_COUNT,0)                           END_COUNT,
			            NVL(b.sum1,0)                              sum1,
			            NVL(b.sum2,0)                              sum2,
			            NVL(b.sum3,0)                              sum3,
			            NVL(b.sum4,0)                              sum4,
			            NVL(b.sum5,0)                              sum5,
			            NVL(b.sum6,0)                              sum6
			        FROM
			            j
			        FULL JOIN
			            b
			        ON
			            j.item_id = b.item_id
			        WHERE
			            (
			                j.BEGIN_COUNT >0
			            OR  j.END_COUNT >0
			            OR  b.item_id IS NOT NULL)
			    )
			    ,
			    l AS
			    (
			        SELECT
			            k.item_id,
			            m.item_name,
			            m.ITEM_DIMENSION,
			            p.ITEM_PRICE,
			            BEGIN_COUNT,
			            BEGIN_COUNT*p.item_price begin_amt,
			            end_count,
			            end_count*p.item_price end_amt,
			            sum1                   sum1,
			            sum1*p.item_price      amt1,
			            sum2,
			            sum2*p.item_price amt2,
			            sum3,
			            sum3*p.item_price amt3,
			            sum4,
			            sum4*p.item_price amt4,
			            sum5,
			            sum5*p.item_price amt5,
			            sum6,
			            sum6*p.item_price                          amt6,
			            BEGIN_COUNT +sum1-end_count                sum7,
			            (BEGIN_COUNT +sum1-end_count)*p.item_price amt7
			        FROM
			            k
			        LEFT JOIN
			            p
			        ON
			            k.item_id = p.item_id
			        LEFT JOIN
			            :{Com_("D_T2_ITEM_META")} m
			        ON
			            k.item_id = m.ITEM_ID
			    )
			SELECT
			    item_id,
			    item_name,
			    ITEM_DIMENSION,
			    ITEM_PRICE,
			    BEGIN_COUNT,
			    SUM(begin_amt)begin_amt,
			    end_count,
			    SUM(end_amt) end_amt,
			    sum1,
			    ROUND(SUM(amt1),2) amt1,
			    sum2,
			    ROUND(SUM(amt2),2)amt2,
			    sum3,
			    ROUND(SUM(amt3),2) amt3,
			    sum4,
			    ROUND(SUM(amt4),2)amt4,
			    sum5,
			    ROUND(SUM(amt5),2)amt5,
			    sum6,
			    ROUND(SUM(amt6),2)amt6,
			    sum7,
			    ROUND(SUM(amt7),2)                amt7,
			    (sum7-sum4-sum5-sum6)             sum8,
			    ROUND(SUM(amt7-amt4-amt5-amt6),2) amt8
			FROM
			    l
			GROUP BY
			    GROUPING SETS((item_id,item_name,ITEM_DIMENSION,ITEM_PRICE,BEGIN_COUNT,begin_amt,end_count,
			    end_amt, sum1,amt1,sum2,amt2,sum3,amt3,sum4,amt4,sum5,amt5,sum6,amt6,sum7,amt7,sum7-sum4-sum5-
			    sum6,amt7-amt4-amt5-amt6),NULL)
			ORDER BY
			    1};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		int rownumber = 1;
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_price", headerIter.item_price());
			header.put("begin_count", headerIter.begin_count());
			header.put("begin_amt", headerIter.begin_amt());
			header.put("end_count", headerIter.end_count());
			header.put("end_amt", headerIter.end_amt());
			
			header.put("sum1", headerIter.sum1());
			header.put("amt1", headerIter.amt1());
			header.put("sum2", headerIter.sum2());
			header.put("amt2", headerIter.amt2());
			header.put("sum3", headerIter.sum3());
			header.put("amt3", headerIter.amt3());
			header.put("sum4", headerIter.sum4());
			header.put("amt4", headerIter.amt4());
			
			header.put("sum5", headerIter.sum5());
			header.put("amt5", headerIter.amt5());
			header.put("sum6", headerIter.sum6());
			header.put("amt6", headerIter.amt6());
			
			header.put("sum7", headerIter.sum7());
			header.put("amt7", headerIter.amt7());
			header.put("sum8", headerIter.sum8());
			header.put("amt8", headerIter.amt8());
			
			headerLst.add(header);
			
			rownumber++;
		}
		return headerLst;
	}
}