package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.acl.NoPrivilegeException;

public class ShippingAntiauditFormBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(ShippingAntiauditFormBean.class);
	
	#sql private iterator HeaderIter(
			Date antiaudit_time,
			String form_ref_id, 
			String antiauditor,
			String antiaudit_branch,
			String form_note,
			String provider, 
			String out_storage, 
			String requester, 
			String in_storage, 
			String inputer, 
			Date input_time,
			Date receive_time,
			String max_pay_item,
			String status
		);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("antiaudit_time", "Date"); 
		map.put("form_ref_id", "String");
		map.put("antiauditor", "String");
		map.put("antiaudit_branch", "String");
		map.put("form_note", "String"); 
		map.put("provider", "String");
		map.put("out_storage", "String");
		map.put("requester", "String");
		map.put("in_storage", "String");
		map.put("inputer", "String");
		map.put("input_time", "Date"); 
		map.put("receive_time", "Date"); 
		map.put("max_pay_item", "String");
		map.put("status", "String");
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("antiaudit_time", "h"); 
		map.put("form_ref_id", "h");
		map.put("antiauditor", "h");
		map.put("antiaudit_branch", "h");
		map.put("form_note", "h"); 
		map.put("provider", "ph");
		map.put("out_storage", "ph");
		map.put("requester", "ph");
		map.put("in_storage", "ph");
		map.put("inputer", "ph");
		map.put("input_time", "ph"); 
		map.put("receive_time", "ph"); 
		map.put("max_pay_item", "ph");
		map.put("status", "s");
		return map;
	}
	
	public int count(String queryStr, String sortStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
    	  count(*) into :total
    	FROM
    	:{Com_("D_T1_SHIPPING_ANTIAUDIT_HEADER")} h
    	JOIN
    	:{Com_("D_T1_SHIPPING_HEADER")} ph
    	ON
    	    h.FORM_REF_ID = ph.FORM_ID
    	JOIN
    	:{Com_("D_T0_FORM_STATUS")} s
    	ON
    	    h.FORM_REF_ID = s.FORM_ID
    	AND s.IS_CURRENT = 1
    	WHERE
    	    1 = 1 :{queryStr :: ''} :{sortStr :: ''}};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,  String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
		SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (SELECT
			                	    h.ANTIAUDIT_TIME,
			                	    h.FORM_REF_ID,
			                	    h.ANTIAUDITOR,
			                	    h.ANTIAUDIT_BRANCH,
			                	    h.FORM_NOTE,
			                	    ph.PROVIDER,
			                	    ph.OUT_STORAGE,
			                	    ph.RECEIVE_TIME,
			                	    ph.REQUESTER,
			                	    ph.IN_STORAGE,
			                	    ph.INPUTER,
			                	    ph.INPUT_TIME,
			                	    ph.MAX_PAY_ITEM,
			                	    s.STATUS
			                	FROM
			                	:{Com_("D_T1_SHIPPING_ANTIAUDIT_HEADER")} h
			                	JOIN
			                	:{Com_("D_T1_SHIPPING_HEADER")} ph
			                	ON
			                	    h.FORM_REF_ID = ph.FORM_ID
			                	JOIN
			                	:{Com_("D_T0_FORM_STATUS")} s
			                	ON
			                	    h.FORM_REF_ID = s.FORM_ID
			                	AND s.IS_CURRENT = 1
			                	WHERE
			                	    1 = 1 :{queryStr :: ''} :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("antiaudit_time", headerIter.antiaudit_time());
			header.put("form_ref_id", headerIter.form_ref_id());
			header.put("antiauditor", headerIter.antiauditor());
			header.put("antiaudit_branch", headerIter.antiaudit_branch());
			header.put("form_note", headerIter.form_note());
			header.put("provider", headerIter.provider());
			header.put("out_storage", headerIter.out_storage());
			header.put("requester", headerIter.requester());
			header.put("in_storage", headerIter.in_storage());
			header.put("inputer", headerIter.inputer());
			header.put("input_time", headerIter.input_time());
			header.put("receive_time", headerIter.receive_time());
			header.put("max_pay_item", headerIter.max_pay_item());
			header.put("status", headerIter.status());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}