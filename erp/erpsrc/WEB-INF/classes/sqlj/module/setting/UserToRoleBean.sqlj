/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Tue Mar 17 15:04:23 CST 2015 by lyz
 * Last edited on Tue Mar 17 15:04:23 CST 2015 by lyz
 * 
 * comment: 系统用户角色关联表
 */
package logic.module.setting;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.module.setting.user.pojo.UserToRole;
import com.tanry.framework.acl.NoPrivilegeException;

public class UserToRoleBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(UserToRoleBean.class);
	
	#sql private iterator RelationIter(String id, Integer weight, String user_id, String role_id);
	
	public int saveEntity(UserToRole relation)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String id = relation.getId();
		Integer weight = relation.getWeight();
		String userId = relation.getUserId();
		String roleId = relation.getRoleId();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T0_USERTOROLE")} 
				(ID, WEIGHT, USER_ID, ROLE_ID) 
			VALUES (:id, :weight, :userId, :roleId)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int saveEntity(String userId, String roleId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		if (exist(userId)) {
			#sql [myCtx] {
				UPDATE
				:{Com_("D_T0_USERTOROLE")}
				SET
					ROLE_ID = :roleId
				WHERE 
					USER_ID = :userId
			};
		} else {
			#sql [myCtx] {
				INSERT INTO :{Com_("D_T0_USERTOROLE")} 
					(USER_ID, ROLE_ID) 
				VALUES (:userId, :roleId)
			};
		}
		closeDefaultContext(myCtx);
		return 1;
	}
	
	public int updateEntity(UserToRole relation)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String id = relation.getId();
		Integer weight = relation.getWeight();
		String userId = relation.getUserId();
		String roleId = relation.getRoleId();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T0_USERTOROLE")}
			SET
				WEIGHT = :weight,
				USER_ID = :userId,
				ROLE_ID = :roleId
			WHERE 
				ID = :id
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String id)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T0_USERTOROLE")}
			WHERE
				ID = :id
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int deleteByRole(String roleId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T0_USERTOROLE")}
			WHERE
				ROLE_ID = :roleId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public List<UserToRole> query() 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		RelationIter relationIter = null;
		#sql [myCtx] relationIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T0_USERTOROLE")}
		};
		List<UserToRole> relationLst = processIter(relationIter);
		relationIter.close();
		closeDefaultContext(myCtx);
		return relationLst;
	}
	
	#sql private iterator UIDIterator(String USER_ID ,String ROLE_ID);
	
	public List<UserToRole> listUserToRole() 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		UIDIterator relationIter = null;
		#sql [myCtx] relationIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T0_USERTOROLE")}
		};
		List<UserToRole> relationLst = new ArrayList();
		try {
			while(relationIter.next()) {
				UserToRole userToRole = new UserToRole();
				userToRole.setUserId(relationIter.USER_ID());
				userToRole.setRoleId(relationIter.ROLE_ID());
				relationLst.add(userToRole);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		relationIter.close();
		closeDefaultContext(myCtx);
		return relationLst;
	}

	public boolean exist(String userId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    COUNT(*) into :total
			FROM
			:{Com_("D_T0_USERTOROLE")}
			WHERE
				USER_ID = :userId
		};
		closeDefaultContext(myCtx);
		if (total > 0) {
			return true;
		}
		return false;
	}
	
	public String queryRoleByUserId(String userId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		String roleId = null;
		UIDIterator relationIter = null;
		#sql [myCtx] relationIter = {
			SELECT
				USER_ID, ROLE_ID
			FROM
			:{Com_("D_T0_USERTOROLE")}
			WHERE
				USER_ID = :userId
		};
		
		while(relationIter.next()) {
			roleId = relationIter.ROLE_ID();
			break;
		}
		closeDefaultContext(myCtx);
		
		return roleId;
	}
	
	private List<UserToRole> processIter(RelationIter relationIter) 
			throws SQLException {
		List<UserToRole> relationLst = new ArrayList<UserToRole>();
		while(relationIter.next()) {
			UserToRole relation = new UserToRole();
			relation.setId(relationIter.id());
			relation.setWeight(relationIter.weight());
			relation.setUserId(relationIter.user_id());
			relation.setRoleId(relationIter.role_id());
			relationLst.add(relation);
		}
		return relationLst;
	}
}