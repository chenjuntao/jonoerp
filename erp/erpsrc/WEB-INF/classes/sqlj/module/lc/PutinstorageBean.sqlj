/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Dec 8, 2014 by liyzh
 * Last edited on Dec 8, 2014 by liyzh
 * 
 * 说明： 查询物流中心需要入库的采购单
 */
package logic.module.lc;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.InputDetail;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.constant.BranchType;

public class PutinstorageBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(PutinstorageBean.class);
	
	/**
	 * 未入库的采购单，树形结构
	 */
	#sql private iterator UnstorageIter(String id, String name, String parent, String dtype, String form_status);
	
	/**
	 * 根据制单日期获取所有未入库的采购单，树形结构数据，
	 * 单据当前状态为未入库，或者已入库（分多次入库的情况，已结案才是真正地完成入库操作）
	 * 下发到央厂的采购单除外
	 */
	public List<Map> queryUnStorage(String lcCode) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String cfType = BranchType.CENTRALFACTORY;
		
		DefaultContext myCtx = getDefaultContext();
		UnstorageIter unstorageIter = null;
		#sql [myCtx] unstorageIter = {
			WITH
			    purchase AS
			    (
			        SELECT
			            h.FORM_TIME,
			            h.FORM_ID,
			            h.DELIVERY_TYPE,
			            s.STATUS AS form_status
			        FROM
			        :{Com_("D_T1_PURCHASING_HEADER")} h
		            INNER JOIN
		            :{Com_("D_T2_BRANCH")} b
			        ON
			            h.PROVIDER_ID = b.BRANCH_ID
			        AND b.BRANCH_TYPE != :cfType
			        LEFT JOIN
			        :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            s.FORM_ID = h.FORM_ID
			        AND s.IS_CURRENT = 1
			        WHERE
		            	h.REQUESTER_ID = :lcCode
		            AND h.DELIVERY_TYPE !='DIRECT'
			        AND (
			                S.STATUS = '已审核'
			            OR  S.STATUS = '已入库' )
			    )
			SELECT
			    *
			FROM
			    (
			        SELECT
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS id,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS name,
			            'root'                              AS parent,
			            ''                                  AS dtype,
			            ''                                  AS form_status
			        FROM
			            purchase p
			        GROUP BY
			            p.FORM_TIME
			        ORDER BY
			            p.FORM_TIME DESC) a
			UNION ALL
			SELECT
			    *
			FROM
			    (
			        SELECT
			            p.FORM_ID                           AS id,
			            p.FORM_ID                           AS name,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS parent,
			            p.DELIVERY_TYPE                     AS dtype,
			            form_status
			        FROM
			            purchase p
			        ORDER BY
			            SUBSTR(p.FORM_ID, 3) DESC )};
		List<Map> nodeLst = new ArrayList<Map>();
		while(unstorageIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", unstorageIter.id());
			node.put("name", unstorageIter.name());
			node.put("parent", unstorageIter.parent());
			node.put("dtype", unstorageIter.dtype());
			node.put("status", unstorageIter.form_status());
			nodeLst.add(node);
		}
		unstorageIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
	public List<Map> queryUnStorage(java.util.Date startDate, java.util.Date endDate,String lcCode) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		String cfType = BranchType.CENTRALFACTORY;
		
		DefaultContext myCtx = getDefaultContext();
		UnstorageIter unstorageIter = null;
		#sql [myCtx] unstorageIter = {
			WITH
			    purchase AS
			    (
			        SELECT
			            h.FORM_TIME,
			            h.FORM_ID,
			            h.DELIVERY_TYPE,
			            s.STATUS AS form_status
			        FROM
			        :{Com_("D_T1_PURCHASING_HEADER")} h
		            INNER JOIN
		            :{Com_("D_T2_BRANCH")} b
			        ON
			            h.PROVIDER_ID = b.BRANCH_ID
			        AND b.BRANCH_TYPE != :cfType
			        LEFT JOIN
			        :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            s.FORM_ID = h.FORM_ID
			        AND s.IS_CURRENT = 1
			        WHERE
		            	h.REQUESTER_ID = :lcCode
		            AND h.DELIVERY_TYPE !='DIRECT'
			        AND (
			                S.STATUS = '已审核'
			            OR  S.STATUS = '已入库' )
			    )
			SELECT
			    *
			FROM
			    (
			        SELECT
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS id,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS name,
			            'root'                              AS parent,
			            ''                                  AS dtype,
			            ''                                  AS form_status
			        FROM
			            purchase p
			            WHERE
			            (p.FORM_TIME >= :sDate or :sDate is null)
						AND (p.FORM_TIME <= :eDate or :eDate is null)
			        GROUP BY
			            p.FORM_TIME
			        ORDER BY
			            p.FORM_TIME DESC) a
			UNION ALL
			SELECT
			    *
			FROM
			    (
			        SELECT
			            p.FORM_ID                           AS id,
			            p.FORM_ID                           AS name,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS parent,
			            p.DELIVERY_TYPE                     AS dtype,
			            form_status
			        FROM
			            purchase p
			        ORDER BY
			            SUBSTR(p.FORM_ID, 3) DESC )};
		List<Map> nodeLst = new ArrayList<Map>();
		while(unstorageIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", unstorageIter.id());
			node.put("name", unstorageIter.name());
			node.put("parent", unstorageIter.parent());
			node.put("dtype", unstorageIter.dtype());
			node.put("status", unstorageIter.form_status());
			nodeLst.add(node);
		}
		unstorageIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
	public List<Map> queryUnStorage(java.util.Date startDate, java.util.Date endDate,String lcCode,String itemName) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		String cfType = BranchType.CENTRALFACTORY;
		
		DefaultContext myCtx = getDefaultContext();
		UnstorageIter unstorageIter = null;
		#sql [myCtx] unstorageIter = {
				WITH
				 a AS (
				        SELECT DISTINCT
				            t.FORM_ID
				        FROM
				        :{Com_("D_T1_PURCHASING_DETAIL")} t
				        WHERE
				            1=1
				        AND (
				                t.ITEM_ID = :itemName
				            OR  t.ITEM_NAME = :itemName)
				        ORDER BY
				            t.FORM_ID
				    ),
				    purchase AS
				    (
				        SELECT
				            h.FORM_ID,
				            h.FORM_TIME,
				            h.DELIVERY_TYPE,
				            s.STATUS AS form_status
				        FROM
				        :{Com_("D_T1_PURCHASING_HEADER")} h
				        INNER JOIN
				        	a
				        ON
				             a.FORM_ID = h.FORM_ID
		            INNER JOIN
		            :{Com_("D_T2_BRANCH")} b
			        ON
			            h.PROVIDER_ID = b.BRANCH_ID
			        AND b.BRANCH_TYPE != :cfType
			        LEFT JOIN
			        :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            s.FORM_ID = h.FORM_ID
			        AND s.IS_CURRENT = 1
			        WHERE
		            	h.REQUESTER_ID = :lcCode
		            AND h.DELIVERY_TYPE !='DIRECT'
			        AND (
			                S.STATUS = '已审核'
			            OR  S.STATUS = '已入库' )
			    )
			SELECT
			    *
			FROM
			    (
			        SELECT
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS id,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS name,
			            'root'                              AS parent,
			            ''                                  AS dtype,
			            ''                                  AS form_status
			        FROM
			            purchase p
			            WHERE
			            (p.FORM_TIME >= :sDate or :sDate is null)
						AND (p.FORM_TIME <= :eDate or :eDate is null)
			        GROUP BY
			            p.FORM_TIME
			        ORDER BY
			            p.FORM_TIME DESC) a
			UNION ALL
			SELECT
			    *
			FROM
			    (
			        SELECT
			            p.FORM_ID                           AS id,
			            p.FORM_ID                           AS name,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS parent,
			            p.DELIVERY_TYPE                     AS dtype,
			            form_status
			        FROM
			            purchase p
			        ORDER BY
			            SUBSTR(p.FORM_ID, 3) DESC )};
		List<Map> nodeLst = new ArrayList<Map>();
		while(unstorageIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", unstorageIter.id());
			node.put("name", unstorageIter.name());
			node.put("parent", unstorageIter.parent());
			node.put("dtype", unstorageIter.dtype());
			node.put("status", unstorageIter.form_status());
			nodeLst.add(node);
		}
		unstorageIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
	public List<Map> queryCFUnStorage(java.util.Date startDate, java.util.Date endDate,String cfCode) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		DefaultContext myCtx = getDefaultContext();
		UnstorageIter unstorageIter = null;
		#sql [myCtx] unstorageIter = {
			WITH
			    purchase AS
			    (
			        SELECT
			            h.FORM_TIME,
			            h.FORM_ID,
			            h.DELIVERY_TYPE,
			            s.STATUS AS form_status
			        FROM
			        :{Com_("D_T1_PURCHASING_HEADER")} h
			        LEFT JOIN
			        :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            s.FORM_ID = h.FORM_ID
			        AND s.IS_CURRENT = 1
			        WHERE
			            h.REQUESTER_ID = :cfCode
			        AND (
			                S.STATUS = '已审核'
			            OR  S.STATUS = '已入库' )
			    )
			SELECT
			    *
			FROM
			    (
			        SELECT
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS id,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS name,
			            'root'                              AS parent,
			            ''                                  AS dtype,
			            ''                                  AS form_status
			        FROM
			            purchase p
			            WHERE
			            (p.FORM_TIME >= :sDate or :sDate is null)
						AND (p.FORM_TIME <= :eDate or :eDate is null)
			        GROUP BY
			            p.FORM_TIME
			        ORDER BY
			            p.FORM_TIME DESC) a
			UNION ALL
			SELECT
			    *
			FROM
			    (
			        SELECT
			            p.FORM_ID                           AS id,
			            p.FORM_ID                           AS name,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS parent,
			            p.DELIVERY_TYPE                     AS dtype,
			            form_status
			        FROM
			            purchase p
			        ORDER BY
			            SUBSTR(p.FORM_ID, 3) DESC )};
		List<Map> nodeLst = new ArrayList<Map>();
		while(unstorageIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", unstorageIter.id());
			node.put("name", unstorageIter.name());
			node.put("parent", unstorageIter.parent());
			node.put("dtype", unstorageIter.dtype());
			node.put("status", unstorageIter.form_status());
			nodeLst.add(node);
		}
		unstorageIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
	public List<Map> queryCFUnStorage(java.util.Date startDate, java.util.Date endDate,String cfCode,String itemName) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		DefaultContext myCtx = getDefaultContext();
		UnstorageIter unstorageIter = null;
		#sql [myCtx] unstorageIter = {
				WITH
				 a AS (
				        SELECT DISTINCT
				            t.FORM_ID
				        FROM
				        :{Com_("D_T1_PURCHASING_DETAIL")} t
				        WHERE
				            1=1
				        AND (
				                t.ITEM_ID = :itemName
				            OR  t.ITEM_NAME = :itemName)
				        ORDER BY
				            t.FORM_ID
				    ),
				    purchase AS
				    (
				        SELECT
				            h.FORM_ID,
				            h.FORM_TIME,
				            h.DELIVERY_TYPE,
				            s.STATUS AS form_status
				        FROM
				        :{Com_("D_T1_PURCHASING_HEADER")} h
				        INNER JOIN
				        	a
				        ON
				             a.FORM_ID = h.FORM_ID
			        LEFT JOIN
			        :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            s.FORM_ID = h.FORM_ID
			        AND s.IS_CURRENT = 1
			        WHERE
			            h.REQUESTER_ID = :cfCode
			        AND (
			                S.STATUS = '已审核'
			            OR  S.STATUS = '已入库' )
			    )
			SELECT
			    *
			FROM
			    (
			        SELECT
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS id,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS name,
			            'root'                              AS parent,
			            ''                                  AS dtype,
			            ''                                  AS form_status
			        FROM
			            purchase p
			            WHERE
			            (p.FORM_TIME >= :sDate or :sDate is null)
						AND (p.FORM_TIME <= :eDate or :eDate is null)
			        GROUP BY
			            p.FORM_TIME
			        ORDER BY
			            p.FORM_TIME DESC) a
			UNION ALL
			SELECT
			    *
			FROM
			    (
			        SELECT
			            p.FORM_ID                           AS id,
			            p.FORM_ID                           AS name,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS parent,
			            p.DELIVERY_TYPE                     AS dtype,
			            form_status
			        FROM
			            purchase p
			        ORDER BY
			            SUBSTR(p.FORM_ID, 3) DESC )};
		List<Map> nodeLst = new ArrayList<Map>();
		while(unstorageIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", unstorageIter.id());
			node.put("name", unstorageIter.name());
			node.put("parent", unstorageIter.parent());
			node.put("dtype", unstorageIter.dtype());
			node.put("status", unstorageIter.form_status());
			nodeLst.add(node);
		}
		unstorageIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
	public List<Map> queryCFUnStorage(String cfCode) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		UnstorageIter unstorageIter = null;
		#sql [myCtx] unstorageIter = {
			WITH
			    purchase AS
			    (
			        SELECT
			            h.FORM_TIME,
			            h.FORM_ID,
			            h.DELIVERY_TYPE,
			            s.STATUS AS form_status
			        FROM
			        :{Com_("D_T1_PURCHASING_HEADER")} h
			        LEFT JOIN
			        :{Com_("D_T0_FORM_STATUS")} s
			        ON
			            s.FORM_ID = h.FORM_ID
			        AND s.IS_CURRENT = 1
			        WHERE
			            h.REQUESTER_ID = :cfCode
			        AND (
			                S.STATUS = '已审核'
			            OR  S.STATUS = '已入库' )
			    )
			SELECT
			    *
			FROM
			    (
			        SELECT
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS id,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS name,
			            'root'                              AS parent,
			            ''                                  AS dtype,
			            ''                                  AS form_status
			        FROM
			            purchase p
			        GROUP BY
			            p.FORM_TIME
			        ORDER BY
			            p.FORM_TIME DESC) a
			UNION ALL
			SELECT
			    *
			FROM
			    (
			        SELECT
			            p.FORM_ID                           AS id,
			            p.FORM_ID                           AS name,
			            TO_CHAR( p.FORM_TIME, 'yyyy-MM-dd') AS parent,
			            p.DELIVERY_TYPE                     AS dtype,
			            form_status
			        FROM
			            purchase p
			        ORDER BY
			            SUBSTR(p.FORM_ID, 3) DESC )};
		List<Map> nodeLst = new ArrayList<Map>();
		while(unstorageIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", unstorageIter.id());
			node.put("name", unstorageIter.name());
			node.put("parent", unstorageIter.parent());
			node.put("dtype", unstorageIter.dtype());
			node.put("status", unstorageIter.form_status());
			nodeLst.add(node);
		}
		unstorageIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}	
	#sql private iterator crossDetailIter(String form_id,
			String item_id,
			String item_name,
			String item_dimension,
			String item_specification,
			String item_category,
			Double item_count,Double sum_item_count,
			Double item_unit_price,
			Double pay_amt,Double receive_price,Double receive_amt,
			Date expired_time, Double out_receive_rate, Double received_count);
	
	public List<InputDetail> queryCrossDetail(String pFormId,String supplierId)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		crossDetailIter detailIter = null;
		#sql [myCtx] detailIter = {WITH
			    item AS
			    (
			        SELECT
			            FORM_ID,
			            ITEM_ID,
			            ITEM_NAME,
			            ITEM_DIMENSION,
			            ITEM_SPECIFICATION,
			            ITEM_CATEGORY,
			            EXPIRED_TIME,
			            SUM(d.ITEM_COUNT)  AS ITEM_COUNT
			        FROM
			        :{Com_("D_T1_PURCHASING_DETAIL")} d
			        WHERE
			            d.FORM_ID =:pFormId
			        GROUP BY
			            FORM_ID,
			            ITEM_ID,
			            ITEM_NAME,
			            ITEM_DIMENSION,
			            ITEM_SPECIFICATION,
			            ITEM_CATEGORY,
			            EXPIRED_TIME,
			        ORDER BY
			            d.ITEM_ID
			    )
			    ,
			    instore AS --查询已入库的数量
			    (
			        SELECT
			            id.ITEM_ID,
			            SUM(id.RECEIVE_COUNT) AS RECEIVED_COUNT
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        LEFT JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            id.FORM_ID = ih.FORM_ID
			        WHERE
			            ih.FORM_REF_ID = :pFormId
			        GROUP BY
			            id.ITEM_ID
			    )
			SELECT
			    i.*,
			    e.RECEIVED_COUNT,
			    u.OUT_RECEIVE_RATE,
			    i.ITEM_COUNT                AS SUM_ITEM_COUNT,
			    p.ITEM_PRICE                AS RECEIVE_PRICE,
			    p3.ITEM_PRICE               AS ITEM_UNIT_PRICE,
			    p.ITEM_PRICE* i.ITEM_COUNT  AS RECEIVE_AMT,
			    p3.ITEM_PRICE* i.ITEM_COUNT AS PAY_AMT
			FROM
			    item i
			LEFT JOIN
			    instore e
			ON
			    i.ITEM_ID = e.ITEM_ID
			INNER JOIN
			:{Com_("D_T2_DELIVERY_UNIT")} u
			ON
			    u.ITEM_ID = i.ITEM_ID
			LEFT JOIN
			:{Com_("D_T2_ITEM_PRICE")} p
			ON
			    p.PRICE_TYPE = 'SUPPLIER'
			AND p.SUPPLIER_ID = :supplierId
			AND p.ITEM_ID = i.ITEM_ID
			AND p.IS_CURRENT =1
			LEFT JOIN
			:{Com_("D_T2_ITEM_PRICE")} p2
			ON
			    p2.PRICE_TYPE = 'PURCHASE'
			AND p2.ITEM_ID = i.ITEM_ID
			AND p2.IS_CURRENT =1
			LEFT JOIN
			:{Com_("D_T2_ITEM_PRICE")} p3
			ON
			    p3.PRICE_TYPE = 'BENCHMARK'
			AND p3.ITEM_ID = i.ITEM_ID
			AND p3.IS_CURRENT =1};
		List<InputDetail> detailLst = processCrossDetailIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}

	#sql private iterator DetailIter(String form_id,
			String item_id,
			String item_name,
			String item_dimension,
			String item_specification,
			String item_category,
			Double item_count,Double sum_item_count,
			Double item_unit_price,Double supply_cycle,
			String receiver_id,String receiver,
			Double pay_amt,Double receive_price,Double receive_amt,
			Date expired_time, Double out_receive_rate, Double received_count, String work_order_id);
	
	public List<InputDetail> queryUnifiedDetail(String pFormId ,String supplierId,String lcCode)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		DetailIter detailIter = null;
		#sql [myCtx] detailIter = {
				WITH
			    item AS
			    (
			        SELECT
			            FORM_ID,
			            ITEM_ID,
			            SUM(d.ITEM_COUNT) AS SUM_ITEM_COUNT
			        FROM
			        :{Com_("D_T1_PURCHASING_DETAIL")} d
			        WHERE
			        	d.FORM_ID = :pFormId
			        GROUP BY
			            FORM_ID,
			            ITEM_ID
			        ORDER BY
			            d.ITEM_ID
			    ),
			    instore AS --查询已入库的数量
			    (
			        SELECT
			            id.ITEM_ID,
			            SUM(id.RECEIVE_COUNT) AS RECEIVED_COUNT
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        LEFT JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            id.FORM_ID = ih.FORM_ID
			        WHERE
			            ih.FORM_REF_ID = :pFormId
			        GROUP BY
			            id.ITEM_ID
			    )
			SELECT
			    d.FORM_ID,
			    d.ITEM_ID,
			    d.ITEM_NAME,
			    d.ITEM_DIMENSION,
			    d.ITEM_SPECIFICATION,
			    d.ITEM_CATEGORY,
			    d.ITEM_COUNT,
			    d.RECEIVER_ID,
			    d.RECEIVER,
			    d.EXPIRED_TIME,
			    u.OUT_RECEIVE_RATE,
			    i.RECEIVED_COUNT,
			    ic.SUM_ITEM_COUNT-nvl(i.RECEIVED_COUNT,0) SUM_ITEM_COUNT,
			    t.SUPPLY_CYCLE,
			    NVL(p.ITEM_PRICE,p2.ITEM_PRICE)                   AS RECEIVE_PRICE,
			    p3.ITEM_PRICE                  AS ITEM_UNIT_PRICE,
			    p.ITEM_PRICE* d.ITEM_COUNT  AS RECEIVE_AMT,
			    p3.ITEM_PRICE* d.ITEM_COUNT AS PAY_AMT,
			    '' WORK_ORDER_ID
			FROM
			:{Com_("D_T1_PURCHASING_DETAIL")} d
			LEFT JOIN
			:{Com_("D_T2_DELIVERY_UNIT")} u
			ON
			    u.ITEM_ID = d.ITEM_ID
			LEFT JOIN
			    instore i
			ON
			    i.ITEM_ID = d.ITEM_ID
			LEFT JOIN
				item ic
			ON
			    ic.ITEM_ID = d.ITEM_ID
		    Left JOIN 
		    :{Com_("D_T2_SUPPLY_CYCLE")} t
		    ON
		       t.ITEM_ID = d.ITEM_ID
		       AND t.BRANCH_ID =:lcCode
    		LEFT JOIN
    		:{Com_("D_T2_ITEM_PRICE")} p
	    	ON
	    	    p.PRICE_TYPE = 'SUPPLIER'
	    	AND p.SUPPLIER_ID = :supplierId
	    	AND p.ITEM_ID = d.ITEM_ID
	    	AND p.IS_CURRENT =1
	    	LEFT JOIN
	    	:{Com_("D_T2_ITEM_PRICE")} p2
	    	ON
	    	    p2.PRICE_TYPE = 'PURCHASE'
	    	AND p2.ITEM_ID = d.ITEM_ID
	    	AND p2.IS_CURRENT =1
	    	LEFT JOIN
	    	:{Com_("D_T2_ITEM_PRICE")} p3
	    	ON
	    	    p3.PRICE_TYPE = 'BENCHMARK'
	    	AND p3.ITEM_ID = d.ITEM_ID
	    	AND p3.IS_CURRENT =1
			WHERE
			    d.FORM_ID = :pFormId
			ORDER BY
			 DECODE(d.RECEIVER_ID,NULL,'',d.RECEIVER_ID)  ,DECODE(d.ITEM_ID,NULL,'',d.ITEM_ID)
		};
		List<InputDetail> detailLst = processDetailIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	public List<InputDetail> queryUnOrder(String pFormId ,String supplierId,String lcCode)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		DetailIter detailIter = null;
		#sql [myCtx] detailIter = {
				WITH
			    DELIVERY AS --已出货数
			    (
			        SELECT DISTINCT
			            sh.FORM_REF_ID FORM_ID,
			            sd.ITEM_ID,
			            NVL(SUM(sd.DELIVERY_COUNT),0) DELIVERY_COUNT
			        FROM
			        :{Com_("D_T1_SHIPPING_HEADER")} sh
			        INNER JOIN
			        :{Com_("D_T1_SHIPPING_DETAIL")} sd
			        ON
			            sd.FORM_ID = sh.FORM_ID
			        AND sh.PROVIDER_ID='F00'
    				WHERE
    	            sh.FORM_REF_ID= :pFormId
    	            AND sh.AUDIT_TIME IS NOT NULL
			        GROUP BY
			            (sh.FORM_REF_ID, sd.ITEM_ID)
			    )
			    ,
			    RECEIVE AS --已入库数
			    (
			        SELECT DISTINCT
			            d.FORM_ID,
			            d.ITEM_ID,
			            NVL(SUM(id.RECEIVE_COUNT),0) RECEIVE_COUNT
			        FROM
			        :{Com_("D_T1_PURCHASING_DETAIL")} d
			        INNER JOIN
			        :{Com_("D_T1_COLLECT_REF_FORM")} f
			        ON
			            f.REF_FORM_ID=d.FORM_ID
			        AND d.ITEM_ID = f.ITEM_ID
			        INNER JOIN
			        :{Com_("D_T1_ARRENGMENT_DETAIL")} ad
			        ON
			            f.COLLECT_FORM_ID=ad.FORM_ID
			        AND ad.ITEM_ID =f.ITEM_ID
			        INNER JOIN
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        ON
			            ih.FORM_REF_ID=ad.WORK_ORDER_ID
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            id.FORM_ID = ih.FORM_ID
    				WHERE
    			    d.FORM_ID = :pFormId
		    		AND ih.AUDIT_TIME IS NOT NULL
			        GROUP BY
			            ( d.FORM_ID, d.ITEM_ID)
			    )
			SELECT
			DISTINCT
			    d.FORM_ID,
			    d.ITEM_ID,
			    d.ITEM_NAME,
			    d.ITEM_DIMENSION,
			    d.ITEM_SPECIFICATION,
			    d.ITEM_CATEGORY,
			    d.ITEM_COUNT,
			    d.RECEIVER_ID,
			    d.RECEIVER,
			    d.EXPIRED_TIME,
			    u.OUT_RECEIVE_RATE,
			    NVL(de.DELIVERY_COUNT,0) RECEIVED_COUNT,
			    NVL(r.RECEIVE_COUNT,0)   SUM_ITEM_COUNT,
			    t.SUPPLY_CYCLE,
			    NVL(p.ITEM_PRICE,p2.ITEM_PRICE)                    AS RECEIVE_PRICE,
			    p3.ITEM_PRICE                  AS ITEM_UNIT_PRICE,
			    p.ITEM_PRICE* d.ITEM_COUNT  AS RECEIVE_AMT,
			    p3.ITEM_PRICE* d.ITEM_COUNT AS PAY_AMT,
			    ar.WORK_ORDER_ID
			FROM
			:{Com_("D_T1_PURCHASING_DETAIL")} d
			INNER JOIN
			    RECEIVE r
			ON
			    d.ITEM_ID = r.ITEM_ID
			LEFT JOIN
			    DELIVERY de
			ON
			    r.ITEM_ID =de.ITEM_ID
			INNER JOIN
			:{Com_("D_T1_COLLECT_REF_FORM")} f
			ON
			    f.ITEM_ID =d.ITEM_ID
			AND f.REF_FORM_ID=d.FORM_ID
			INNER JOIN
			:{Com_("D_T1_ARRENGMENT_DETAIL")} ar
			ON
			    ar.FORM_ID=f.COLLECT_FORM_ID
    		AND ar.ITEM_ID = d.ITEM_ID
			LEFT JOIN
			:{Com_("D_T2_DELIVERY_UNIT")} u
			ON
			    u.ITEM_ID = d.ITEM_ID
		    Left JOIN 
		    :{Com_("D_T2_SUPPLY_CYCLE")} t
		    ON
		       t.ITEM_ID = d.ITEM_ID
		       AND t.BRANCH_ID =:lcCode
    		LEFT JOIN
    		:{Com_("D_T2_ITEM_PRICE")} p
	    	ON
	    	    p.PRICE_TYPE = 'SUPPLIER'
	    	AND p.SUPPLIER_ID = :supplierId
	    	AND p.ITEM_ID = d.ITEM_ID
	    	AND p.IS_CURRENT =1
	    	LEFT JOIN
	    	:{Com_("D_T2_ITEM_PRICE")} p2
	    	ON
	    	    p2.PRICE_TYPE = 'PURCHASE'
	    	AND p2.ITEM_ID = d.ITEM_ID
	    	AND p2.IS_CURRENT =1
	    	LEFT JOIN
	    	:{Com_("D_T2_ITEM_PRICE")} p3
	    	ON
	    	    p3.PRICE_TYPE = 'BENCHMARK'
	    	AND p3.ITEM_ID = d.ITEM_ID
	    	AND p3.IS_CURRENT =1
			WHERE
			    d.FORM_ID = :pFormId
    		AND NVL(de.DELIVERY_COUNT,0) <NVL(r.RECEIVE_COUNT,0)
			ORDER BY
			 DECODE(d.RECEIVER_ID,NULL,'',d.RECEIVER_ID)  ,DECODE(d.ITEM_ID,NULL,'',d.ITEM_ID)
		};
		List<InputDetail> detailLst = processDetailIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	private List<InputDetail> processDetailIter(DetailIter detailIter) 
			throws SQLException {
		List<InputDetail> detailLst = new ArrayList<InputDetail>();
		while(detailIter.next()) {
			InputDetail detail = new InputDetail();
			detail.setFormId(detailIter.form_id());
			detail.setItemId(detailIter.item_id());
			detail.setItemName(detailIter.item_name());
			detail.setItemDimension(detailIter.item_dimension());
			detail.setItemSpecification(detailIter.item_specification());
			detail.setItemCategory(detailIter.item_category());
			detail.setSumItemCount(detailIter.sum_item_count());
			detail.setOrderCount(detailIter.item_count());
			detail.setReceivedCount(detailIter.received_count());
			detail.setItemUnitPrice(detailIter.item_unit_price());
			detail.setPayAmt(detailIter.pay_amt());
			detail.setSupplyCycle(detailIter.supply_cycle());
			detail.setReceivePrice(detailIter.receive_price());
			detail.setReceiveAmt(detailIter.receive_amt());
			detail.setExpiredTime(SqlDateUtil.getUtilDate(detailIter.expired_time()));
			detail.setOutReceiveRate(detailIter.out_receive_rate());
			detail.setReceive(detailIter.receiver());
			detail.setReceiveId(detailIter.receiver_id());
			detail.setWorkOrderId(detailIter.work_order_id());
			detailLst.add(detail);
		}
		return detailLst;
	}
	
	private List<InputDetail> processCrossDetailIter(crossDetailIter detailIter) 
			throws SQLException {
		List<InputDetail> detailLst = new ArrayList<InputDetail>();
		while(detailIter.next()) {
			InputDetail detail = new InputDetail();
			detail.setFormId(detailIter.form_id());
			detail.setItemId(detailIter.item_id());
			detail.setItemName(detailIter.item_name());
			detail.setItemDimension(detailIter.item_dimension());
			detail.setItemSpecification(detailIter.item_specification());
			detail.setItemCategory(detailIter.item_category());
			detail.setSumItemCount(detailIter.sum_item_count());
			detail.setOrderCount(detailIter.item_count());
			detail.setReceivedCount(detailIter.received_count());
			detail.setItemUnitPrice(detailIter.item_unit_price());
			detail.setPayAmt(detailIter.pay_amt());
			detail.setReceivePrice(detailIter.receive_price());
			detail.setReceiveAmt(detailIter.receive_amt());
			detail.setExpiredTime(SqlDateUtil.getUtilDate(detailIter.expired_time()));
			detail.setOutReceiveRate(detailIter.out_receive_rate());
			detailLst.add(detail);
		}
		return detailLst;
	}
}