/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on 2014.8.6 by cjt
 * Last edited on Nov 20, 2014 by liyzh
 * 
 * 说明： 读取部门门店基本信息
 */
package logic.store;

import java.sql.Date;
import java.text.SimpleDateFormat;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import logic.NoConnection;
import logic.pool.ConnectionPool;
import pojo.store.Branch;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.DateTimeUtil;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
//import com.tanry.framework.util.constant.BranchType;
import com.tanry.framework.util.enums.BranchTypeEnum;

public class BranchBean extends ConnectionPool {
	
	/**
	 * companyId由调用者通过参数指定,by cjt
	 */
	public int saveEntity(Branch branch, String comId)throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getComContext(comId);
		return saveEntityImp(branch, myCtx);
	}
	
	/**
	 * companyId默认通过session访问,by cjt
	 */
	public int saveEntity(Branch branch)throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		return saveEntityImp(branch, myCtx);
	}
	
	private int saveEntityImp(Branch branch, DefaultContext myCtx)throws NoPrivilegeException, SQLException, NoConnection {
		String branchId = branch.getBranchId();
		String branchName = branch.getBranchName();
		String queryCode = branch.getQueryCode();
		String branchType = branch.getBranchType();
		String priceType = branch.getPriceType();
		String branchAddress = branch.getBranchAddress();
		String contactMan = branch.getContactMan();
		String email = branch.getEmail();
		String telephone = branch.getTelephone();
		String fax = branch.getFax();
		String remark = branch.getRemark();
		Integer enabled = branch.getEnabled();
		String park = branch.getPark();
		String tag = branch.getRemark();
		double lon = branch.getLon();
		double lat = branch.getLat();
		Date businessDate = SqlDateUtil.getSqlDate(branch.getBusinessDate());
		if(businessDate == null){ //如果没指定营业日期，则取当前日期
			String dtfmt = DateTimeUtil.DEFAULT_DATE_FORMAT;
			businessDate = SqlDateUtil.getSqlDate(DateTimeUtil.parse(DateTimeUtil.getDateTime(new java.util.Date(), dtfmt), dtfmt));
		}
		
		#sql [myCtx] {
			INSERT INTO :{Com_("D_T2_BRANCH")} (BRANCH_ID, BRANCH_NAME, QUERY_CODE, BRANCH_ADDRESS, CONTACT_MAN, 
					EMAIL, TELEPHONE, FAX, BRANCH_TYPE, PRICE_TYPE, REMARK, ENABLED, PARK, TAG, LON, LAT, BUSINESS_DATE) 
				VALUES (:branchId, :branchName, :queryCode, :branchAddress, :contactMan, :email, :telephone, 
						:fax, :branchType, :priceType, :remark, :enabled, :park, :tag, :lon, :lat, :businessDate)
		};
		
		closeDefaultContext(myCtx);

		return 1;
	}
	
	/**
	 * companyId由调用者通过参数指定,by cjt
	 */
	public int updateEntity(String oldBranchId, Branch branch, String comId)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getComContext(comId);
		return updateEntityImp(oldBranchId, branch, myCtx);
	}
		
	/**
	 * companyId默认通过session访问,by cjt
	 */
	public int updateEntity(String oldBranchId, Branch branch) 
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		return updateEntityImp(oldBranchId, branch, myCtx);
	}
	
	private int updateEntityImp(String oldBranchId, Branch branch, DefaultContext myCtx)
			throws NoPrivilegeException, SQLException, NoConnection {
		
		String branchId = branch.getBranchId();
		String branchName = branch.getBranchName();
		String queryCode = branch.getQueryCode();
		String branchType = branch.getBranchType();
		String priceType = branch.getPriceType();
		String branchAddress = branch.getBranchAddress();
		String contactMan = branch.getContactMan();
		String email = branch.getEmail();
		String telephone = branch.getTelephone();
		String fax = branch.getFax();
		String remark = branch.getRemark();
		Integer enabled = branch.getEnabled();
		String park = branch.getPark();
		String tag = branch.getRemark();
		double lon = branch.getLon();
		double lat = branch.getLat();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T2_BRANCH")}
			SET
			    BRANCH_ID = :branchId,
			    BRANCH_NAME = :branchName,
			    QUERY_CODE = :queryCode,
			    PRICE_TYPE = :priceType,
			    BRANCH_ADDRESS = :branchAddress,
			    CONTACT_MAN = :contactMan,
			    EMAIL = :email,
			    TELEPHONE = :telephone,
			    FAX = :fax,
			    REMARK = :remark,
			    ENABLED = :enabled,
			    PARK = :park,
			    TAG = :tag,
			    LON = :lon,
			    LAT = :lat
			WHERE 
				BRANCH_ID = :oldBranchId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	/**
	 * 是否包含该项,by cjt
	 */
	public boolean containsEntity(String branchId, String branchType, String comId)
			throws NoPrivilegeException, SQLException, NoPrivilegeException{
		DefaultContext myCtx = getComContext(comId);
		int count = 0;
		#sql [myCtx] {
			select count(*) into :count
			from :{Com_("D_T2_BRANCH")}
			where BRANCH_ID = :branchId
			and BRANCH_TYPE = :branchType
		};

		closeDefaultContext(myCtx);
		return count > 0;
	}

	public int deleteEntity(String branchId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T2_BRANCH")}
			WHERE
				BRANCH_ID = :branchId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	// the branch has contain items with  supplier or not 
	public boolean containsItemsWithSupplier(String branchId)
			throws NoPrivilegeException, SQLException, NoPrivilegeException{
		DefaultContext myCtx = getDefaultContext();
		int count = 0;
		try {
			#sql [myCtx] {
				SELECT
				    COUNT(*)
				INTO
				    :count
				FROM
					:{Com_("D_T2_SUPPLIER_BRANCH_ITEM")} i 
				WHERE
				    i.BRANCH_ID = :branchId};
		} catch (Exception e) {
		}
		
		closeDefaultContext(myCtx);
		return count > 0;
	}
	
	// the supplier has contain items with  branch or not 
		public boolean containsItemsWithBranch(String supplierId)
				throws NoPrivilegeException, SQLException, NoPrivilegeException{
			DefaultContext myCtx = getDefaultContext();
			int count = 0;
			try {
				#sql [myCtx] {
					SELECT
					    COUNT(*)
					INTO
					    :count
					FROM
						:{Com_("D_T2_SUPPLIER_BRANCH_ITEM")} i 
					WHERE
					    i.SUPPLIER_ID = :supplierId};
			} catch (Exception e) {
			}
			
			closeDefaultContext(myCtx);
			return count > 0;
		}
		
	
	/**
	 * 启停用部门
	 */
	public int enableBranch(String branchId, Integer enabled)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T2_BRANCH")}
			SET
			   	ENABLED = :enabled
			WHERE 
				BRANCH_ID = :branchId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	#sql public static iterator BranchIter(String branch_id, String branch_name, 
		String query_code, String branch_type, String price_type, String branch_address, String email, 
		String telephone, String fax, String remark, String contact_man, Integer enabled, Date business_date, 
		String region_id, String region_name);

	public Branch GetBranchById(String id) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Branch branch = null;
		DefaultContext myCtx = getDefaultContext();
		BranchIter branchIter = null;
		#sql [myCtx] branchIter = {
			SELECT
		    	b.*,
			    '' region_id,
			    '' region_name
			FROM
			:{Com_("d_t2_branch")} b
			WHERE
			    branch_id = :id
		};
		
		List<Branch> branchLst = processIter(branchIter);
		branchIter.close();
		closeDefaultContext(myCtx);
		
		if (branchLst !=null && !branchLst.isEmpty()) {
			return branchLst.get(0);
		}

		return null;
	}
	
	/**
	 * 根据部门类型以及部门ID或者部门名称作为关键字进行查询
	 */
	public List<Branch> queryByTypeName(BranchTypeEnum branchType, String branchName) 
			throws NoPrivilegeException,SQLException,NoConnection {
		return queryByTypeName(branchType,branchName,null);
	}
	
	public List<Branch> queryByTypeName(BranchTypeEnum branchType, String branchName,String queryAllFlag) 
			throws NoPrivilegeException,SQLException,NoConnection {
		branchName = "%" + branchName + "%";
		String query = formBranchTypeSql(branchType,queryAllFlag);
		
		DefaultContext myCtx = getDefaultContext();
		BranchIter branchIter = null;
		#sql [myCtx] branchIter = {
			SELECT
			    b.*,
			    '' region_id,
			    '' region_name
			FROM
			:{Com_("D_T2_BRANCH")} b
			WHERE
				1=1   :{query :: }
			AND (
			        BRANCH_ID LIKE :branchName
			    OR  BRANCH_NAME LIKE :branchName)
			ORDER BY
			    BRANCH_ID};
		List<Branch> branchLst = processIter(branchIter);
		branchIter.close();
		closeDefaultContext(myCtx);
	
		return branchLst;
	}

	/**
	 * 查询餐厅及对应的分组信息
	 */
	public List<Branch> queryRestaurant(BranchTypeEnum branchType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		List<Branch> result = new ArrayList<Branch>();
		DefaultContext myCtx = getDefaultContext();
		BranchIter branchIter = null;
		String branchTypeStr = branchType.toString();
		#sql [myCtx] branchIter = {
			SELECT
			    b.*,
			    rb.REGION_ID,
			    r.REGION_NAME
			FROM
				:{Com_("D_T2_BRANCH")} b
			LEFT JOIN
				:{Com_("D_T2_DELIVERY_REGION_BRANCH")} rb
			ON
			    rb.BRANCH_ID = b.BRANCH_ID
			LEFT JOIN
				:{Com_("D_T2_DELIVERY_REGION")} r
			ON
			    r.REGION_ID = rb.REGION_ID
			WHERE
			    b.BRANCH_TYPE = :branchTypeStr
			ORDER BY
				1
		};
		List<Branch> branchLst = processIter(branchIter);
		branchIter.close();
		closeDefaultContext(myCtx);
		return branchLst;
	}

	private List<Branch> processIter(BranchIter branchIter) 
			throws SQLException {
		List<Branch> branchLst = new ArrayList<Branch>();
		while(branchIter.next()) {
			Branch branch = new Branch();
			branch.setBranchId(branchIter.branch_id());
			branch.setBranchName(branchIter.branch_name());
			branch.setQueryCode(branchIter.query_code());
			branch.setBranchType(branchIter.branch_type());
			branch.setPriceType(branchIter.price_type());
			branch.setBranchAddress(branchIter.branch_address());
			branch.setEmail(branchIter.email());
			branch.setTelephone(branchIter.telephone());
			branch.setFax(branchIter.fax());
			branch.setRemark(branchIter.remark());
			branch.setContactMan(branchIter.contact_man());
			branch.setEnabled(branchIter.enabled());
			branch.setRegionId(branchIter.region_id());
			branch.setRegionName(branchIter.region_name());
			branch.setBusinessDate(SqlDateUtil.getUtilDate(branchIter.business_date()));
			branchLst.add(branch);
		}
		return branchLst;
	}
	
	//根据BranchTypeEnum构建查询门店类型的SQL语句
	private String formBranchTypeSql(BranchTypeEnum branchType,String queryAllFlag){
		String query = " AND BRANCH_TYPE = 'RESTAURANT'";
		switch(branchType){
			case R_Out:
				query = " AND BRANCH_TYPE IN('RESTAURANT','OUTERORDER')";
				break;
			case S_Center:
				query = " AND BRANCH_TYPE IN('SUPPLIER','CENTRALFACTORY')";
				break;
			case R_C_L:
				query = " AND BRANCH_TYPE IN('RESTAURANT','CENTRALFACTORY','LOGISTICSCENTER')";
				break;
			case R_F_O:
				query = " AND BRANCH_TYPE IN('RESTAURANT','FRANCHISEE','OUTERORDER')";
				break;
			default:
				query = " AND BRANCH_TYPE = '" + branchType.toString() + "'";
				break;
		}
		
		if(TextUtil.isEmpty(queryAllFlag)){
			 query += " AND b.ENABLED = 1 ";
		}
		
		return query;
	}
	
	//根据BranchTypeEnum构建查询门店类型的SQL语句
		private String formBranchTypeSql(String queryHasComma,String queryAllFlag){
			String query = " AND BRANCH_TYPE IN ('" + queryHasComma.replaceAll(",", "','") + "')";
			
			if(TextUtil.isEmpty(queryAllFlag)){
				 query += " AND b.ENABLED = 1 ";
			}
			
			return query;
		}
	
	//门店简单信息-------------------------------------------------------------------------------------------
	#sql private iterator ShopIterator(
			String BRANCH_ID, 
			String BRANCH_NAME, 
			String QUERY_CODE,
			String BRANCH_TYPE);

	/**
	 * 根据部门类型查询门店简单信息，如果branchType为null，则默认查询餐厅
	 */
	public List<Map> listShopByType(BranchTypeEnum branchType) throws NoPrivilegeException,SQLException,NoConnection	{
		String query = formBranchTypeSql(branchType,null);
		
		DefaultContext myCtx = getDefaultContext();
		ShopIterator shopItr = null;
		#sql [myCtx] shopItr = {
			SELECT
			    BRANCH_ID,
			    BRANCH_NAME,
			    QUERY_CODE,
			    BRANCH_TYPE
			FROM
				:{Com_("D_T2_BRANCH")} b
			WHERE
			  1=1 :{query ::}
			ORDER BY
				BRANCH_ID
		};
		
		List<Map> shopLst = new ArrayList();
		try {
			while(shopItr.next()) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("code", shopItr.BRANCH_ID());
				map.put("name","["+shopItr.BRANCH_ID()+"]" + shopItr.BRANCH_NAME()); 
				map.put("qcode", shopItr.QUERY_CODE()); 
				map.put("branchType", shopItr.BRANCH_TYPE()); 
				shopLst.add(map);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		shopItr.close();
		closeDefaultContext(myCtx);

		return shopLst;
	}
	
	public List<Map> listShopByType(String queryHasComma) throws NoPrivilegeException,SQLException,NoConnection	{
		String query = formBranchTypeSql(queryHasComma,null);
		
		DefaultContext myCtx = getDefaultContext();
		ShopIterator shopItr = null;
		#sql [myCtx] shopItr = {
			SELECT
			    BRANCH_ID,
			    BRANCH_NAME,
			    QUERY_CODE,
			    BRANCH_TYPE
			FROM
				:{Com_("D_T2_BRANCH")} b
			WHERE
				1=1	:{query :: }
			ORDER BY
				BRANCH_ID
		};
		
		List<Map> shopLst = new ArrayList();
		try {
			while(shopItr.next()) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("code", shopItr.BRANCH_ID());
				map.put("name","["+shopItr.BRANCH_ID()+"]" + shopItr.BRANCH_NAME()); 
				map.put("qcode", shopItr.QUERY_CODE()); 
				map.put("branchType", shopItr.BRANCH_TYPE()); 
				shopLst.add(map);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		shopItr.close();
		closeDefaultContext(myCtx);

		return shopLst;
	}
	
	/**
	 * 根据部门ID查询部门信息，返回一个列表对象（主要是为了考虑与以前的写法相兼容）
	 */
	public List<Map> queryById(String branchId) throws NoPrivilegeException,SQLException,NoConnection	{
		DefaultContext myCtx = getDefaultContext();
		ShopIterator shopItr = null;
		#sql [myCtx] shopItr = {
			SELECT
			    BRANCH_ID,
			    BRANCH_NAME,
			    QUERY_CODE,
			    BRANCH_TYPE
			FROM
			:{Com_("D_T2_BRANCH")}
			WHERE
				BRANCH_ID = :branchId
		};
		
		List<Map> shopLst = new ArrayList();
		while(shopItr.next()) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("code", shopItr.BRANCH_ID());
			map.put("name","[" + shopItr.BRANCH_ID() + "]" + shopItr.BRANCH_NAME()); 
			map.put("qcode", shopItr.QUERY_CODE()); 
			map.put("branchType", shopItr.BRANCH_TYPE()); 
			shopLst.add(map);
			break;
		}
		shopItr.close();
		closeDefaultContext(myCtx);
		return shopLst;
	}
	
	/**
	 * 设置部门营业时间
	 */
	public void setBusinessDate(String branchId, java.util.Date newBusinessDate)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		Date sBusinessDate = SqlDateUtil.getSqlDate(newBusinessDate);

		#sql [myCtx] {
			UPDATE 
				:{Com_("D_T2_BRANCH")}
			SET
			    BUSINESS_DATE = :sBusinessDate
			WHERE
			    BRANCH_ID = :branchId
		};
		closeDefaultContext(myCtx);
	}
	
	/**
	 * 获取餐厅的最大营业时间
	 */
	public java.util.Date getMaxBusinessDate()
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		Date businessDate = null;
		
		#sql [myCtx] {
		SELECT
		    MAX(b.BUSINESS_DATE)
		INTO
		    : businessDate
		FROM
			:{Com_("D_T2_BRANCH")} b
		WHERE
		    b.BRANCH_TYPE = 'RESTAURANT'
		};
		closeDefaultContext(myCtx);
		
		return SqlDateUtil.getUtilDate(businessDate);
	}
}