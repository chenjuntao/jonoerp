 
package logic.store;

import sqlj.runtime.*;
import sqlj.runtime.ref.*;
import java.sql.*;
import oracle.sql.*;
import oracle.sqlj.runtime.*;
import oracle.jdbc.driver.*;
import java.util.*;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import logic.pool.ConnectionPool;
import logic.*;
import com.tanry.framework.acl.*;
import pojo.businessquery.PresentBill;

public class PresentBean extends ConnectionPool
{
	/**
	 * -------------detail--------------------
	 */
	#sql public static iterator DetailIterator(
		    String businessDate,
			String table,
			String billC,
			String period,
			String shift,
			String foodN,
			String unit,
			float presentAmount,
			float price,
			float presentPrice,
			float extracPrice,
			String presentMan,
			String presentWhy,
			String shopC,
			String shopN,
			String bigC,
			String bigN,
			String smallC,
			String smallN
			);
	
	#sql public static iterator DetailSumIterator(float presentAmount,float presentPrice,float extracPrice);
	
	/**
	 * -------------head--------------------
	 */
	#sql public static iterator HeadIterator(
		    String businessDate,
			String table,
			String billC,
			String period,
			String shift,
			float presentAmount,
			float presentPrice,
			String shopC,
			String shopN
			);
	
	#sql public static iterator HeadSumIterator(float presentAmount,float presentPrice);
	
	public PresentBean()
	{
	}
	
	public PresentBill getDetailSum(String startDate,String endDate,String shopC,String period, String shift)
			throws NoPrivilegeException,SQLException,NoConnection	{
		
		PresentBill presentBean = new PresentBill();
		DefaultContext myCtx = getDefaultContext();
		DetailSumIterator detailSumIterator = null;
		if (myCtx != null)
		{
			#sql [myCtx] detailSumIterator = {
			SELECT
						  CASE
					        WHEN SUM(presentAmount) IS NULL
					        THEN 0
					        ELSE SUM(presentAmount)
					    END presentAmount,
					    CASE
					        WHEN SUM(presentPrice) IS NULL
					        THEN 0
					        ELSE SUM(presentPrice)
					    END presentPrice,
					    CASE
					        WHEN SUM(extracPrice) IS NULL
					        THEN 0
					        ELSE SUM(extracPrice)
					    END extracPrice
				    FROM
				        (
				            SELECT
				                TO_CHAR(DBUSINESS, 'yyyy-MM-dd') businessDate,
				                b.cBranch_C                      shopC,
				                b.cTable_N                       table,
				                b.cBill_C                        billC,
				                bs.cFood_C                       foodC,
				                b.cPeriod_N,
				                b.cShift_N,
				                bs.sUnit           unit,
				                bs.nQty            presentAmount ,
				                bs.nPrc            price,
				                bs.nAmt            presentPrice,
				                bs.cPresentBackMan 	   presentMan,
				                bs.sRetSendRemark  presentWhy
				            FROM
				            :{Com_("d_t_food_bill")} b
				            LEFT JOIN
				            :{Com_("d_t_food_Bills")} bs
				            ON
				                b.cBill_C = bs.cBill_C
				            WHERE
				            	b.cBranch_C LIKE :shopC
		                    AND b.CPERIOD_N LIKE :period
		                    AND b.CSHIFT_N LIKE :shift
				            AND bs.eRetSendFlag = '赠送'
				            AND TO_CHAR(DBUSINESS, 'yyyy-MM-dd') IN
				                (
				                    SELECT
				                        TO_CHAR(DBUSINESS, 'yyyy-MM-dd')
				                    FROM
				                    :{Com_("d_t_food_bill")} d
				                    WHERE
				                        DBUSINESS >= to_date(:startDate, 'yyyy-MM-dd')
				                    AND DBUSINESS <= to_date(:endDate,'yyyy-MM-dd')
				                    GROUP BY
				                        TO_CHAR(DBUSINESS, 'yyyy-MM-dd'))
				            GROUP BY
				                TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
				                b.cBranch_C,
				                b.cTable_N,
				                b.cBill_C,
				                bs.cFood_C ,
				                b.cPeriod_N,
				                b.cShift_N,
				                bs.sUnit ,
				                bs.nQty ,
				                bs.nPrc ,
				                bs.nAmt ,
				                bs.cPresentBackMan ,
				                bs.sRetSendRemark ) t
				};
			
			while(detailSumIterator.next()) {
				presentBean.presentAmount = detailSumIterator.presentAmount();
				presentBean.presentPrice = detailSumIterator.presentPrice();
				presentBean.extracPrice = detailSumIterator.extracPrice();
			}
			detailSumIterator.close();
		}
		else
		{
			throw new NoConnection();
		}
		closeDefaultContext(myCtx);
		return presentBean;
	}
	
	public PresentBill getHeadSum(String startDate,String endDate,String shopC,String period, String shift)
			throws NoPrivilegeException,SQLException,NoConnection	{
		
		PresentBill presentBean = new PresentBill();
		DefaultContext myCtx = getDefaultContext();
		HeadSumIterator headSumIterator = null;
		if (myCtx != null)
		{
			#sql [myCtx] headSumIterator = {
					SELECT
					CASE
						WHEN SUM(presentAmount) IS NULL
					THEN 0
						ELSE SUM(presentAmount)
					END presentAmount,
					CASE
						WHEN SUM(presentPrice) IS NULL
					THEN 0
						ELSE SUM(presentPrice)
					END presentPrice
					FROM
					(
					        SELECT
					        TO_CHAR(DBUSINESS, 'yyyy-MM-dd') businessDate,
				            b.cBranch_C                            shopC,
				            b.cBranch_N                            shopN,
				            b.cTable_N                             table,
				            b.cBill_C                              billC,
				            b.cPeriod_N                            period,
				            b.cShift_N                             shift,
				            SUM(NVL( bs.nQty,0)) presentAmount ,
				            SUM(NVL(bs.nAmt,0))  presentPrice
				        FROM
				        :{Com_("d_t_food_bill")} b
				        LEFT JOIN
				        :{Com_("d_t_food_Bills")} bs
				        ON
				            b.cBill_C = bs.cBill_C
				        WHERE
				        	b.cBranch_C LIKE :shopC
						AND b.CPERIOD_N LIKE :period
						AND b.CSHIFT_N LIKE :shift
						AND bs.eRetSendFlag = '赠送'
						AND bs.eSuitFlag <> '套餐子项'
						AND TO_CHAR(DBUSINESS, 'yyyy-MM-dd') IN
						(
								SELECT
								TO_CHAR(DBUSINESS, 'yyyy-MM-dd')
								FROM
								:{Com_("d_t_food_bill")} d
								WHERE
								DBUSINESS >= TO_Date(:startDate, 'yyyy-MM-dd')
								AND DBUSINESS <= TO_Date(:endDate, 'yyyy-MM-dd')
								GROUP BY
								TO_CHAR(DBUSINESS, 'yyyy-MM-dd'))
				        GROUP BY
				        TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
				            b.cBranch_C,
				            b.cBranch_N,
				            table,
				            b.cBill_C,
				            period,
				            shift
			       ) t
			};
			
			while(headSumIterator.next()) {
				presentBean.presentAmount = headSumIterator.presentAmount();
				presentBean.presentPrice = headSumIterator.presentPrice();
			}
			headSumIterator.close();
		}
		else
		{
			throw new NoConnection();
		}
		closeDefaultContext(myCtx);
		return presentBean;
	}
	
	public int getDetailCount(String startDate,String endDate,String shopC,String period,String shift)
			throws NoPrivilegeException,SQLException,NoConnection	{
		int counts = 0;
		
		DefaultContext myCtx = getDefaultContext();
		
		if (myCtx != null)
		{
			#sql [myCtx] {
			SELECT
				    COUNT( *) into :counts
				    FROM
				        (
				            SELECT
				                TO_CHAR(DBUSINESS, 'yyyy-MM-dd') businessDate,
				                b.cBranch_C                      shopC,
				                b.cTable_N                       table,
				                b.cBill_C                        billC,
				                bs.cFood_C                       foodC,
				                b.cPeriod_N,
				                b.cShift_N,
				                bs.sUnit           unit,
				                bs.nQty            presentAmount ,
				                bs.nPrc            price,
				                bs.nAmt            presentPrice,
				                bs.cPresentBackMan 	   presentMan,
				                bs.sRetSendRemark  presentWhy
				            FROM
				            :{Com_("d_t_food_bill")} b
				            LEFT JOIN
				            :{Com_("d_t_food_Bills")} bs
				            ON
				                b.cBill_C = bs.cBill_C
				            WHERE
				            	b.cBranch_C LIKE :shopC
		                    AND b.CPERIOD_N LIKE :period
		                    AND b.CSHIFT_N LIKE :shift
				            AND bs.eRetSendFlag = '赠送'
				            AND TO_CHAR(DBUSINESS, 'yyyy-MM-dd') IN
				                (
				                    SELECT
				                        TO_CHAR(DBUSINESS, 'yyyy-MM-dd')
				                    FROM
				                    :{Com_("d_t_food_bill")} d
				                    WHERE
				                        DBUSINESS >= to_date(:startDate, 'yyyy-MM-dd')
				                    AND DBUSINESS <= to_date(:endDate,'yyyy-MM-dd')
				                    GROUP BY
				                        TO_CHAR(DBUSINESS, 'yyyy-MM-dd'))
				            GROUP BY
				                TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
				                b.cBranch_C,
				                b.cTable_N,
				                b.cBill_C,
				                bs.cFood_C ,
				                b.cPeriod_N,
				                b.cShift_N,
				                bs.sUnit ,
				                bs.nQty ,
				                bs.nPrc ,
				                bs.nAmt ,
				                bs.cPresentBackMan ,
				                bs.sRetSendRemark ) t
				};
			
		}
		else
		{
			throw new NoConnection();
		}
		closeDefaultContext(myCtx);
		return counts;
	}
	
	public int getHeadCount(String startDate,String endDate,String shopC,String period,String shift)
			throws NoPrivilegeException,SQLException,NoConnection	{
		int counts = 0;
		
		DefaultContext myCtx = getDefaultContext();
		
		if (myCtx != null)
		{
			#sql [myCtx] {
				SELECT
				COUNT( *) into :counts
				FROM
				(
				        SELECT
				        TO_CHAR(DBUSINESS, 'yyyy-MM-dd') businessDate,
			            b.cBranch_C                            shopC,
			            b.cBranch_N                            shopN,
			            b.cTable_N                             table,
			            b.cBill_C                              billC,
			            b.cPeriod_N                            period,
			            b.cShift_N                             shift,
			            SUM(NVL( bs.nQty,0)) presentAmount ,
			            SUM(NVL(bs.nAmt,0))  presentPrice
			        FROM
			        :{Com_("d_t_food_bill")} b
			        LEFT JOIN
			        :{Com_("d_t_food_Bills")} bs
			        ON
			            b.cBill_C = bs.cBill_C
			        WHERE
			        	b.cBranch_C LIKE :shopC
					AND b.CPERIOD_N LIKE :period
					AND b.CSHIFT_N LIKE :shift
					AND bs.eRetSendFlag = '赠送'
					AND bs.eSuitFlag <> '套餐子项'
					AND TO_CHAR(DBUSINESS, 'yyyy-MM-dd') IN
					(
							SELECT
							TO_CHAR(DBUSINESS, 'yyyy-MM-dd')
							FROM
							:{Com_("d_t_food_bill")} d
							WHERE
							DBUSINESS >= TO_Date(:startDate, 'yyyy-MM-dd')
							AND DBUSINESS <= TO_Date(:endDate, 'yyyy-MM-dd')
							GROUP BY
							TO_CHAR(DBUSINESS, 'yyyy-MM-dd'))
			        GROUP BY
			        TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
			            b.cBranch_C,
			            b.cBranch_N,
			            b.cTable_N ,
			            b.cBill_C,
			            period,
			            shift
		       ) t
			};	
		}
		else
		{
			throw new NoConnection();
		}
		closeDefaultContext(myCtx);
		return counts;
	}
	
	public List<PresentBill> getDetail(String startDate,String endDate,String shopC,String period,
			String shift,int startRow,int endRow)
			throws NoPrivilegeException,SQLException,NoConnection	{
		
		List<PresentBill> result = new ArrayList<PresentBill>();
		DefaultContext myCtx = getDefaultContext();
		DetailIterator detailIterator = null;
		if (myCtx != null)
		{
			#sql [myCtx] detailIterator = {
			SELECT
				    *
				    FROM
				        (
				            SELECT
				                t.*,
				                ROWNUM rowNumber
				            FROM
				                (
				                    SELECT
				                        TO_CHAR(DBUSINESS, 'yyyy-MM-dd') businessDate,
				                        b.cBranch_C                      shopC,
				                        b.cBranch_N                      shopN,
				                        b.cTable_N                       table,
				                        b.cBill_C                        billC,
				                        bs.cFood_C                       foodC,
				                        bs.cFood_N                       foodN,
				                        b.cPeriod_N                      period,
				                        b.cShift_N                       shift,
				                        bs.sUnit           unit,
				                        bs.nQty            presentAmount ,
				                        bs.nPrc            price,
				                        bs.nAmt            presentPrice,
				                        bs.cPresentBackMan     presentMan,
				                        bs.sRetSendRemark  presentWhy,
				                        bs.cLitCls_C       smallC,
									    bs.cLitCls_N       smallN
				                    FROM
				                    :{Com_("d_t_food_bill")} b
				                    LEFT JOIN
				                    :{Com_("d_t_food_Bills")} bs
				                    ON
				                        b.cBill_C = bs.cBill_C
				                    WHERE
				                        b.cBranch_C LIKE :shopC
				                    AND b.CPERIOD_N LIKE :period
				                    AND b.CSHIFT_N LIKE :shift
				                    AND bs.eRetSendFlag = '赠送'
	                    		    AND bs.eSuitFlag <> '套餐子项'
				                    AND TO_CHAR(DBUSINESS, 'yyyy-MM-dd') IN
				                        (
				                            SELECT
				                                TO_CHAR(DBUSINESS, 'yyyy-MM-dd')
				                            FROM
				                            :{Com_("d_t_food_bill")} d
				                            WHERE
				                                DBUSINESS >= to_date(:startDate, 'yyyy-MM-dd')
				                            AND DBUSINESS <= to_date(:endDate,'yyyy-MM-dd')
				                            GROUP BY
				                                TO_CHAR(DBUSINESS, 'yyyy-MM-dd'))
				                    GROUP BY
				                        TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
				                        b.cBranch_C,
				                        b.cBranch_N,
				                        b.cTable_N ,
				                        b.cBill_C,
				                        bs.cFood_C ,
				                        bs.cFood_N ,
				                        period,
				                        shift,
				                        bs.sUnit ,
				                        bs.nQty ,
				                        bs.nPrc ,
				                        bs.nAmt ,
				                        bs.cPresentBackMan ,
				                        bs.sRetSendRemark,
				                        bs.cLitCls_C,
									    bs.cLitCls_N 
				                    ORDER BY
				                        TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
				                        b.cTable_N,
				                        b.cBranch_C,
				                        b.cBill_C,
				                        bs.cFood_C) t
				            WHERE
				                ROWNUM <= :endRow)
				    WHERE
				        rowNumber >= :startRow
		     };
			
			while(detailIterator.next()) {
				PresentBill presentBean = new PresentBill();
				presentBean.businessDate = detailIterator.businessDate();
				presentBean.table = detailIterator.table();
				presentBean.billC = detailIterator.billC();
				presentBean.period = detailIterator.period();
				presentBean.shift = detailIterator.shift();
				presentBean.foodName = detailIterator.foodN();
				presentBean.unit = detailIterator.unit();
				presentBean.presentAmount = detailIterator.presentAmount();
				presentBean.price = detailIterator.price();
				presentBean.presentPrice = detailIterator.presentPrice();
				presentBean.extracPrice = detailIterator.extracPrice();
				presentBean.presentMan = detailIterator.presentMan();
				presentBean.presentWhy = detailIterator.presentWhy();
				presentBean.shopC = detailIterator.shopC();
				presentBean.shopN = detailIterator.shopN();
				presentBean.bigC = detailIterator.bigC();
				presentBean.bigN = detailIterator.bigN();
				presentBean.smallC = detailIterator.smallC();
				presentBean.smallN = detailIterator.smallN();
				result.add(presentBean);
			}
			detailIterator.close();
		}
		else
		{
			throw new NoConnection();
		}
		closeDefaultContext(myCtx);
		return result;
	}
	
	public List<PresentBill> getHead(String startDate,String endDate,String shopC,String period,
			String shift,int startRow,int endRow)
					throws NoPrivilegeException,SQLException,NoConnection	{
		
		List<PresentBill> result = new ArrayList<PresentBill>();
		DefaultContext myCtx = getDefaultContext();
		HeadIterator headIterator = null;
		if (myCtx != null)
		{
			#sql [myCtx] headIterator = {
					SELECT
					*
					FROM
					(
							SELECT
							t.*,
							ROWNUM rowNumber
							FROM
							(
							        SELECT
							        TO_CHAR(DBUSINESS, 'yyyy-MM-dd') businessDate,
						            b.cBranch_C                            shopC,
						            b.cBranch_N                            shopN,
						            b.cTable_N                             table,
						            b.cBill_C                              billC,
						            b.cPeriod_N                            period,
						            b.cShift_N                             shift,
						            SUM(NVL( bs.nQty,0)) presentAmount ,
						            SUM(NVL(bs.nAmt,0))  presentPrice
						        FROM
						        :{Com_("d_t_food_bill")} b
						        LEFT JOIN
						        :{Com_("d_t_food_Bills")} bs
						        ON
						            b.cBill_C = bs.cBill_C
						        WHERE
						        	b.cBranch_C LIKE :shopC
								AND b.CPERIOD_N LIKE :period
								AND b.CSHIFT_N LIKE :shift
								AND bs.eRetSendFlag = '赠送'
								AND bs.eSuitFlag <> '套餐子项'
								AND TO_CHAR(DBUSINESS, 'yyyy-MM-dd') IN
								(
										SELECT
										TO_CHAR(DBUSINESS, 'yyyy-MM-dd')
										FROM
										:{Com_("d_t_food_bill")} d
										WHERE
										DBUSINESS >= TO_Date(:startDate, 'yyyy-MM-dd')
										AND DBUSINESS <= TO_Date(:endDate, 'yyyy-MM-dd')
										GROUP BY
										TO_CHAR(DBUSINESS, 'yyyy-MM-dd'))
						        GROUP BY
						        TO_CHAR(DBUSINESS, 'yyyy-MM-dd'),
						            b.cBranch_C,
						            b.cBranch_N,
						            b.cTable_N ,
						            b.cBill_C,
						            period,
						            shift
					       ) t
							WHERE
								ROWNUM <= :endRow)
								WHERE
								rowNumber >= :startRow
			};
			
			while(headIterator.next()) {
				PresentBill presentBean = new PresentBill();
				presentBean.businessDate = headIterator.businessDate();
				presentBean.table = headIterator.table();
				presentBean.billC = headIterator.billC();
				presentBean.period = headIterator.period();
				presentBean.shift = headIterator.shift();
				presentBean.presentAmount = headIterator.presentAmount();
				presentBean.presentPrice = headIterator.presentPrice();
				presentBean.shopC = headIterator.shopC();
				presentBean.shopN = headIterator.shopN();
				result.add(presentBean);
			}
			headIterator.close();
		}
		else
		{
			throw new NoConnection();
		}
		closeDefaultContext(myCtx);
		return result;
	}
	
}