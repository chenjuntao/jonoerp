/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Thu Oct 30 09:56:09 CST 2014 by pw
 * Last edited on Thu Oct 30 09:56:09 CST 2014 by pw
 * 
 * comment: 物流中心 中央工厂要货汇总单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.CollectHeader;
import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;


public class CollectHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(CollectHeaderBean.class);
	
	#sql private iterator HeaderIter(String form_id, String branch_id, String branch ,String form_maker_id, String form_maker, Date form_time, String auditor_id, String auditor, Date audit_time, String form_note, Double all_pay_amt, String max_pay_item);
	
	public int saveEntity(CollectHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formId = header.getFormId();
		String branchId = header.getBranchId();
		String branch = header.getBranch();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		String auditorId = header.getAuditorId();
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_COLLECT_HEADER")}
				(FORM_ID, BRANCH_ID,BRANCH, FORM_MAKER_ID, FORM_MAKER, FORM_TIME, AUDITOR_ID, AUDITOR, AUDIT_TIME, FORM_NOTE, ALL_PAY_AMT, MAX_PAY_ITEM) 
			VALUES (:formId, :branchId,:branch, :formMakerId, :formMaker, :formTime, :auditorId, :auditor, :auditTime, :formNote, :allPayAmt, :maxPayItem)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(CollectHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String branchId = header.getBranchId();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		String auditorId = header.getAuditorId();
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			UPDATE
				:{Com_("D_T1_COLLECT_HEADER")}
			SET
				FORM_ID = :formId,
				BRANCH_ID = :branchId,
				FORM_MAKER_ID = :formMakerId,
				FORM_MAKER = :formMaker,
				FORM_TIME = :formTime,
				AUDITOR_ID = :auditorId,
				AUDITOR = :auditor,
				AUDIT_TIME = :auditTime,
				FORM_NOTE = :formNote,
				ALL_PAY_AMT = :allPayAmt,
				MAX_PAY_ITEM = :maxPayItem
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
				:{Com_("D_T1_COLLECT_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int audit(String formId, String userId, String userName, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
				:{Com_("D_T1_COLLECT_HEADER")}
			SET
				auditor = :userId,
				auditor_id = :userName,
				audit_time = :sAuditTime
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
				:{Com_("D_T1_COLLECT_HEADER")} h
	        LEFT JOIN
	        	:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
			AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId, String queryType) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.BRANCH_ID = " + branchId;
		}

		if ("unaudit".equals(queryType)) { // 物流中心获取未下发采购单的记录
			query = query + " AND NVL( s.STATUS, 'null') = '未审核'"; 
		}
		
		if ("audited".equals(queryType)) { 
			query = query + " AND NVL( s.STATUS, 'null') = '已审核'"; 
		}
		return query;
	}
	
	public List<CollectHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
				:{Com_("D_T1_COLLECT_HEADER")} h
        	LEFT JOIN
        		:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
			AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
			ORDER BY
				h.FORM_ID
		};
		List<CollectHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public List<CollectHeader> queryAudited(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,"audited");
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
				SELECT
			    *
			    FROM
			    	:{Com_("D_T1_COLLECT_HEADER")} h
			    LEFT JOIN
			    	:{Com_("D_T0_FORM_STATUS")} s
			    ON
			        s.FORM_ID = h.FORM_ID
			    AND s.IS_CURRENT = 1
			    WHERE
			        :{query ::}
			    AND (
			            h.AUDIT_TIME >= :sDate
			        OR  :sDate IS NULL)
			    AND (
			            h.AUDIT_TIME <= :eDate
			        OR  :eDate IS NULL)
			    AND h.auditor IS NOT NULL};
		List<CollectHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	/**
	 * 获取未审核要货单列表总数
	 */
	public int countAudit(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formAuditQuery(branchId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_COLLECT_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
			AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}

	private String formAuditQuery(String branchId) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.BRANCH_ID = " + branchId;
		}
		query = query + " AND NVL( s.STATUS, 'null') = '未审核'";
		return query;
	}

	/**
	 * 获取未审核要货单列表
	 */
	public List<CollectHeader> queryAudit(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formAuditQuery(branchId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T1_COLLECT_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
			AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
				and h.auditor is null
		};
		List<CollectHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}

	public CollectHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T1_COLLECT_HEADER")} h
			WHERE
				h.form_id = :formId
		};
		List<CollectHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<CollectHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<CollectHeader> headerLst = new ArrayList<CollectHeader>();
		while(headerIter.next()) {
			CollectHeader header = new CollectHeader();
			header.setFormId(headerIter.form_id());
			header.setBranchId(headerIter.branch_id());
			header.setBranch(headerIter.branch());
			header.setFormMakerId(headerIter.form_maker_id());
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setAuditorId(headerIter.auditor_id());
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setFormNote(headerIter.form_note());
			header.setAllPayAmt(headerIter.all_pay_amt());
			header.setMaxPayItem(headerIter.max_pay_item());
			headerLst.add(header);
		}
		return headerLst;
	}
}