/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Sun Sep 28 08:55:50 CST 2014 by lyz
 * Last edited on Sun Sep 28 08:55:50 CST 2014 by lyz
 * 
 * comment: 盘点锁库记录表
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.CheckLock;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class CheckLockBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(CheckLockBean.class);
	
	#sql private iterator LockIter(String check_batch_id, String check_batch_status, 
			String lock_branch_id, String lock_branch, String lock_storage_id, String lock_storage, String lock_man_id, 
			String lock_man, Date lock_date, Date lock_time, String lock_note);
	#sql private iterator BatchIter(String check_batch_id, String item_repeatable);
	
	public int newSerial(java.util.Date businessDate, String branchId) 
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String maxId = null;
		int serialLen = FormConstant.DEFAULT_SERIAL_LENGTH;
		//负数(-i)表示截取的开始位置为字符串右端向左数第i个字符
		int negativePos = 0 - serialLen;
		Date bDate = SqlDateUtil.getSqlDate(businessDate);
		#sql [myCtx] {
			SELECT
				MAX(SUBSTR(h.CHECK_BATCH_ID, :negativePos, :serialLen) ) into :maxId
			FROM
			    :{Com_("D_T1_CHECK_LOCK")} h
			WHERE
			    h.LOCK_DATE = :bDate
			AND h.LOCK_BRANCH_ID = :branchId
		};
		closeDefaultContext(myCtx);

		int result = 1;
		if (maxId != null) {
			maxId = maxId.substring(maxId.length() - serialLen);
			result = Integer.parseInt(maxId) + 1;
		}
		return result;
	}
	
	public int saveEntity(CheckLock lock)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String checkBatchId = lock.getCheckBatchId();
		String lockBranchId = lock.getLockBranchId();
		String lockBranch = lock.getLockBranch();
		String lockStorageId = lock.getLockStorageId();
		String lockStorage = lock.getLockStorage();
		String lockManId = lock.getLockManId();
		String lockMan = lock.getLockMan();
		Date lockDate = SqlDateUtil.getSqlDate(lock.getLockDate());
		Date lockTime = SqlDateUtil.getSqlDate(lock.getLockTime());
		String lockNote = lock.getLockNote();
		String itemRepeatable = lock.getItemRepeatable();
		String itemCategory = lock.getItemCategory();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_CHECK_LOCK")}
				(CHECK_BATCH_ID, LOCK_BRANCH_ID, LOCK_BRANCH, LOCK_STORAGE_ID, LOCK_STORAGE, LOCK_MAN_ID, LOCK_MAN, LOCK_DATE, LOCK_TIME, LOCK_NOTE, ITEM_REPEATABLE, ITEM_CATEGORY) 
			VALUES (:checkBatchId, :lockBranchId, :lockBranch, :lockStorageId, :lockStorage, :lockManId, :lockMan, :lockDate, :lockTime, :lockNote, :itemRepeatable, :itemCategory)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(CheckLock lock)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String checkBatchId = lock.getCheckBatchId();
		String lockBranchId = lock.getLockBranchId();
		String lockBranch = lock.getLockBranch();
		String lockManId = lock.getLockManId();
		String lockMan = lock.getLockMan();
		Date lockDate = SqlDateUtil.getSqlDate(lock.getLockDate());
		Date lockTime = SqlDateUtil.getSqlDate(lock.getLockTime());
		String lockNote = lock.getLockNote();

		#sql [myCtx] {
			UPDATE
				:{Com_("D_T1_CHECK_LOCK")}
			SET
				CHECK_BATCH_ID = :checkBatchId,
				LOCK_BRANCH_ID = :lockBranchId,
				LOCK_BRANCH = :lockBranch,
				LOCK_MAN_ID = :lockManId,
				LOCK_MAN = :lockMan,
				LOCK_DATE = :lockDate,
				LOCK_TIME = :lockTime,
				LOCK_NOTE = :lockNote
			WHERE 
				CHECK_BATCH_ID = :checkBatchId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String checkBatchId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
				:{Com_("D_T1_CHECK_LOCK")}
			WHERE
				CHECK_BATCH_ID = :checkBatchId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int finish(String checkBatchId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			UPDATE
				:{Com_("D_T1_CHECK_LOCK")}
			SET
				CHECK_BATCH_STATUS = '已完成'
			WHERE 
				CHECK_BATCH_ID = :checkBatchId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
				:{Com_("D_T1_CHECK_LOCK")} h
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId, String queryType) {
		String query = " 1=1";
		if (!"-1".equals(branchId)) {
			query = query + " AND h.REQUESTER_ID = '" + branchId + "'";
		}
		if ("unaudit".equals(queryType)) { // 获取未处理记录
			query = query + " AND NVL( s.STATUS, 'null') = '未处理'"; 
		}
		return query;
	}
	
	public List<CheckLock> query(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		LockIter lockIter = null;
		#sql [myCtx] lockIter = {
			SELECT
			    *
			FROM
				:{Com_("D_T1_CHECK_LOCK")} h
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		List<CheckLock> lockLst = processIter(lockIter);
		lockIter.close();
		closeDefaultContext(myCtx);
		return lockLst;
	}

	/**
	 * 查询未完成的批次信息
	 */
	public List<Map> queryBatch(String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		BatchIter batchIter = null;
		#sql [myCtx] batchIter = {
			SELECT
			    l.CHECK_BATCH_ID,
			    l.ITEM_REPEATABLE
			FROM
				:{Com_("D_T1_CHECK_LOCK")} l
			WHERE
				l.LOCK_BRANCH_ID = :branchId
			AND NVL( l.CHECK_BATCH_STATUS, 'null') != '已完成'
		};
		List<Map> batchLst = new ArrayList<Map>();
		while(batchIter.next()) {
			Map batch = new HashMap<String, String>();
			batch.put("batchId", batchIter.check_batch_id());
			batch.put("itemRepeatable", batchIter.item_repeatable());
			batchLst.add(batch);
		}
		batchIter.close();
		closeDefaultContext(myCtx);
		return batchLst;
	}
	
	public CheckLock queryById(String checkBatchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		LockIter lockIter = null;
		#sql [myCtx] lockIter = {
			SELECT
			    *
			FROM
				:{Com_("D_T1_CHECK_LOCK")} h
			WHERE
				CHECK_BATCH_ID = :checkBatchId
		};
		List<CheckLock> lockLst = processIter(lockIter);
		lockIter.close();
		closeDefaultContext(myCtx);
		if (lockLst !=null && !lockLst.isEmpty()) {
			return lockLst.get(0);
		}
		return null;
	}
	
	private List<CheckLock> processIter(LockIter lockIter) 
			throws SQLException {
		List<CheckLock> lockLst = new ArrayList<CheckLock>();
		while(lockIter.next()) {
			CheckLock lock = new CheckLock();
			lock.setCheckBatchId(lockIter.check_batch_id());
			lock.setCheckBatchStatus(lockIter.check_batch_status());
			lock.setLockBranchId(lockIter.lock_branch_id());
			lock.setLockBranch(lockIter.lock_branch());
			lock.setLockStorageId(lockIter.lock_storage_id());
			lock.setLockStorage(lockIter.lock_storage());
			lock.setLockManId(lockIter.lock_man_id());
			lock.setLockMan(lockIter.lock_man());
			lock.setLockDate(SqlDateUtil.getUtilDate(lockIter.lock_date()));
			lock.setLockTime(SqlDateUtil.getUtilDate(lockIter.lock_time()));
			lock.setLockNote(lockIter.lock_note());
			lockLst.add(lock);
		}
		return lockLst;
	}
}