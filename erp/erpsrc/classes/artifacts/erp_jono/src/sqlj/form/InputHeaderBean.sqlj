//===============================================
//
// Copyright (c) 2014
// Tanry Electronic Technology Co., Ltd.
// ChangSha, China
//
// All Rights Reserved.
//
//===============================================

package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;
import pojo.form.InputHeader;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.business.form.FormPrefix;
import com.tanry.business.form.FormType;
import com.tanry.business.form.FormUtil;
import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;

public class InputHeaderBean extends ConnectionPool {

    #sql private iterator HeaderIter(String form_id, String form_ref_id, String form_type, 
           String input_department_id, String input_department, String inputer_id, String inputer, 
           String storage_id, String storage, Date input_time, String provider_id, 
           String provider, String form_note, String auditor_id, String auditor, 
           Date audit_time,Date audit_time_actual, Double all_pay_amt, String max_pay_item, String status, Integer times);

    /**
	 * 保存
	 */
	public int saveEntity(InputHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formRefId = header.getFormRefId();
		String formType = header.getFormType();
		String inputDepartmentId = header.getInputDepartmentId();
		String inputDepartment = header.getInputDepartment();
		String inputerId = header.getInputerId();
		String inputer = header.getInputer();
		String storageId = header.getStorageId();
		String storage = header.getStorage();
		Date inputTime = SqlDateUtil.getSqlDate(header.getInputTime());
		String providerId = header.getProviderId();
		String provider = header.getProvider();
		String formNote = header.getFormNote();
		String auditorId = header.getAuditorId();
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		Date auditTimeActual = SqlDateUtil.getSqlDate(header.getAuditTimeActual());
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();
		
		String maxId = null;
		#sql [myCtx] {
			SELECT
			    MAX(h.FORM_ID) into :maxId
			FROM
			:{Com_("D_T1_INPUT_HEADER")} h
			WHERE
			    h.INPUT_TIME = :inputTime
			AND h.INPUT_DEPARTMENT_ID = :inputDepartmentId
			AND h.FORM_TYPE = :formType
		};
		
		int newSerial = 1;
		if (maxId != null) {
			maxId = maxId.substring(maxId.length() - FormConstant.DEFAULT_SERIAL_LENGTH);
			newSerial = Integer.parseInt(maxId) + 1;
		}
		String prefix = FormPrefix.STOCK_IN;
		if (FormType.INPUT_MANUAL.equals(formType)) {
			prefix = FormPrefix.STOCK_IN_MANUAL;
		} else if (FormType.INPUT_PRODUCE.equals(formType)||FormType.INPUT_SEMIS.equals(formType)) {
			prefix = FormPrefix.STOCK_IN_PRODUCT;
		}else if(FormType.INPUT_JSRK.equals(formType)){
			prefix = FormPrefix.STOCK_IN_JSRK;
		}
		String formId = FormUtil.genFormIdBody(prefix, inputDepartmentId, inputTime)
				+ FormUtil.formatSerial(newSerial);
		header.setFormId(formId);

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_INPUT_HEADER")}
				(FORM_ID, FORM_REF_ID, FORM_TYPE, INPUT_DEPARTMENT_ID, INPUT_DEPARTMENT, INPUTER_ID, INPUTER,
						STORAGE_ID, STORAGE, INPUT_TIME,
					PROVIDER_ID, PROVIDER, FORM_NOTE, AUDITOR_ID, AUDITOR, AUDIT_TIME,AUDIT_TIME_ACTUAL, ALL_PAY_AMT, MAX_PAY_ITEM) 
			VALUES (:formId, 
					:formRefId, :formType,
					:inputDepartmentId,
					:inputDepartment,  
					:inputerId, 
					:inputer, :storageId, :storage,
					:inputTime, 
					:providerId, 
					:provider, 
					:formNote,  
					:auditorId, 
					:auditor, 
					:auditTime,
					:auditTimeActual,
					:allPayAmt, 
					:maxPayItem)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(InputHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String inputDepartment = header.getInputDepartment();
		String inputer = header.getInputer();
		Date inputTime = SqlDateUtil.getSqlDate(header.getInputTime());
		String formNote = header.getFormNote();
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_INPUT_HEADER")}
			SET
			    ALL_PAY_AMT = :allPayAmt,
			    MAX_PAY_ITEM = :maxPayItem
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_INPUT_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	/**
	 * 设置退货状态(未退货/已退货)
	 */
	public int saveReturnStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_INPUT_HEADER")}
			SET
				RETURN_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	/**
	 * 餐厅要货单审核
	 */
	public int audit(String formId, String userId, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date auditTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_INPUT_HEADER")}
			SET
				auditor_id = :userId,
				audit_time = :sAuditTime,
				AUDIT_TIME_ACTUAL =:auditTimeActual
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType,String branchType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		return count(startDate, endDate, branchId, "",  queryType, branchType);
	}
	
	public int count(java.util.Date startDate, java.util.Date endDate, String branchId, String storageId, String queryType,String branchType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, storageId, queryType, branchType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		int total = 0;
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		:{Com_("D_T1_INPUT_HEADER")} h
		INNER JOIN
		:{Com_("D_T0_FORM_STATUS")} s
		ON
		    s.FORM_ID = h.FORM_ID
		AND s.IS_CURRENT = 1
		LEFT JOIN
		:{Com_("D_T2_BRANCH_STORAGE")} bs
		ON
		    bs.STORAGE_ID = h.STORAGE_ID
		INNER JOIN
		:{Com_("d_t2_branch")} b
		ON
		    h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
		WHERE
		    :{query :: 1=1}
		AND (
		        h.INPUT_TIME >= :sDate
		    OR  :sDate IS NULL)
		AND (
		        h.INPUT_TIME <= :eDate
		    OR  :eDate IS NULL)};
		closeDefaultContext(myCtx);
		
		return total;
	}
	
	public Integer count( String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		Integer total = 0;
		#sql [myCtx] {
			SELECT
			    COUNT(*)
			INTO
			    :total
			FROM
			:{Com_("D_T1_INPUT_HEADER")} h
			WHERE
			h.FORM_REF_ID = :formId
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	public Integer countNew( String condition) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		Integer total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		:{Com_("D_T1_INPUT_HEADER")} h
		INNER JOIN
		:{Com_("D_T0_FORM_STATUS")} s
		ON
		    s.FORM_ID = h.FORM_ID
		AND s.IS_CURRENT = 1
		INNER JOIN
		:{Com_("d_t2_branch")} b
		ON
		    h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
		WHERE
		   1= 1  :{condition :: ''}}; 
		    
	    total = total == null ? 0 :total;
	    
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId, String queryType, String branchType) {
		return formQuery(branchId, "", queryType, branchType);
	}
	
	private String formQuery(String branchId, String storageId, String queryType, String branchType) {
		String query = " 1=1";
		
		if (!"-1".equals(branchId)) {
			query = query + " AND h.INPUT_DEPARTMENT_ID = '" + branchId + "'";
		}
		if (!TextUtil.isEmpty(branchType)) {
			if("CENTRALFACTORY".equals(branchType)){
				query +=" AND (h.FORM_TYPE = 'PURCHASE' OR h.FORM_TYPE = 'MANUAL')";
			}
			query = query + " AND b.BRANCH_TYPE = '" + branchType + "'";
		}

		if (!TextUtil.isEmpty(storageId)) {
			query = query + " AND h.STORAGE_ID = '" + storageId + "'";
		}
		
		
		if ("audited".equals(queryType)) { // 获取已审核记录
			query = query + " AND NVL( s.STATUS, 'null') = '已审核'";
		} else if (BillStatus.UNADUIT_US.equals(queryType)) {
			query = query + " AND NVL( s.STATUS, 'null') = '未审核'";
		} else if ("unreturn".equals(queryType)) {
			query = query + " AND NVL( s.STATUS, 'null') = '已审核'";
			query = query + " AND NVL(h.RETURN_STATUS, 'null') != '已退货'";
		}
		return query;
	}
	
	/**
	 * 合计
	 */
	public double sum(java.util.Date startDate, java.util.Date endDate, String branchId,String branchType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		return sum(startDate, endDate, branchId, "", branchType);
	}
	
	public double sum(java.util.Date startDate, java.util.Date endDate, String branchId,String storageId, String branchType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery("-1", "", branchType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		double allPayAmt = 0;
		
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			SELECT
				SUM(h.ALL_PAY_AMT)
			INTO
				:allPayAmt
			FROM
			:{Com_("D_T1_INPUT_HEADER")} h
			LEFT JOIN
			:{Com_("d_t2_branch")} b
			ON
				h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
			WHERE
				:{query :: 1=1}
			AND b.BRANCH_TYPE = :branchType
			AND (
					h.INPUT_TIME >= :sDate
					OR  :sDate IS NULL)
			AND (
					h.INPUT_TIME <= :eDate
					OR  :eDate IS NULL)
		};
		closeDefaultContext(myCtx);
		return allPayAmt;
	}
	
	public List<InputHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId,
			int startRow,int endRow, String queryType,String branchType) 
					throws NoPrivilegeException,SQLException,NoConnection {
		return query(startDate, endDate, branchId, "", startRow, endRow, queryType, branchType);
	}
	
	public List<InputHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, String storageId,
			int startRow,int endRow, String queryType, String branchType) 
					throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, storageId, queryType, branchType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
				*
			FROM
			(
				SELECT
					t.*,
					ROWNUM rowNumber
				FROM
				(SELECT
					    h.*,
					    s.status,
					    '' times
					    FROM
					    :{Com_("D_T1_INPUT_HEADER")} h
					    INNER JOIN
					    :{Com_("D_T0_FORM_STATUS")} s
					    ON
					        s.FORM_ID = h.FORM_ID
					    AND s.IS_CURRENT = 1
					    left JOIN
					    :{Com_("D_T2_BRANCH_STORAGE")} bs
					    ON
					        bs.STORAGE_ID = h.STORAGE_ID
					    INNER JOIN
					    :{Com_("d_t2_branch")} b
					    ON
					        h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
					    WHERE
					        :{query :: 1=1}
					    AND (
					            h.INPUT_TIME >= :sDate
					        OR  :sDate IS NULL)
					    AND (
					            h.INPUT_TIME <= :eDate
					        OR  :eDate IS NULL)
					    ORDER BY
					        h.FORM_ID DESC) t
				WHERE
					ROWNUM < :endRow)
			WHERE
				rowNumber >= :startRow					
		};
		List<InputHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public List<InputHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, String storageId,
			int startRow,int endRow, String queryType, String branchType ,String itemName) 
					throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, storageId, queryType, branchType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
				*
			FROM
			(
				SELECT
					t.*,
					ROWNUM rowNumber
				FROM
				(	WITH
					    filter AS
					    (
					        SELECT DISTINCT
					            t.FORM_ID
					        FROM
					        :{Com_("D_T1_INPUT_DETAIL")} t
					        WHERE
					            1=1
					        AND (
					                t.ITEM_ID = :itemName
					            OR  t.ITEM_NAME = :itemName)
					        ORDER BY
					            t.FORM_ID
					    )
					SELECT
					    h.*,s.status,
					    '' times
					    FROM
					    :{Com_("D_T1_INPUT_HEADER")} h
					     INNER JOIN
					       filter f
					    ON
					        f.FORM_ID = h.FORM_ID
					    INNER JOIN
					    :{Com_("D_T0_FORM_STATUS")} s
					    ON
					        s.FORM_ID = h.FORM_ID
					    AND s.IS_CURRENT = 1
					    left JOIN
					    :{Com_("D_T2_BRANCH_STORAGE")} bs
					    ON
					        bs.STORAGE_ID = h.STORAGE_ID
					    INNER JOIN
					    :{Com_("d_t2_branch")} b
					    ON
					        h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
					    WHERE
					        :{query :: 1=1}
					    AND (
					            h.INPUT_TIME >= :sDate
					        OR  :sDate IS NULL)
					    AND (
					            h.INPUT_TIME <= :eDate
					        OR  :eDate IS NULL)
					    ORDER BY
					        h.FORM_ID DESC) t
				WHERE
					ROWNUM < :endRow)
			WHERE
				rowNumber >= :startRow					
		};
		List<InputHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public List<InputHeader> queryNew(int startRow,int endRow,String condition) 
					throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    SELECT
			                        h.*,s.status,
								    '' times
			                    FROM
			                    :{Com_("D_T1_INPUT_HEADER")} h
			                    INNER JOIN
			                    :{Com_("D_T0_FORM_STATUS")} s
			                    ON
			                        s.FORM_ID = h.FORM_ID
			                    AND s.IS_CURRENT = 1
			                    INNER JOIN
			                    :{Com_("d_t2_branch")} b
			                    ON
			                        h.INPUT_DEPARTMENT_ID = b.BRANCH_ID
			                    WHERE
			                    	1= 1  :{condition :: ''}
			                    ORDER BY
			                        h.FORM_ID DESC) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<InputHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}

	public InputHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,s.status,t.times
			FROM
			:{Com_("D_T1_INPUT_HEADER")} h
		    INNER JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
            ON
                s.FORM_ID = h.FORM_ID
            AND s.IS_CURRENT = 1
    		LEFT JOIN
		    :{Com_("D_T0_PRINT_TIMES")} t
            ON
                t.FORM_ID = h.FORM_ID	
			WHERE
				h.form_id = :formId
		};
		List<InputHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<InputHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<InputHeader> headerLst = new ArrayList<InputHeader>();
		while(headerIter.next()) {
			InputHeader header = new InputHeader();
			header.setFormId(headerIter.form_id());
			header.setFormRefId(headerIter.form_ref_id());
			header.setFormType(headerIter.form_type());
			header.setInputDepartmentId(headerIter.input_department_id());
			header.setInputDepartment(headerIter.input_department());
			header.setInputerId(headerIter.inputer_id());
			header.setInputer(headerIter.inputer());
            header.setInputTime(SqlDateUtil.getUtilDate(headerIter.input_time()));
			header.setProviderId(headerIter.provider_id());
			header.setProvider(headerIter.provider());
			header.setFormNote(headerIter.form_note());
			header.setAuditorId(headerIter.auditor_id());
			header.setAuditor(headerIter.auditor());
            header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setAllPayAmt(headerIter.all_pay_amt());
			header.setMaxPayItem(headerIter.max_pay_item());

			header.setStorageId(headerIter.storage_id());
			header.setStorage(headerIter.storage());
			header.setStatus(headerIter.status());
			header.setTimes(headerIter.times());
			header.setAuditTimeActual(SqlDateUtil.getUtilDate(headerIter.audit_time_actual()));
			headerLst.add(header);
		}
		return headerLst;
	}
}