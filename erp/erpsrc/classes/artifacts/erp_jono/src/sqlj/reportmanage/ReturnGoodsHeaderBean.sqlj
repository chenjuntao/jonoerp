package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.acl.NoPrivilegeException;

//餐厅采购退货 物流中心采购
public class ReturnGoodsHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(ReturnGoodsHeaderBean.class);
	
	#sql private iterator HeaderIter(
			String input_department_id, 
			String input_department, 
			String storage, 
			String item_id,
			Double return_count,
			Double return_pay_amt,
			Double item_unit_price,
			Double receive_price,
			Double receive_amt,
			String provider,
			String provider_id,
			String item_name,
			String category_id,
			String category_name
		);
	
	#sql private iterator SumIter(
			Double return_count,
			Double return_pay_amt,
			Double receive_amt);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("input_department_id", "String");
		map.put("input_department", "String");
		map.put("storage", "String");
		map.put("item_id", "String");
		map.put("provider", "String");
		map.put("provider_id", "String");
		map.put("return_count", "Number");
		map.put("return_pay_amt", "Number");
		map.put("item_unit_price", "Number");
		map.put("receive_amt", "Number");
		map.put("receive_price", "Number");
		map.put("item_name", "String");
		map.put("category_name", "String");
		map.put("category_id", "String");
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("input_department_id", "i");
		map.put("input_department", "i");
		map.put("storage", "i");
		map.put("item_id", "d"); 
		map.put("return_count", "d");
		map.put("return_pay_amt", "d");
		map.put("item_unit_price", "id");
		map.put("receive_amt", "id");
		map.put("receive_price", "id");
		map.put("provider_id", "i");
		map.put("provider", "i");
		map.put("item_name", "im");
		map.put("category_name", "c");
		map.put("category_id", "c");
		return map;
	}
	
	public int count(String queryStr, String sortStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			select count(*) into :total
			from (
				SELECT
		    		count(*) 
		    	FROM
		    		:{Com_("D_T1_RETURN_GOODS_HEADER")} h
		    	INNER JOIN
	    			:{Com_("D_T0_FORM_STATUS")} s
    			ON
    				h.FORM_ID = s.FORM_ID  	AND s.IS_CURRENT = 1
				INNER JOIN
		    		:{Com_("D_T1_RETURN_GOODS_DETAIL")} d
		    	ON
		    	    h.FORM_ID = d.FORM_ID
		    	LEFT JOIN
		    		:{Com_("D_T2_ITEM_META")} im
		    	ON
		    	    d.ITEM_ID = im.ITEM_ID
		    	LEFT JOIN
		    		:{Com_("D_T2_ITEM_CATEGORY")} c
		    	ON
		    	    im.CATEGORY_ID = c.CATEGORY_ID
		    	LEFT JOIN
		    		:{Com_("D_T1_INPUT_HEADER")} i
		    	ON
		    	    h.FORM_REF_ID= i.FORM_ID
		    	LEFT JOIN
		    		:{Com_("D_T2_BRANCH")} b
		    	ON
		    	    i.INPUT_DEPARTMENT_ID = b.BRANCH_ID
		    	WHERE
		    	    1 = 1 
		    	AND s.STATUS = '已审核' :{queryStr :: ''}
		    	GROUP BY
		    	    i.INPUT_DEPARTMENT_ID,
		    	    i.INPUT_DEPARTMENT,
		    	    i.STORAGE_ID,
		    	    i.STORAGE,
		    	    d.ITEM_ID,
		    	    im.ITEM_NAME,
		    	    c.CATEGORY_ID,
		    	    c.CATEGORY_NAME  )a
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,  String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
		SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (SELECT
			                	    i.INPUT_DEPARTMENT_ID,
			                	    i.INPUT_DEPARTMENT,
			                	    i.STORAGE_ID,
			                	    i.STORAGE,
			                	    i.PROVIDER_ID,
			                	    i.PROVIDER,
			                	    d.ITEM_ID,
			                	    im.ITEM_NAME,
			                	    SUM( NVL(d.RETURN_COUNT,0))  return_count,
			                	    SUM(NVL(d.RETURN_PAY_AMT,0)) RETURN_PAY_AMT,
			                	    id.RECEIVE_PRICE,
			                	    id.ITEM_UNIT_PRICE,
			                	    id.RECEIVE_PRICE*d.RETURN_COUNT RECEIVE_AMT,
			                	    c.CATEGORY_ID,
			                	    c.CATEGORY_NAME
			                	FROM
			                		:{Com_("D_T1_RETURN_GOODS_HEADER")} h
			                	INNER JOIN
			                		:{Com_("D_T1_RETURN_GOODS_DETAIL")} d
			                	ON
			                	    h.FORM_ID = d.FORM_ID
			                	LEFT JOIN
			                		:{Com_("D_T2_ITEM_META")} im
			                	ON
			                	    d.ITEM_ID = im.ITEM_ID
			                	LEFT JOIN
			                		:{Com_("D_T2_ITEM_CATEGORY")} c
			                	ON
			                	    im.CATEGORY_ID = c.CATEGORY_ID
			                	LEFT JOIN
			                		:{Com_("D_T1_INPUT_HEADER")} i
			                	ON
			                	    h.FORM_REF_ID= i.FORM_ID
                	    		LEFT JOIN
                	    			:{Com_("D_T1_INPUT_DETAIL")} id
	                	    	ON
	                	    	    i.FORM_ID = id.FORM_ID
	                	    	AND id.ITEM_ID = d.ITEM_ID
			                	LEFT JOIN
			                		:{Com_("D_T2_BRANCH")} b
			                	ON
			                	    i.INPUT_DEPARTMENT_ID = b.BRANCH_ID
			                	WHERE
			                	    1 = 1 
                	    		AND h.AUDIT_TIME IS NOT NULL :{queryStr :: ''}
			                	GROUP BY
			                	    i.INPUT_DEPARTMENT_ID,
			                	    i.INPUT_DEPARTMENT,
			                	    i.STORAGE_ID,
			                	    i.STORAGE,
			                	    i.PROVIDER,
			                	    i.PROVIDER_ID,
			                	    d.ITEM_ID,
			                	    d.RETURN_COUNT,
			                	    im.ITEM_NAME,
			                	    id.RECEIVE_PRICE,
			                	    id.ITEM_UNIT_PRICE,
			                	    c.CATEGORY_ID,
			                	    c.CATEGORY_NAME  :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr, String sortStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
				SELECT
			    round(SUM (RETURN_COUNT),2) RETURN_COUNT,
			    round(SUM(RETURN_PAY_AMT),2)     RETURN_PAY_AMT,
			    ROUND(SUM(RECEIVE_AMT),2) RECEIVE_AMT
		FROM
		    (SELECT
            	    SUM( NVL(d.RETURN_COUNT,0))  return_count,
            	    SUM(NVL(d.RETURN_PAY_AMT,0)) RETURN_PAY_AMT,
            	    sum(nvl(d.RETURN_COUNT,0)*id.RECEIVE_PRICE) RECEIVE_AMT
            	FROM
            		:{Com_("D_T1_RETURN_GOODS_HEADER")} h
        		INNER JOIN
	    			:{Com_("D_T0_FORM_STATUS")} s
    			ON
    				h.FORM_ID = s.FORM_ID  	AND s.IS_CURRENT = 1
            	INNER JOIN
            		:{Com_("D_T1_RETURN_GOODS_DETAIL")} d
            	ON
            	    h.FORM_ID = d.FORM_ID
            	LEFT JOIN
            		:{Com_("D_T2_ITEM_META")} im
            	ON
            	    d.ITEM_ID = im.ITEM_ID
            	LEFT JOIN
            	:{Com_("D_T2_ITEM_CATEGORY")} c
            	ON
            	    im.CATEGORY_ID = c.CATEGORY_ID
	    		LEFT JOIN
            		:{Com_("D_T1_INPUT_HEADER")} i
            	ON
            	    h.FORM_REF_ID= i.FORM_ID
	    		LEFT JOIN
	    			:{Com_("D_T1_INPUT_DETAIL")} id
		    	ON
		    	    i.FORM_ID = id.FORM_ID
		    	AND id.ITEM_ID = d.ITEM_ID
            	LEFT JOIN
            		:{Com_("D_T2_BRANCH")} b
            	ON
            	    i.INPUT_DEPARTMENT_ID = b.BRANCH_ID
            	WHERE
            	    1 = 1 
	    		AND s.STATUS = '已审核' :{queryStr :: ''}
            	GROUP BY
            	    i.INPUT_DEPARTMENT_ID,
            	    i.INPUT_DEPARTMENT,
            	    i.STORAGE_ID,
            	    i.STORAGE,
            	    d.ITEM_ID,
            	    im.ITEM_NAME,
            	    c.CATEGORY_ID,
            	    c.CATEGORY_NAME  ) a};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("return_count", sumIter.return_count());
			sumMap.put("return_pay_amt", sumIter.return_pay_amt());
			sumMap.put("receive_amt", sumIter.receive_amt());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("input_department", headerIter.input_department());
			header.put("storage", headerIter.storage());
			header.put("item_id", headerIter.item_id());
			header.put("provider_id", headerIter.provider_id());
			header.put("provider", headerIter.provider());
			header.put("return_count", headerIter.return_count());
			header.put("return_pay_amt", headerIter.return_pay_amt());
			header.put("item_name", headerIter.item_name());
			header.put("category_name", headerIter.category_name());
			header.put("category_id", headerIter.category_id());
			header.put("return_count", headerIter.return_count());
			header.put("receive_price", headerIter.receive_price());
			header.put("item_unit_price", headerIter.item_unit_price());
			header.put("return_pay_amt", headerIter.return_pay_amt());
			header.put("receive_amt", headerIter.receive_amt());
			header.put("input_department_id", headerIter.input_department_id());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}