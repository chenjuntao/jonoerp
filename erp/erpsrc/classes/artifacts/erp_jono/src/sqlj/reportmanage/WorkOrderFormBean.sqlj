package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class WorkOrderFormBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(WorkOrderFormBean.class);
	
	#sql private iterator HeaderIter(
			String form_id, 
			String form_ref_id, 
			String item_id, 
			String item_name, 
			String item_dimension, 
			String item_dimension2, 
			String item_specification, 
			Double item_count,
			Double item_count2, 
			Double actual_count, 
			String workshop,
			String form_maker_id, 
			String form_maker, 
			Date form_time, 
			Date form_time_actual, 
			String auditor_id, 
			String auditor, 
			Date audit_time, 
			Date complete_time, 
			String form_note,
			String status);
	
	#sql private iterator SumIter(
			Double item_count,
			Double item_count2,
			Double actual_count);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("form_id", "String");
		map.put("item_id", "String");
		map.put("item_name", "String");
		map.put("item_dimension", "String");
		map.put("item_dimension2", "String");
		map.put("item_specification", "String");
		map.put("item_count", "Number");
		map.put("item_count2", "Number");
		map.put("actual_count", "Number");
		map.put("workshop", "String");
		map.put("form_maker_id", "String");
		map.put("form_maker", "String");
		map.put("form_time", "Date");
		map.put("form_time_actual", "Date");
		map.put("auditor_id", "String");
		map.put("auditor", "String");
		map.put("audit_time", "Date");
		map.put("complete_time", "Date");
		map.put("form_note", "String");
		map.put("status", "String");
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("form_id", "h");
		map.put("item_id", "h");
		map.put("item_name", "h");
		map.put("item_dimension", "h");
		map.put("item_dimension2", "h");
		map.put("item_specification", "h");
		map.put("item_count", "h");
		map.put("item_count2", "h");
		map.put("actual_count", "h");
		map.put("workshop", "h");
		map.put("form_maker_id", "h");
		map.put("form_maker", "h");
		map.put("form_time", "h");
		map.put("form_time_actual", "h");
		map.put("auditor_id", "h");
		map.put("auditor", "h");
		map.put("audit_time", "h");
		map.put("complete_time", "d");
		map.put("form_note", "h");
		map.put("status", "s");
		return map;
	}
	
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_WORK_ORDER_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
			 1 = 1
             :{queryStr :: ''}
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM 
			                (
			                	    SELECT
				                    h.FORM_ID,
				                    a.FORM_ID FORM_REF_ID,
				                    h.ITEM_ID,
				                    h.ITEM_NAME,
				                    h.ITEM_DIMENSION,
				                    h.ITEM_DIMENSION2,
				                    h.ITEM_SPECIFICATION,
				                    nvl(h.ITEM_COUNT,0) ITEM_COUNT,
				                    nvl(h.ITEM_COUNT2,0) ITEM_COUNT2,
				                    nvl(h.ACTUAL_COUNT,0) ACTUAL_COUNT,
				                    h.WORKSHOP,
				                    h.FORM_MAKER_ID,
				                    h.FORM_MAKER,
				                    h.FORM_TIME,
				                    h.FORM_TIME_ACTUAL,
				                    h.AUDITOR_ID,
				                    h.AUDITOR,
				                    h.AUDIT_TIME,
				                    d.COMPLETE_TIME,
				                    h.FORM_NOTE,
				                    s.STATUS
			                    FROM
			                    	:{Com_("D_T1_WORK_ORDER_HEADER")} h
			                    LEFT JOIN
			                    	:{Com_("D_T1_ARRENGMENT_DETAIL")} a
			        			ON
			        			    a.work_order_id = h.FORM_ID
		                        LEFT JOIN
		                        	:{Com_("D_T1_ARRENGMENT_DETAIL")} d
			                    ON
			                        h.FORM_ID = d.WORK_ORDER_ID
			            		LEFT JOIN
			            			:{Com_("D_T0_FORM_STATUS")} s
			        			ON
			        			    s.FORM_ID = h.FORM_ID
			        			AND s.IS_CURRENT = 1
			                    WHERE
			                    	1 = 1
				                    :{queryStr :: ''} :{sortStr :: ''}
			            		) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("item_count", sumIter.item_count());
			sumMap.put("item_count2", sumIter.item_count2());
			sumMap.put("actual_count", sumIter.actual_count());
		}
			
		return sumMap;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
		SELECT
		    SUM(nvl(h.item_count,0)) item_count,
		    SUM(nvl(h.item_count2,0)) item_count2,
		    SUM(nvl(h.actual_count,0))     actual_count
		FROM
		:{Com_("D_T1_WORK_ORDER_HEADER")} h
		LEFT JOIN
		:{Com_("D_T0_FORM_STATUS")} s
		ON
		    s.FORM_ID = h.FORM_ID
		AND s.IS_CURRENT = 1
		WHERE
		    1 = 1 :{queryStr :: ''}};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}

	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("form_id", headerIter.form_id());
			header.put("form_ref_id", headerIter.form_ref_id());
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_dimension2", headerIter.item_dimension2());
			header.put("item_specification", headerIter.item_specification());
			header.put("item_count", headerIter.item_count());
			header.put("item_count2", headerIter.item_count2());
			header.put("actual_count", headerIter.actual_count());
			header.put("workshop", headerIter.workshop());
			header.put("form_maker_id", headerIter.form_maker_id());
			header.put("form_maker", headerIter.form_maker());
			header.put("form_time", headerIter.form_time());
			header.put("form_time_actual", headerIter.form_time_actual());
			header.put("auditor_id", headerIter.auditor_id());
			header.put("auditor", headerIter.auditor());
			header.put("audit_time", headerIter.audit_time());
			header.put("complete_time", headerIter.complete_time());
			header.put("form_note", headerIter.form_note());
			header.put("status", headerIter.status());
			headerLst.add(header);
		}
		return headerLst;
	}
}