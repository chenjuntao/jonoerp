package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.acl.NoPrivilegeException;

public class CheckDetailBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(PurchasingDetailBean.class);
	
	#sql private iterator HeaderIter(
			String form_id,
			Date form_time,
			String check_branch,
			String check_storage,
			String item_id,
			String item_name,
			String item_dimension,
			String item_specification,
			String item_category,
			String category_name,
			Double check_count,
			Double theory_count,
			Double diffCount,
			Double item_unit_price,
			Double pay_amt
			);
	
	#sql private iterator SumIter(
			Double check_count,
			Double pay_amt);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("form_id", "String");
		map.put("form_time", "Date"); 
		map.put("check_branch", "String");
		map.put("check_storage", "String");
		map.put("item_id", "String");
		map.put("item_name", "String");
		map.put("item_dimension", "String");
		map.put("item_specification", "String");
		map.put("item_category", "String");
		map.put("category_name", "String"); 
		map.put("check_count", "Number"); 
		map.put("theory_count", "Number");
		map.put("diffCount", "Number");
		map.put("item_unit_price", "Number"); 
		map.put("pay_amt", "Number"); 
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("form_id", "h");
		map.put("form_time", "h"); 
		map.put("check_branch", "h");
		map.put("check_storage", "h");
		map.put("item_id", "d");
		map.put("item_name", "d");
		map.put("item_dimension", "d");
		map.put("item_specification", "d");
		map.put("item_category", "d");
		map.put("category_name", "d"); 
		map.put("check_count", "d"); 
		map.put("theory_count", "d");
		map.put("diffCount", "d");
		map.put("item_unit_price", "d"); 
		map.put("pay_amt", "d"); 
		
		return map;
	}
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_CHECK_HEADER")} h
		INNER JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    h.FORM_ID = s.FORM_ID
		AND s.IS_CURRENT = 1
		INNER JOIN
		    :{Com_("D_T1_CHECK_DETAIL")} d
		ON
		    h.FORM_ID = d.FORM_ID
		LEFT JOIN
		    :{Com_("D_T2_ITEM_CATEGORY")} c
		ON
		    d.ITEM_CATEGORY = c.CATEGORY_ID
		LEFT JOIN
		    :{Com_("D_T2_ITEM_PRICE")} p
		ON
		    d.ITEM_ID = p.ITEM_ID
		AND p.PRICE_TYPE = 'BENCHMARK'
		AND p.IS_CURRENT = 1
		WHERE
		    1 = 1
		AND s.STATUS = '已审核'
		AND h.FORM_TYPE = 'form' :{queryStr :: ''}};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr, String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    SELECT
			                        h.form_id,
			                        h.form_time,
			                        h.check_branch,
			                        h.check_storage,
			                        d.item_id,
			                        d.item_name,
			                        d.item_dimension,
			                        d.item_specification,
			                        d.item_category,
			                        c.category_name,
			                        d.check_count,
			                        d.theory_count,
			                        d.check_count-d.theory_count                      diffCount,
			                        NVL(p.ITEM_PRICE,0)                               item_unit_price,
			                        ROUND(NVL(d.CHECK_COUNT,0)*NVL(p.ITEM_PRICE,0),2) pay_amt
			                    FROM
			                        :{Com_("D_T1_CHECK_HEADER")} h
			                    INNER JOIN
			                        :{Com_("D_T1_CHECK_DETAIL")} d
			                    ON
			                        h.FORM_ID = d.FORM_ID
			                    LEFT JOIN
			                        :{Com_("D_T2_ITEM_CATEGORY")} c
			                    ON
			                        d.ITEM_CATEGORY = c.CATEGORY_ID
			                    LEFT JOIN
			                        :{Com_("D_T2_ITEM_PRICE")} p
			                    ON
			                        d.ITEM_ID = p.ITEM_ID
			                    AND p.PRICE_TYPE = 'BENCHMARK'
			                    AND p.IS_CURRENT = 1
			                    WHERE
			                        1 = 1
                        		AND h.AUDIT_TIME IS NOT NULL
			                    AND h.FORM_TYPE = 'form' :{queryStr :: ''} :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
            SELECT
                ROUND(SUM(d.check_count),2) check_count,
			    ROUND(SUM(d.check_count* p.ITEM_PRICE),2) PAY_AMT
            FROM
                :{Com_("D_T1_CHECK_HEADER")} h
            INNER JOIN
                :{Com_("D_T0_FORM_STATUS")} s
            ON
                h.FORM_ID = s.FORM_ID
            AND s.IS_CURRENT = 1
            INNER JOIN
                :{Com_("D_T1_CHECK_DETAIL")} d
            ON
                h.FORM_ID = d.FORM_ID
            LEFT JOIN
                :{Com_("D_T2_ITEM_CATEGORY")} c
            ON
                d.ITEM_CATEGORY = c.CATEGORY_ID
            LEFT JOIN
                :{Com_("D_T2_ITEM_PRICE")} p
            ON
                d.ITEM_ID = p.ITEM_ID
            AND p.PRICE_TYPE = 'BENCHMARK'
            AND p.IS_CURRENT = 1
            WHERE
                1 = 1
            AND s.STATUS = '已审核'
            AND h.FORM_TYPE = 'form' :{queryStr :: ''}};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("check_count", sumIter.check_count());
			sumMap.put("pay_amt", sumIter.pay_amt());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("form_id", headerIter.form_id());
			header.put("form_time", headerIter.form_time());
			header.put("check_branch", headerIter.check_branch());
			header.put("check_storage", headerIter.check_storage());
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_specification", headerIter.item_specification());
			header.put("item_category", headerIter.item_category());
			header.put("category_name", headerIter.category_name());
			header.put("check_count", headerIter.check_count());
			header.put("item_unit_price", headerIter.item_unit_price());
			header.put("pay_amt", headerIter.pay_amt());
			header.put("theory_count", headerIter.theory_count());
			header.put("diffCount", headerIter.diffCount());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}