package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class RequestFormBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(RequestFormBean.class);
	
	#sql private iterator HeaderIter(
			String form_id,       
			String buyer_id   ,   
			String buyer_name ,   
			String storage_id ,   
			String storage   ,    
			String buyer_address ,
			String provider_id ,  
			String provider     , 
			Date   receive_time , 
			String form_maker  ,  
			Date   	form_time   ,  
			String 	auditor    ,   
			Date 	audit_time   , 
			String form_note    , 
			Double all_pay_amt   ,
            String max_pay_item  ,
            int arrive_period ,
            String    delivery_type,
            String    status,
            String template_id,
            String template_name,
            Date form_time_actual,
            String purchase_status,
            String shipping_status
           );
	
	#sql private iterator SumIter(
			Double all_pay_amt);
	
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("form_id", "String");
		map.put("buyer_id", "String");
		map.put("buyer_name", "String");
		map.put("storage_id", "String");
		map.put("storage", "String");
		map.put("buyer_address", "String");
		map.put("provider_id", "String");
		map.put("provider", "String");
		map.put("receive_time", "Date");
		map.put("form_maker", "String");
		map.put("form_time", "Date");
		map.put("auditor", "String");
		map.put("audit_time", "Date");
		map.put("form_note", "Number");
		map.put("all_pay_amt", "Number");
		map.put("arrive_period", "Number");
		map.put("max_pay_item", "String");
		map.put("delivery_type", "String");
		map.put("status", "String");
		map.put("template_id", "String");
		map.put("template_name", "String");
		map.put("form_time_actual", "Date");
		map.put("purchase_status", "String");
		map.put("shipping_status", "String");
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("form_id", "h");
		map.put("buyer_id", "h");
		map.put("buyer_name", "h");
		map.put("storage_id", "h");
		map.put("storage", "h");
		map.put("buyer_address", "h");
		map.put("provider_id", "h");
		map.put("provider", "h");
		map.put("receive_time", "h");
		map.put("form_maker", "h");
		map.put("form_time", "h");
		map.put("auditor", "h");
		map.put("audit_time", "h");
		map.put("form_note", "h");
		map.put("all_pay_amt", "h");
		map.put("arrive_period", "h");
		map.put("max_pay_item", "h");
		map.put("delivery_type", "h");
		map.put("template_id", "h");
		map.put("template_name", "h");
		map.put("form_time_actual", "h");
		map.put("status", "s");
		map.put("purchase_status", "h");
		map.put("shipping_status", "h");
		return map;
	}
	
	
	public int count(String queryStr, String sortStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
    	   count(*) into :total
    	FROM
    	:{Com_("D_T1_REQUEST_HEADER")} h
    	LEFT JOIN
    	:{Com_("D_T0_FORM_STATUS")} s
    	ON
    	    s.FORM_ID = h.FORM_ID
    	AND s.IS_CURRENT = 1
    	WHERE
    	    1 = 1  :{queryStr :: ''} };
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,  String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
		SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (SELECT
			                	    h.* ,
			                	    s.STATUS
			                	FROM
			                	:{Com_("D_T1_REQUEST_HEADER")} h
			                	LEFT JOIN
			                	:{Com_("D_T0_FORM_STATUS")} s
			                	ON
			                	    s.FORM_ID = h.FORM_ID
			                	AND s.IS_CURRENT = 1
			                	WHERE
			                	    1 = 1  :{queryStr :: ''} :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr, String sortStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
			SELECT
        	    sum(h.all_pay_amt) all_pay_amt
        	FROM
        	:{Com_("D_T1_REQUEST_HEADER")} h
        	LEFT JOIN
        	:{Com_("D_T0_FORM_STATUS")} s
        	ON
        	    s.FORM_ID = h.FORM_ID
        	AND s.IS_CURRENT = 1
        	WHERE
        	    1 = 1  :{queryStr :: ''} };
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}

	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("all_pay_amt", sumIter.all_pay_amt());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("form_id", headerIter.form_id());
			header.put("buyer_id", headerIter.buyer_id());
			header.put("buyer_name", headerIter.buyer_name());
			header.put("storage_id", headerIter.storage_id());
			header.put("storage", headerIter.storage());
			header.put("buyer_address", headerIter.buyer_address());
			header.put("provider_id", headerIter.provider_id());
			header.put("provider", headerIter.provider());
			header.put("receive_time", headerIter.receive_time());
			header.put("form_maker", headerIter.form_maker());
			header.put("form_time", headerIter.form_time());
			header.put("auditor", headerIter.auditor());
			header.put("audit_time", headerIter.audit_time());
			header.put("form_note", headerIter.form_note());
			header.put("all_pay_amt", headerIter.all_pay_amt());
			header.put("max_pay_item", headerIter.max_pay_item());
			header.put("arrive_period", headerIter.arrive_period());
			header.put("delivery_type", headerIter.delivery_type());
			header.put("template_id", headerIter.template_id());
			header.put("template_name", headerIter.template_name());
			header.put("status", headerIter.status());
			header.put("form_time_actual", headerIter.form_time_actual());
			header.put("purchase_status", headerIter.purchase_status());
			header.put("shipping_status", headerIter.shipping_status());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}