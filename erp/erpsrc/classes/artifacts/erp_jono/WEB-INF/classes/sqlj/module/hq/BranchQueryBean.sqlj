/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Sep 2, 2015 by liyzh
 * Last edited on Sep 2, 2015 by liyzh
 * 
 * 说明： 选择所有物流中心、央厂、配送分组（含下属餐厅）
 */
package logic.module.hq;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.framework.acl.NoPrivilegeException;

public class BranchQueryBean extends ConnectionPool {
	
	public static Logger log = Logger.getLogger(BranchQueryBean.class);

	#sql private iterator NodeIter(String id, String name, String parent, String type);
	
	//查询所有物流中心、央厂、配送分组（含下属餐厅），树形结构
	public List<Map> queryAllTree() 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		NodeIter nodeIter = null;
		#sql [myCtx] nodeIter = {
			SELECT
			    b.BRANCH_ID   AS id,
			    b.BRANCH_NAME AS name,
			    'root'        AS parent,
			    'branch'      AS type
			FROM
			:{Com_("D_T2_BRANCH")} b
			WHERE
			    b.BRANCH_TYPE IN ('LOGISTICSCENTER',
			                      'CENTRALFACTORY')
			UNION ALL
			SELECT
			    r.REGION_ID   AS id ,
			    r.REGION_NAME AS name,
			    'root'        AS parent,
			    'region'      AS type
			FROM
			:{Com_("D_T2_DELIVERY_REGION")} r
			UNION ALL
			SELECT
			    b.BRANCH_ID   AS id ,
			    b.BRANCH_NAME AS name,
			    rb.REGION_ID  AS parent,
			    'branch'      AS type
			FROM
				:{Com_("D_T2_DELIVERY_REGION_BRANCH")} rb
			LEFT JOIN
				:{Com_("D_T2_BRANCH")} b
			ON
			    b.BRANCH_ID = rb.BRANCH_ID
			WHERE
				b.BRANCH_ID is not null and b.ENABLED = 1
		};
		List<Map> nodeLst = new ArrayList<Map>();
		while(nodeIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", nodeIter.id());
			node.put("name", nodeIter.name());
			node.put("parent", nodeIter.parent());
			node.put("type", nodeIter.type());
			nodeLst.add(node);
		}
		nodeIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
	//查询所有配送分组（含下属餐厅），树形结构
	public List<Map> queryGroupTree()
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		NodeIter nodeIter = null;
		#sql [myCtx] nodeIter = {
			SELECT
			    r.REGION_ID   AS id ,
			    r.REGION_NAME AS name,
			    'root'        AS parent,
			    'region'	  AS type
			FROM
			:{Com_("D_T2_DELIVERY_REGION")} r
			UNION ALL
			SELECT
			    b.BRANCH_ID   AS id ,
			    b.BRANCH_NAME AS name,
			    rb.REGION_ID  AS parent,
			    'branch'	  AS type
			FROM
			:{Com_("D_T2_DELIVERY_REGION_BRANCH")} rb
			LEFT JOIN
			:{Com_("D_T2_BRANCH")} b
			ON
			    b.BRANCH_ID = rb.BRANCH_ID
		    WHERE
			    b.BRANCH_ID IS NOT NULL
		};
		List<Map> nodeLst = new ArrayList<Map>();
		while(nodeIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", nodeIter.id());
			node.put("name", nodeIter.name());
			node.put("parent", nodeIter.parent());
			node.put("type", nodeIter.type());
			nodeLst.add(node);
		}
		nodeIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
	public List<Map> queryStore()
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		NodeIter nodeIter = null;
		#sql [myCtx] nodeIter = {
			SELECT
			    b.branch_id   AS id,
			    b.branch_name AS name,
			    'root'        AS parent,
			    'branch'      AS type
			FROM
				:{Com_("d_T2_branch")} b 
			WHERE
			    b.branch_type IN ('RESTAURANT','FRANCHISEE')
				AND b.ENABLED = 1
			ORDER BY
			    b.BRANCH_ID};
		List<Map> nodeLst = new ArrayList<Map>();
		while(nodeIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", nodeIter.id());
			node.put("name", nodeIter.name());
			node.put("parent", nodeIter.parent());
			node.put("type", nodeIter.type());
			nodeLst.add(node);
		}
		nodeIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
}