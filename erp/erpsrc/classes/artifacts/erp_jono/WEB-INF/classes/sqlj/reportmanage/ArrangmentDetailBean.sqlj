package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class ArrangmentDetailBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(ArrangmentDetailBean.class);
	
	#sql private iterator HeaderIter(
			String form_id, 
			String item_id, 
			String item_name, 
			String item_dimension, 
			String item_specification, 
			Double produce_count, 
			String work_order_id, 
			String workshop, 
			Date produce_time, 
			Double production_cycle, 
			Date complete_time, 
			Date form_time, 
			Date audit_time, 
			String note);
	
	   #sql private iterator SumIter(
				Double produce_count);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("form_id", "String");
		map.put("item_id", "String");
		map.put("item_name", "String");
		map.put("item_dimension", "String");
		map.put("item_specification", "String");
		map.put("produce_count", "Number");
		map.put("work_order_id", "String");
		map.put("workshop", "String");
		map.put("produce_time", "Date");
		map.put("complete_time", "Date");
		map.put("form_time", "Date");
		map.put("audit_time", "Date");
		map.put("production_cycle", "Number");
		map.put("form_note", "note");
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("form_id", "d");
		map.put("item_id", "d");
		map.put("item_name", "d");
		map.put("item_dimension", "d");
		map.put("item_specification", "d");
		map.put("produce_count", "d");
		map.put("work_order_id", "d");
		map.put("workshop", "d");
		map.put("produce_time", "d");
		map.put("production_cycle", "d");
		map.put("form_note", "d");
		map.put("complete_time", "d");
		map.put("form_time", "h");
		map.put("audit_time", "h");
		return map;
	}
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_ARRENGMENT_HEADER")} h
		INNER JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    h.FORM_ID = s.FORM_ID
		AND s.IS_CURRENT = 1
		INNER JOIN
		    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
		ON
		    h.FORM_ID = d.FORM_ID
		WHERE
		    1 = 1
		AND s.STATUS = '已审核' :{queryStr :: ''}};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM 
			                (SELECT
			                	    d.*,
			                	    h.form_time,
			                	    h.audit_time
			                	FROM
			                	    :{Com_("D_T1_ARRENGMENT_HEADER")} h
			                	INNER JOIN
			                	    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
			                	ON
			                	    h.FORM_ID = d.FORM_ID
			                	WHERE
			                	    1 = 1
                	    		AND h.AUDIT_TIME IS NOT NULL :{queryStr :: ''} :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Double produce_count = 0.0;
		DefaultContext myCtx = getDefaultContext();
		
		SumIter sumIter = null;
		#sql [myCtx]  sumIter = {
			SELECT
			 	SUM(PRODUCE_COUNT)PRODUCE_COUNT
        	FROM
        	    :{Com_("D_T1_ARRENGMENT_HEADER")} h
        	INNER JOIN
        	    :{Com_("D_T0_FORM_STATUS")} s
        	ON
        	    h.FORM_ID = s.FORM_ID
        	AND s.IS_CURRENT = 1
        	INNER JOIN
        	    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
        	ON
        	    h.FORM_ID = d.FORM_ID
        	WHERE
        	    1 = 1
        	AND s.STATUS = '已审核' :{queryStr :: ''}};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	

	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("produce_count", sumIter.produce_count());
		}
			
		return sumMap;
	}

	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("form_id", headerIter.form_id());
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_specification", headerIter.item_specification());
			header.put("produce_count", headerIter.produce_count());
			header.put("work_order_id", headerIter.work_order_id());
			header.put("workshop", headerIter.workshop());
			header.put("produce_time", headerIter.produce_time());
			header.put("production_cycle", headerIter.production_cycle());
			header.put("complete_time", headerIter.complete_time());
			header.put("note", headerIter.note());
			header.put("form_time", headerIter.form_time());
			header.put("audit_time", headerIter.audit_time());
			headerLst.add(header);
		}
		return headerLst;
	}
}