package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class ArrangmentHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(ArrangmentHeaderBean.class);
	
	#sql private iterator HeaderIter(
			String item_id, 
			String item_name, 
			String category_id, 
			String category_name, 
			String item_dimension, 
			String item_specification, 
			Double produce_count);
	
	   #sql private iterator SumIter(
				Double produce_count);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("item_id", "String");
		map.put("item_name", "String");
		map.put("category_id", "String");
		map.put("category_name", "String");
		map.put("item_dimension", "String");
		map.put("item_specification", "String");
		map.put("produce_count", "Number");
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("item_id", "d");
		map.put("item_name", "d");
		map.put("category_id", "c");
		map.put("category_name", "c");
		map.put("item_dimension", "d");
		map.put("item_specification", "d");
		map.put("produce_count", "d");
		return map;
	}
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    (SELECT
		    		COUNT(*)
            	FROM
            	    :{Com_("D_T1_ARRENGMENT_HEADER")} h
            	INNER JOIN
            	    :{Com_("D_T0_FORM_STATUS")} s
            	ON
            	    h.FORM_ID = s.FORM_ID
            	AND s.IS_CURRENT = 1
            	INNER JOIN
            	    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
            	ON
            	    h.FORM_ID = d.FORM_ID
            	LEFT JOIN
            	    :{Com_("D_T2_ITEM_META")} im
            	ON
            	    d.ITEM_ID = im.ITEM_ID
            	LEFT JOIN
            	    :{Com_("D_T2_ITEM_CATEGORY")} c
            	ON
            	    im.CATEGORY_ID = c.CATEGORY_ID
            	WHERE
            	    1 = 1
            	AND s.STATUS = '已审核' :{queryStr :: ''}
            	GROUP BY
            	    d.ITEM_ID,
            	    d.ITEM_NAME,
            	    c.CATEGORY_ID,
            	    c.CATEGORY_NAME,
            	    d.ITEM_DIMENSION,
            	    d.ITEM_SPECIFICATION ) a};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM 
			                (SELECT
			                	    d.ITEM_ID,
			                	    d.ITEM_NAME,
			                	    c.CATEGORY_ID,
			                	    c.CATEGORY_NAME,
			                	    d.ITEM_DIMENSION,
			                	    d.ITEM_SPECIFICATION,
			                	    SUM(NVL(d.PRODUCE_COUNT,0)) PRODUCE_COUNT
			                	FROM
			                	    :{Com_("D_T1_ARRENGMENT_HEADER")} h
			                	INNER JOIN
			                	    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
			                	ON
			                	    h.FORM_ID = d.FORM_ID
			                	LEFT JOIN
			                	    :{Com_("D_T2_ITEM_META")} im
			                	ON
			                	    d.ITEM_ID = im.ITEM_ID
			                	LEFT JOIN
			                	    :{Com_("D_T2_ITEM_CATEGORY")} c
			                	ON
			                	    im.CATEGORY_ID = c.CATEGORY_ID
			                	WHERE
			                	    1 = 1
                	    		AND h.AUDIT_TIME IS NOT NULL :{queryStr :: ''}
			                	GROUP BY
			                	    d.ITEM_ID,
			                	    d.ITEM_NAME,
			                	    c.CATEGORY_ID,
			                	    c.CATEGORY_NAME,
			                	    d.ITEM_DIMENSION,
			                	    d.ITEM_SPECIFICATION :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Double produce_count = 0.0;
		DefaultContext myCtx = getDefaultContext();
		
		SumIter sumIter = null;
		#sql [myCtx]  sumIter = {
			SELECT
			    SUM( PRODUCE_COUNT)       PRODUCE_COUNT
			FROM
			    (SELECT
			    		SUM( PRODUCE_COUNT)       PRODUCE_COUNT
                	FROM
                	    :{Com_("D_T1_ARRENGMENT_HEADER")} h
                	INNER JOIN
                	    :{Com_("D_T0_FORM_STATUS")} s
                	ON
                	    h.FORM_ID = s.FORM_ID
                	AND s.IS_CURRENT = 1
                	INNER JOIN
                	    :{Com_("D_T1_ARRENGMENT_DETAIL")} d
                	ON
                	    h.FORM_ID = d.FORM_ID
                	LEFT JOIN
                	    :{Com_("D_T2_ITEM_META")} im
                	ON
                	    d.ITEM_ID = im.ITEM_ID
                	LEFT JOIN
                	    :{Com_("D_T2_ITEM_CATEGORY")} c
                	ON
                	    im.CATEGORY_ID = c.CATEGORY_ID
                	WHERE
                	    1 = 1
                	AND s.STATUS = '已审核' :{queryStr :: ''}
                	GROUP BY
                	    d.ITEM_ID,
                	    d.ITEM_NAME,
                	    c.CATEGORY_ID,
                	    c.CATEGORY_NAME,
                	    d.ITEM_DIMENSION,
                	    d.ITEM_SPECIFICATION)};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	

	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("produce_count", sumIter.produce_count());
		}
			
		return sumMap;
	}

	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("category_id", headerIter.category_id());
			header.put("category_name", headerIter.category_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_specification", headerIter.item_specification());
			header.put("produce_count", headerIter.produce_count());
			headerLst.add(header);
		}
		return headerLst;
	}
}