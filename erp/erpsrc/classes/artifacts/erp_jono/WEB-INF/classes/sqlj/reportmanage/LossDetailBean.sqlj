package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.acl.NoPrivilegeException;

public class LossDetailBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(LossDetailBean.class);
	
	#sql private iterator HeaderIter(
			String form_id,
			String loss_type,
		 	String item_id,
	 	 	String item_name,
	 		String item_id2,
	 	 	String item_name2,
	 	 	String item_type,
	 	 	String item_dimension,
	 	 	String item_dimension2,
	 	 	String item_specification,
	 	 	String item_category,
	 	 	String category_name,
	 	 	Double item_count,
	 	 	Double item_count2,
	 	 	Double unit_price,
	 	 	Double pay_amt,
	 	 	Double storage_count,
	 	 	Date expired_time,
	 	 	Date loss_time,
	 	 	Date audit_time,
	 	 	String reason,
	 	 	String storage_id,
	 	 	String storage,
	 	 	String loss_branch_id,
	 	 	String loss_branch);
	
	#sql private iterator SumIter(
			Double item_count,
			Double pay_amt);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("form_id", "String");
		map.put("loss_type", "String");
		map.put("item_id", "String");
		map.put("item_name", "String");
		map.put("item_type", "String");
		map.put("item_dimension", "String");
		map.put("item_id2", "String");
		map.put("item_name2", "String");
		map.put("item_count2", "Number"); 
		map.put("item_dimension2", "String");
		map.put("item_specification", "String");
		map.put("item_category", "String");
		map.put("category_name", "String"); 
		map.put("item_count", "Number"); 
		map.put("unit_price", "Number"); 
		map.put("pay_amt", "Number"); 
		map.put("storage_count", "Number"); 
		map.put("loss_time", "Date"); 
		map.put("audit_time", "Date"); 
		map.put("expired_time", "Date"); 
		map.put("reason", "String"); 
		map.put("storage_id", "String"); 
		map.put("storage", "String"); 
		map.put("loss_branch_id", "String"); 
		map.put("loss_branch", "String"); 
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("form_id", "d");
		map.put("item_id", "d");
		map.put("item_type", "m");
		map.put("item_name", "d");
		map.put("item_dimension", "d");
		map.put("item_id2", "d");
		map.put("item_name2", "d");
		map.put("item_count2", "d"); 
		map.put("item_dimension2", "d");
		map.put("item_specification", "d");
		map.put("item_category", "d");
		map.put("category_name", "c");
		map.put("item_count", "d"); 
		map.put("unit_price", "d"); 
		map.put("pay_amt", "d"); 
		map.put("storage_count", "d"); 
		map.put("expired_time", "d"); 
		map.put("loss_time", "h"); 
		map.put("audit_time", "h"); 
		map.put("storage_id", "h"); 
		map.put("storage", "h"); 
		map.put("loss_branch_id", "h"); 
		map.put("loss_branch", "h"); 
		map.put("loss_type", "h"); 
		map.put("reason", "d"); 
		
		return map;
	}
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_LOSS_HEADER")} h
		INNER JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    h.FORM_ID = s.FORM_ID
		AND s.IS_CURRENT = 1
		INNER JOIN
		    :{Com_("D_T1_LOSS_DETAIL")} d
		ON
		    h.FORM_ID = d.FORM_ID
		INNER JOIN
		    :{Com_("D_T2_BRANCH")} b
		ON
		    h.LOSS_BRANCH_ID = b.BRANCH_ID
		INNER JOIN
		    :{Com_("D_T2_ITEM_META")} m
		ON
		    d.ITEM_ID = m.ITEM_ID
		LEFT JOIN
		    :{Com_("D_T2_ITEM_CATEGORY")} c
		ON
		    d.ITEM_CATEGORY = c.CATEGORY_ID
		WHERE
		    1 = 1
		AND s.STATUS = '已审核' :{queryStr :: ''}};
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public int counts(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    :{Com_("D_T1_LOSS_HEADER")} h
		INNER JOIN
		    :{Com_("D_T2_BRANCH")} b
		ON
		    h.LOSS_BRANCH_ID = b.BRANCH_ID
		INNER JOIN
		    :{Com_("D_T0_FORM_STATUS")} s
		ON
		    h.FORM_ID = s.FORM_ID
		AND s.IS_CURRENT = 1
		INNER JOIN
		    :{Com_("D_T1_LOSS_DETAIL")} d
		ON
		    h.FORM_ID = d.FORM_ID
		INNER JOIN
		    :{Com_("D_T2_ITEM_META")} m
		ON
		    d.ITEM_ID = m.ITEM_ID
		INNER JOIN
		    :{Com_("D_T1_LOSS_DETAIL")} d2
		ON
		    d.form_id = d2.FORM_ID
		AND d.ITEM_ID2 = d2.ITEM_ID
		AND NVL(d2.REASON,' ') != 'DISH2RAW'
		LEFT JOIN
		    :{Com_("D_T2_ITEM_CATEGORY")} c
		ON
		    d.ITEM_CATEGORY = c.CATEGORY_ID
		WHERE
		    1 = 1
		AND s.STATUS = '已审核' :{queryStr :: ''}};
		closeDefaultContext(myCtx);
		return total;
	}
	
	public List<Map> query(int startRow, int endRow,String queryStr,String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    SELECT
			                        d.FORM_ID,
			                        d.ITEM_ID,
			                        d.ITEM_NAME,
			                        d.ITEM_DIMENSION,
			                        d.ITEM_ID2,
			                        d.ITEM_NAME2,
			                        d.ITEM_DIMENSION2,
			                        d.ITEM_SPECIFICATION,
			                        d.ITEM_CATEGORY,
			                        d.ITEM_COUNT,
			                        d.ITEM_COUNT2,
			                        d.UNIT_PRICE,
			                        d.PAY_AMT,
			                        d.STORAGE_COUNT,
			                        d.EXPIRED_TIME,
			                        d.REASON,
			                        h.loss_type,
			                        h.storage_id,
			                        h.storage,
			                        h.loss_branch_id,
			                        h.loss_branch,
			                        h.loss_time,
			                        h.audit_time,
			                        c.CATEGORY_NAME,
			                        '已审核' STATUS,
			                        DECODE( m.ITEM_TYPE,'PRODUCT','出品','RAW','原料','SEMIS','半成品') item_type
			                    FROM
			                        :{Com_("D_T1_LOSS_HEADER")} h
			                    INNER JOIN
			                        :{Com_("D_T1_LOSS_DETAIL")} d
			                    ON
			                        h.FORM_ID = d.FORM_ID
			                    INNER JOIN
			                        :{Com_("D_T2_BRANCH")} b
			                    ON
			                        h.LOSS_BRANCH_ID = b.BRANCH_ID
			                    INNER JOIN
			                        :{Com_("D_T2_ITEM_META")} m
			                    ON
			                        d.ITEM_ID = m.ITEM_ID
			                    LEFT JOIN
			                        :{Com_("D_T2_ITEM_CATEGORY")} c
			                    ON
			                        d.ITEM_CATEGORY = c.CATEGORY_ID
			                    WHERE
			                        1 = 1
                        		AND h.AUDIT_TIME IS NOT NULL :{queryStr :: ''} :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	
	public List<Map> querys(int startRow, int endRow,String queryStr,String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    SELECT
			                        d.FORM_ID,
			                        d.ITEM_ID,
			                        d.ITEM_NAME,
			                        d.ITEM_DIMENSION,
			                        d.ITEM_ID2,
			                        d.ITEM_NAME2,
			                        d.ITEM_DIMENSION2,
			                        d.ITEM_SPECIFICATION,
			                        d.ITEM_CATEGORY,
			                        d.ITEM_COUNT,
			                        d.ITEM_COUNT2,
			                        d.UNIT_PRICE,
			                        d.PAY_AMT,
			                        d.STORAGE_COUNT,
			                        d.EXPIRED_TIME,
			                        d2.REASON,
			                        h.loss_type,
			                        h.storage_id,
			                        h.storage,
			                        h.loss_branch_id,
			                        h.loss_branch,
			                        h.loss_time,
			                        h.audit_time,
			                        c.CATEGORY_NAME,
			                        '已审核' STATUS,
			                        DECODE( m.ITEM_TYPE,'PRODUCT','出品','RAW','原料','SEMIS','半成品') item_type
			                    FROM
			                        :{Com_("D_T1_LOSS_HEADER")} h
			                    INNER JOIN
			                        :{Com_("D_T2_BRANCH")} b
			                    ON
			                        h.LOSS_BRANCH_ID = b.BRANCH_ID
			                    INNER JOIN
			                        :{Com_("D_T0_FORM_STATUS")} s
			                    ON
			                        h.FORM_ID = s.FORM_ID
			                    AND s.IS_CURRENT = 1
			                    INNER JOIN
			                        :{Com_("D_T1_LOSS_DETAIL")} d
			                    ON
			                        h.FORM_ID = d.FORM_ID
			                    INNER JOIN
			                        :{Com_("D_T2_ITEM_META")} m
			                    ON
			                        d.ITEM_ID = m.ITEM_ID
			                    INNER JOIN
			                        :{Com_("D_T1_LOSS_DETAIL")} d2
			                    ON
			                        d.form_id = d2.FORM_ID
			                    AND d.ITEM_ID2 = d2.ITEM_ID
			                    AND NVL(d2.REASON,' ') != 'DISH2RAW'
			                    LEFT JOIN
			                        :{Com_("D_T2_ITEM_CATEGORY")} c
			                    ON
			                        d.ITEM_CATEGORY = c.CATEGORY_ID
			                    WHERE
			                        1 = 1
			                    AND h.AUDIT_TIME IS NOT NULL :{queryStr :: ''} :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
			SELECT
			    SUM( d.ITEM_COUNT)  ITEM_COUNT,
			    SUM(d.PAY_AMT)      PAY_AMT
			FROM
			    :{Com_("D_T1_LOSS_HEADER")} h
			INNER JOIN
			    :{Com_("D_T0_FORM_STATUS")} s
			ON
			    h.FORM_ID = s.FORM_ID
			AND s.IS_CURRENT = 1
			INNER JOIN
			    :{Com_("D_T1_LOSS_DETAIL")} d
			ON
			    h.FORM_ID = d.FORM_ID
			INNER JOIN
			    :{Com_("D_T2_BRANCH")} b
			ON
			    h.LOSS_BRANCH_ID = b.BRANCH_ID
			INNER JOIN
			    :{Com_("D_T2_ITEM_META")} m
			ON
			    d.ITEM_ID = m.ITEM_ID
			LEFT JOIN
			    :{Com_("D_T2_ITEM_CATEGORY")} c
			ON
			    d.ITEM_CATEGORY = c.CATEGORY_ID
			WHERE
			    1 = 1
    		AND s.STATUS = '已审核' :{queryStr :: ''}};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	
	public Map sums( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
            SELECT
                SUM( d.ITEM_COUNT)  ITEM_COUNT,
			    SUM(d.PAY_AMT)      PAY_AMT
            FROM
                :{Com_("D_T1_LOSS_HEADER")} h
            INNER JOIN
                :{Com_("D_T2_BRANCH")} b
            ON
                h.LOSS_BRANCH_ID = b.BRANCH_ID
            INNER JOIN
                :{Com_("D_T0_FORM_STATUS")} s
            ON
                h.FORM_ID = s.FORM_ID
            AND s.IS_CURRENT = 1
            INNER JOIN
                :{Com_("D_T1_LOSS_DETAIL")} d
            ON
                h.FORM_ID = d.FORM_ID
            INNER JOIN
                :{Com_("D_T2_ITEM_META")} m
            ON
                d.ITEM_ID = m.ITEM_ID
            INNER JOIN
                :{Com_("D_T1_LOSS_DETAIL")} d2
            ON
                d.form_id = d2.FORM_ID
            AND d.ITEM_ID2 = d2.ITEM_ID
            AND NVL(d2.REASON,' ') != 'DISH2RAW'
            LEFT JOIN
                :{Com_("D_T2_ITEM_CATEGORY")} c
            ON
                d.ITEM_CATEGORY = c.CATEGORY_ID
            WHERE
                1 = 1
            AND s.STATUS = '已审核' :{queryStr :: ''}};
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("item_count", sumIter.item_count());
			sumMap.put("pay_amt", sumIter.pay_amt());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("form_id", headerIter.form_id());
			header.put("loss_type", headerIter.loss_type());
			header.put("item_id", headerIter.item_id());
			header.put("item_type", headerIter.item_type());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_id2", headerIter.item_id2());
			header.put("item_count2", headerIter.item_count2());
			header.put("item_name2", headerIter.item_name2());
			header.put("item_dimension2", headerIter.item_dimension2());
			header.put("item_specification", headerIter.item_specification());
			header.put("item_category", headerIter.item_category());
			header.put("item_count", headerIter.item_count());
			header.put("unit_price", headerIter.unit_price());
			header.put("pay_amt", headerIter.pay_amt());
			header.put("storage_count", headerIter.storage_count());
			header.put("expired_time", headerIter.expired_time());
			header.put("loss_time", headerIter.loss_time());
			header.put("audit_time", headerIter.audit_time());
			header.put("category_name", headerIter.category_name());
			header.put("reason", headerIter.reason());
			header.put("storage_id", headerIter.storage_id());
			header.put("storage", headerIter.storage());
			header.put("loss_branch_id", headerIter.loss_branch_id());
			header.put("loss_branch", headerIter.loss_branch());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}