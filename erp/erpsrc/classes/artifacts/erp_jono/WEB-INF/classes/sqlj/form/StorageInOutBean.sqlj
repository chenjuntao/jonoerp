/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Tue Nov 18 11:25:34 CST 2014 by pw
 * Last edited on Tue Nov 18 11:25:34 CST 2014 by pw
 * 
 * comment: 出入库表
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.StorageInOut;
import pojo.form.StorageInOutSummary;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class StorageInOutBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(StorageInOutBean.class);
	
	#sql private iterator HeaderIter(String unit,String branch_id,String branch_name,String storage_Id,String storage_name, Date business_date, Date operation_time, String item_id,String item_name, Double item_unit_price, Double orgi_count, Double item_count_in, Double item_count_out, Double result_count, String form_id, String reason);
	#sql private iterator DetailSumIter(double itemCountIn,double itemCountInMoney,double itemCountOut, double itemCountOutMoney);
	
	#sql private iterator SummaryIter(
			String itemid, String itemname, String unit, 
			double itemcountin, double itemcountinmoney, double itemcountout, double itemcountoutmoney, 
			 double putinstorage, double distribution, double antiauditin, double antiauditout,
			double dreject, double preject, double rawloss, double dishloss, double allocateitemin, 
			double allocateitemout, double checkstoragein, double checkstorageout, double theoryDeduct,double orgiCount
			, String branchname,String storageName, String itemcategory);
	
	
	public int updateEntity(StorageInOut header)
			throws NoPrivilegeException, SQLException, NoConnection {
			DefaultContext myCtx = getDefaultContext();

			//期初数量
			Double orgiCount = header.getOrgiCount();
			
			// 入库数量
			Double itemCountIn = header.getItemCountIn();
			
			// 出库数量
			Double itemCountOut = header.getItemCountOut();
						
			String formId = header.getFormId();

			#sql [myCtx] {
				UPDATE
				:{Com_("D_T0_STORAGE_IN_OUT")}
				SET
					ORGI_COUNT = :orgiCount,
					ITEM_COUNT_IN = :itemCountIn,
					ITEM_COUNT_OUT = :itemCountOut
				WHERE 
					FORM_ID = :formId
			};
			closeDefaultContext(myCtx);
			
			return 1;
		}
	
	public int saveEntity(StorageInOut header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String branchId = header.getBranchId();
		String storageId = header.getStorageId();
		Date businessDate = SqlDateUtil.getSqlDate(header.getBusinessDate());
		Date operationTime = SqlDateUtil.getSqlDate(header.getOperationTime());
		String itemId = header.getItemId();
		Double itemUnitPrice = header.getItemUnitPrice();
		Double orgiCount = header.getOrgiCount();
		Double itemCountIn = header.getItemCountIn();
		Double itemCountOut = header.getItemCountOut();
		Double resultCount = header.getResultCount();
		String formId = header.getFormId();
		String reason = header.getReason();
		String myTimeStamp = header.getTimestamp();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T0_STORAGE_IN_OUT")} 
				(BRANCH_ID, STORAGE_ID,BUSINESS_DATE, OPERATION_TIME, ITEM_ID, ITEM_UNIT_PRICE, ORGI_COUNT, ITEM_COUNT_IN, ITEM_COUNT_OUT, RESULT_COUNT, FORM_ID, REASON,MY_TIMESTAMP) 
			VALUES (:branchId,:storageId, :businessDate, :operationTime, :itemId, :itemUnitPrice, :orgiCount, :itemCountIn, :itemCountOut, :resultCount, :formId, :reason,:myTimeStamp)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int count(java.util.Date startDate, java.util.Date endDate, String branchId,String storageId, String itemId,String reason,String branchType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,storageId,itemId,reason);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
        	SELECT
        	 	count(*) into :total
    	 	FROM
    	 	:{Com_("D_T0_STORAGE_IN_OUT")} io
        	LEFT JOIN
        	:{Com_("D_T2_BRANCH")} b
        	ON
        	    io.BRANCH_ID = b.BRANCH_ID
        	LEFT JOIN
        	:{Com_("D_T2_ITEM_META")} m
        	ON
        	    io.ITEM_ID = m.ITEM_ID
        	WHERE
        	    :{query ::}
        	AND (
        	        BUSINESS_DATE >= :sDate
        	    OR  :sDate IS NULL)
        	AND (
        	        BUSINESS_DATE <= :eDate
        	    OR  :eDate IS NULL)
        	AND b.BRANCH_TYPE = :branchType
        	ORDER BY
        	    io.OPERATION_TIME
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	#sql private iterator DetailIter(String BRANCH_ID, String STORAGE_ID,Date BUSINESS_DATE,Date OPERATION_TIME,String ITEM_ID,double ITEM_UNIT_PRICE,double ORGI_COUNT,double ITEM_COUNT_IN,double ITEM_COUNT_OUT,double RESULT_COUNT,String FORM_ID,String REASON);
	public List<StorageInOut> query(java.util.Date startDate, java.util.Date endDate, String branchId)
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		DetailIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T0_STORAGE_IN_OUT")} s
				WHERE
				 s.BUSINESS_DATE >= :sDate 
				AND s.BUSINESS_DATE <= :eDate
				AND s.BRANCH_ID = :branchId
		};
		List<StorageInOut> headerLst = new ArrayList<StorageInOut>();
		while(headerIter.next()) {
			StorageInOut header = new StorageInOut();
			header.setBranchId(headerIter.BRANCH_ID());
			header.setStorageId(headerIter.STORAGE_ID());
			header.setBusinessDate(SqlDateUtil.getUtilDate(headerIter.BUSINESS_DATE()));
			header.setOperationTime(SqlDateUtil.getUtilDate(headerIter.OPERATION_TIME()));
			header.setItemId(headerIter.ITEM_ID());
			header.setItemUnitPrice(headerIter.ITEM_UNIT_PRICE());
			header.setOrgiCount(headerIter.ORGI_COUNT());
			header.setItemCountIn(headerIter.ITEM_COUNT_IN());
			header.setItemCountOut(headerIter.ITEM_COUNT_OUT());
			header.setResultCount(headerIter.RESULT_COUNT());
			header.setFormId(headerIter.FORM_ID());
			header.setReason(headerIter.REASON());
			headerLst.add(header);
		}
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}	
	
	public int count(java.util.Date startDate, java.util.Date endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
        	SELECT
        	 	count(*) into :total
    	 	FROM
    	 	:{Com_("D_T0_STORAGE_IN_OUT")} s
        	    WHERE
				 s.BUSINESS_DATE >= :sDate 
				AND s.BUSINESS_DATE <= :eDate
				AND s.BRANCH_ID = :branchId
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	public int summaryCount(java.util.Date startDate, java.util.Date endDate, String branchId,String storageId, String branchType,String itemId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,storageId,itemId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		FROM
		    (
		        SELECT
		            io.ITEM_ID                               itemId,
		            im.ITEM_NAME                             itemName,
		            im.ITEM_DIMENSION                        unit,
		            '['|| b.BRANCH_ID || ']'|| b.BRANCH_NAME branchName,
		            '['|| bs.STORAGE_ID || ']'|| bs.STORAGE_NAME STORAGENAME,
		            ic.CATEGORY_NAME                         itemCategory
		        FROM
		        :{Com_("D_T0_STORAGE_IN_OUT")} io
		        LEFT JOIN
		        :{Com_("D_T2_BRANCH_STORAGE")} bs
		        ON
		            io.STORAGE_ID = bs.STORAGE_ID
		        LEFT JOIN
		        :{Com_("D_T2_ITEM_META")} im
		        ON
		            im.ITEM_ID = io.ITEM_ID
		        LEFT JOIN
		        :{Com_("D_T2_ITEM_CATEGORY")} ic
		        ON
		            im.CATEGORY_ID = ic.CATEGORY_ID
		        LEFT JOIN
		        :{Com_("D_T2_BRANCH")} b
		        ON
		            io.BRANCH_ID = b.BRANCH_ID
        		WHERE
					    	:{query ::}
		                AND (
		                        BUSINESS_DATE >= :sDate
		                    OR  :sDate IS NULL)
		                AND (
		                        BUSINESS_DATE <= :eDate
		                    OR  :eDate IS NULL)
		                AND    
						    b.BRANCH_TYPE = :branchType
		        GROUP BY
			        bs.STORAGE_ID,
			        bs.STORAGE_NAME,
			        b.BRANCH_ID ,
			        b.BRANCH_NAME,
			        io.ITEM_ID,
			        ic.CATEGORY_NAME,
			        im.ITEM_NAME ,
			        im.ITEM_DIMENSION )t};
		closeDefaultContext(myCtx);
		return total;
	}
	
	public StorageInOut detailSum(java.util.Date startDate, java.util.Date endDate, String branchId,String storageId,String itemId,String reason,String branchType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,storageId,itemId,reason);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DetailSumIter detailSumIter = null;
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] detailSumIter = {
			SELECT
				SUM(NVL(ITEM_COUNT_IN,0))                   itemCountIn,
			    SUM(NVL(ITEM_COUNT_IN * ITEM_UNIT_PRICE,0)) itemCountInMoney,
			    SUM(NVL(ITEM_COUNT_OUT,0))                  itemCountOut,
			    SUM(NVL(ITEM_COUNT_OUT * ITEM_UNIT_PRICE,0))itemCountOutMoney
			FROM
				:{Com_("D_T0_STORAGE_IN_OUT")} io
			LEFT JOIN
				:{Com_("D_T2_BRANCH")} b
		    ON
		        io.BRANCH_ID = b.BRANCH_ID
			WHERE
			:{query ::}
			AND b.BRANCH_TYPE = :branchType
			AND (BUSINESS_DATE >= :sDate or :sDate is null)
			AND (BUSINESS_DATE <= :eDate or :eDate is null)
		};
		
		StorageInOut storageInOut = new StorageInOut();
		while(detailSumIter.next()) {
			storageInOut.setItemCountIn(detailSumIter.itemCountIn());
			storageInOut.setItemCountInMoney(detailSumIter.itemCountInMoney());
			storageInOut.setItemCountOut(detailSumIter.itemCountOut());
			storageInOut.setItemCountOutMoney(detailSumIter.itemCountOutMoney());
		}
		
		closeDefaultContext(myCtx);
		return storageInOut;
	}
	
	private String formQuery(String branchId,String storageId,String itemId) {
		return formQuery(branchId,storageId,itemId,"head");
	}
	
	private String formQuery(String branchId,String storageId,String itemId,String reason) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND b.BRANCH_ID = '" + branchId + "'";
		}
		
		if (!TextUtil.isEmpty(storageId)) {
			query = query + " AND io.STORAGE_ID = '" + storageId + "'";
		}
		
		if (!TextUtil.isEmpty(itemId)) {
			query = query + " AND io.ITEM_ID = '" + itemId + "'";
		}
		
		if (!"head".equals(reason)) {
			query = query + " AND io.REASON = '" + reason + "'";
		}
		
		return query;
	}
	
	public List<StorageInOut> query(java.util.Date startDate, java.util.Date endDate, String branchId,String storageId,String itemId,String reason,String branchType,int startRow,int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,storageId,itemId,reason);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
		SELECT
			    *
			FROM
			    (
			        SELECT
			            t.*,
			            ROWNUM rowNumber
			        FROM
			            (
		            		SELECT
			            	    io. *,
			            	    '['|| b.BRANCH_ID || ']'|| b.BRANCH_NAME     BRANCH_NAME,
			            	    '['|| bs.STORAGE_ID || ']'|| bs.STORAGE_NAME STORAGE_NAME,
			            	    m.ITEM_DIMENSION                                 unit,
			            	    nvl(m.ITEM_NAME, ' ')ITEM_NAME
			            	FROM
			            	:{Com_("D_T0_STORAGE_IN_OUT")} io
			            	LEFT JOIN
			            	:{Com_("D_T2_BRANCH_STORAGE")} bs
			            	ON
			            	    io.STORAGE_ID = bs.STORAGE_ID
			            	LEFT JOIN
			            	:{Com_("D_T2_BRANCH")} b
			            	ON
			            	    io.BRANCH_ID = b.BRANCH_ID
			            	LEFT JOIN
			            	:{Com_("D_T2_ITEM_META")} m
			            	ON
			            	    io.ITEM_ID = m.ITEM_ID
			            	WHERE
			            	    :{query ::}
			            	AND (
			            	        BUSINESS_DATE >= :sDate
			            	    OR  :sDate IS NULL)
			            	AND (
			            	        BUSINESS_DATE <= :eDate
			            	    OR  :eDate IS NULL)
			            	AND b.BRANCH_TYPE = :branchType
			            	ORDER BY
			            	 io.BUSINESS_DATE,
			            	    CASE
			            	        WHEN io.REASON = 'PD'
			            	        THEN 1
			            	        ELSE 0
			            	    END ,
			            	    io.OPERATION_TIME) t
			        WHERE
			            ROWNUM < :endRow)
			WHERE
			    rowNumber >= :startRow
		};
		List<StorageInOut> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public List<StorageInOutSummary> summaryQuery(java.util.Date startDate, java.util.Date endDate, String branchId,String storageId,String branchType,String itemId,int startRow,int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId,storageId,itemId);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		SummaryIter summaryIter = null;
		#sql [myCtx] summaryIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    WITH
			                        a AS
			                        (
			                            SELECT
			                                io.ITEM_ID                                        itemId,
			                                im.ITEM_NAME                                      itemName,
			                                im.ITEM_DIMENSION                                    unit,
			                                SUM(NVL(ITEM_COUNT_IN,0))                            itemCountIn,
			                                SUM(NVL(ITEM_COUNT_IN,0)* NVL(io.ITEM_UNIT_PRICE,0)) itemCountInMoney,
			                                SUM(NVL(ITEM_COUNT_OUT,0))                           itemCountOut,
			                                SUM(NVL(ITEM_COUNT_OUT,0)* NVL(io.ITEM_UNIT_PRICE,0))itemCountOutMoney,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'CGRK'
			                                        THEN NVL(ITEM_COUNT_IN,0)
			                                        ELSE 0
			                                    END) putinstorage,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'PSRK'
			                                        THEN NVL(ITEM_COUNT_IN,0)
			                                        ELSE 0
			                                    END) distribution,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'PSFSH'
			                                        THEN NVL(ITEM_COUNT_IN,0)
			                                        ELSE 0
			                                    END) antiauditIn,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'PSFSH'
			                                        THEN NVL(ITEM_COUNT_OUT,0)
			                                        ELSE 0
			                                    END) antiauditOut,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'PSTH'
			                                        THEN NVL(ITEM_COUNT_OUT,0)
			                                        ELSE 0
			                                    END) dreject,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'CGTH'
			                                        THEN NVL(ITEM_COUNT_OUT,0)
			                                        ELSE 0
			                                    END) preject,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'YLBS'
			                                        THEN NVL(ITEM_COUNT_OUT,0)
			                                        ELSE 0
			                                    END) rawLoss,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'CPBS'
			                                        THEN NVL(ITEM_COUNT_OUT,0)
			                                        ELSE 0
			                                    END) dishLoss,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'DB'
			                                        THEN NVL(ITEM_COUNT_IN,0)
			                                        ELSE 0
			                                    END) allocateitemIn,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'DB'
			                                        THEN NVL(ITEM_COUNT_OUT,0)
			                                        ELSE 0
			                                    END) allocateitemOut,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'PD'
			                                        THEN NVL(ITEM_COUNT_IN,0)
			                                        ELSE 0
			                                    END) checkstorageIn,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'PD'
			                                        THEN NVL(ITEM_COUNT_OUT,0)
			                                        ELSE 0
			                                    END) checkstorageOut,
			                                SUM(
			                                    CASE
			                                        WHEN io.REASON = 'LLKU'
			                                        THEN NVL(ITEM_COUNT_OUT,0)
			                                        ELSE 0
			                                    END)                                 theoryDeduct,
			                                '['|| b.BRANCH_ID || ']'|| b.BRANCH_NAME     branchName,
			                                '['|| bs.STORAGE_ID || ']'|| bs.STORAGE_NAME STORAGENAME,
			                                ic.CATEGORY_NAME                             itemCategory
			                            FROM
			                            :{Com_("D_T0_STORAGE_IN_OUT")} io
			                            LEFT JOIN
			                            :{Com_("D_T2_BRANCH_STORAGE")} bs
			                            ON
			                                io.STORAGE_ID = bs.STORAGE_ID
			                            LEFT JOIN
			                            :{Com_("D_T2_ITEM_META")} im
			                            ON
			                                im.ITEM_ID = io.ITEM_ID
			                            LEFT JOIN
			                            :{Com_("D_T2_ITEM_CATEGORY")} ic
			                            ON
			                                im.CATEGORY_ID = ic.CATEGORY_ID
			                            LEFT JOIN
			                            :{Com_("D_T2_BRANCH")} b
			                            ON
			                                io.BRANCH_ID = b.BRANCH_ID
			                            WHERE
			                            	:{query ::}
			                            AND (
						                        BUSINESS_DATE >= :sDate
						                    OR  :sDate IS NULL)
						                AND (
						                        BUSINESS_DATE <= :eDate
						                    OR  :eDate IS NULL)
			                            AND b.BRANCH_TYPE = :branchType
			                            GROUP BY
			                                bs.STORAGE_ID,
			                                bs.STORAGE_NAME,
			                                b.BRANCH_ID ,
			                                b.BRANCH_NAME,
			                                io.ITEM_ID,
			                                ic.CATEGORY_NAME,
			                                im.ITEM_NAME ,
			                                im.ITEM_DIMENSION
			                            ORDER BY
			                                b.BRANCH_ID ,
			                                bs.STORAGE_ID,
			                                io.ITEM_ID
			                        )
			                        ,
			                        begining AS
			                        (
			                            SELECT
			                                io.ITEM_ID,
			                                io.ORGI_COUNT,
			                                io.BUSINESS_DATE
			                            FROM
			                            :{Com_("D_T0_STORAGE_IN_OUT")} io
			                            LEFT JOIN
			                            :{Com_("D_T2_BRANCH_STORAGE")} bs
			                            ON
			                                io.STORAGE_ID = bs.STORAGE_ID
			                            LEFT JOIN
			                            :{Com_("D_T2_BRANCH")} b
			                            ON
			                                io.BRANCH_ID = b.BRANCH_ID
			                            LEFT JOIN
			                            :{Com_("D_T2_ITEM_META")} m
			                            ON
			                                io.ITEM_ID = m.ITEM_ID
			                            WHERE
			                            	:{query ::}
			                        	AND (
						            	        BUSINESS_DATE >= :sDate
						            	    OR  :sDate IS NULL)
						            	AND (
						            	        BUSINESS_DATE <= :eDate
						            	    OR  :eDate IS NULL)
						            	AND b.BRANCH_TYPE = :branchType
			                            ORDER BY
			                                io.BUSINESS_DATE,
			                                CASE
			                                    WHEN io.REASON = 'PD'
			                                    THEN 1
			                                    ELSE 0
			                                END ,
			                                io.OPERATION_TIME
			                        )
			                    SELECT
			                        a.*,
			                        b.ORGI_COUNT orgiCount
			                    FROM
			                        a
			                    LEFT JOIN
			                        (
			                            SELECT
			                                t. *
			                            FROM
			                                (
			                                    SELECT
			                                        row_number()over(partition BY ITEM_ID ORDER BY BUSINESS_DATE )
			                                        rn,
			                                        begining.*
			                                    FROM
			                                        begining)t
			                            WHERE
			                                t.rn=1) b
			                    ON
			                        a.itemId = b.item_id) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<StorageInOutSummary> headerLst = summaryprocessIter(summaryIter);
		summaryIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	

	public StorageInOut queryByCondition(String branchId, String storageId,java.util.Date businessDate,String itemId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		Date sbusinessDate = SqlDateUtil.getSqlDate(businessDate);
		
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    io. *,
			    '['|| b.BRANCH_ID || ']'|| b.BRANCH_NAME     BRANCH_NAME,
			    '['|| bs.STORAGE_ID || ']'|| bs.STORAGE_NAME STORAGE_NAME,
			    m.ITEM_NAME
			FROM
			:{Com_("D_T0_STORAGE_IN_OUT")} io
			LEFT JOIN
			:{Com_("D_T2_BRANCH_STORAGE")} bs
			ON
			    io.STORAGE_ID = bs.STORAGE_ID
			LEFT JOIN
			:{Com_("D_T2_BRANCH")} b
			ON
			    io.BRANCH_ID = b.BRANCH_ID
			LEFT JOIN
			:{Com_("D_T2_ITEM_META")} m
			ON
			    io.ITEM_ID = m.ITEM_ID
			WHERE
			    io.STORAGE_ID = :storageId
    		AND io.BRANCH_ID =:branchId
			AND io.BUSINESS_DATE =:sbusinessDate
			AND io.ITEM_ID = :itemId
			AND io.REASON = 'PD'};
		
		List<StorageInOut> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<StorageInOutSummary> summaryprocessIter(SummaryIter summaryIter) 
			throws SQLException {
		List<StorageInOutSummary> headerLst = new ArrayList<StorageInOutSummary>();
		while(summaryIter.next()) {
			StorageInOutSummary header = new StorageInOutSummary();
			header.setItemId(summaryIter.itemid());
			header.setItemName(summaryIter.itemname());
			header.setUnit(summaryIter.unit());
			header.setItemCountIn(summaryIter.itemcountin());
			header.setItemCountInMoney(summaryIter.itemcountinmoney());
			header.setItemCountOut(summaryIter.itemcountout());
			header.setItemCountOutMoney(summaryIter.itemcountoutmoney());
			header.setPutinstorage(summaryIter.putinstorage());
			header.setDistribution(summaryIter.distribution());
			header.setAntiauditIn(summaryIter.antiauditin());
			header.setAntiauditOut(summaryIter.antiauditout());
			header.setDreject(summaryIter.dreject());
			header.setPreject(summaryIter.preject());
			header.setRawLoss(summaryIter.rawloss());
			header.setDishLoss(summaryIter.dishloss());
			header.setAllocateitemIn(summaryIter.allocateitemin());
			header.setAllocateitemOut(summaryIter.allocateitemout());
			header.setCheckstorageIn(summaryIter.checkstoragein());
			header.setCheckstorageOut(summaryIter.checkstorageout());
			header.setTheoryDeduct(summaryIter.theoryDeduct());
			header.setBranchName(summaryIter.branchname());
			header.setStorageName(summaryIter.storageName());
			header.setItemCategory(summaryIter.itemcategory());
			header.setOrgiCount(summaryIter.orgiCount());
			headerLst.add(header);
		}
		return headerLst;
	}
	public int deleteEntity(String startDate, String endDate, String branchId)
			throws NoPrivilegeException, SQLException, NoConnection {
	        DefaultContext myCtx = getDefaultContext();
			
//			Date sDate = SqlDateUtil.getSqlDate(startDate);
//			Date eDate = SqlDateUtil.getSqlDate(endDate);

			#sql [myCtx] {
				DELETE FROM
				(
					SELECT
					    *
					FROM
					:{Com_("D_T0_STORAGE_IN_OUT")} s
	        	    WHERE
	        	    s.OPERATION_TIME>= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND s.OPERATION_TIME <= to_date(:endDate,'YYYY-MM-DD HH24:mi:ss')
					AND s.BRANCH_ID = :branchId
					)
			};
			closeDefaultContext(myCtx);
			
			return 1;
		}
	private List<StorageInOut> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<StorageInOut> headerLst = new ArrayList<StorageInOut>();
		while(headerIter.next()) {
			StorageInOut header = new StorageInOut();
			header.setBranchId(headerIter.branch_id());
			header.setBranchName(headerIter.branch_name());
			header.setStorageId(headerIter.storage_Id());
			header.setStorageName(headerIter.storage_name());
			header.setBusinessDate(SqlDateUtil.getUtilDate(headerIter.business_date()));
			header.setOperationTime(SqlDateUtil.getUtilDate(headerIter.operation_time()));
			header.setItemId(headerIter.item_id());
			header.setItemName(headerIter.item_name());
			header.setUnit(headerIter.unit());
			header.setItemUnitPrice(headerIter.item_unit_price());
			header.setOrgiCount(headerIter.orgi_count());
			header.setItemCountIn(headerIter.item_count_in());
			header.setItemCountOut(headerIter.item_count_out());
			header.setResultCount(headerIter.result_count());
			header.setFormId(headerIter.form_id());
			header.setReason(headerIter.reason());
			headerLst.add(header);
		}
		return headerLst;
	}
	
	#sql private iterator itemQueryIter (String form_id, String item_id, String item_name, String branchId , Double item_count, String formType);
	public List<Map> queryByItemId(String startDate,String itemId, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		itemQueryIter detailIter = null;
		#sql [myCtx] detailIter = {
			        SELECT--采购入库
			        	ih.FORM_ID,
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            ih.INPUT_DEPARTMENT_ID branchId,
			            '采购入库' formType
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId
			        AND id.ITEM_ID = :itemId
		        UNION ALL--配送入库
		        SELECT
		            sh.FORM_ID,
			        sd.ITEM_ID,
			        sd.ITEM_NAME,
			        sd.RECEIVE_COUNT ITEM_COUNT,
			        sh.REQUESTER_ID branchId,
			        '配送入库' formType
		        FROM
	        	:{Com_("D_T1_SHIPPING_HEADER")} sh
	        	INNER JOIN
	        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
			    ON
			        sd.FORM_ID= sh.FORM_ID
			    WHERE
			    	sh.INPUT_TIME = to_date(:startDate,'yyyy-mm-dd') 
		        AND sh.REQUESTER_ID = :branchId 
		        AND sd.ITEM_ID = :itemId
        		UNION ALL--配送出库
		        SELECT
		        	sh.FORM_ID,
			        sd.ITEM_ID,
			        sd.ITEM_NAME,
			        -sd.DELIVERY_COUNT ITEM_COUNT,
			        sh.REQUESTER_ID branchId,
			        '配送出库' formType
		        FROM
	        	:{Com_("D_T1_SHIPPING_HEADER")} sh
	        	INNER JOIN
	        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
			    ON
			        sd.FORM_ID= sh.FORM_ID
			    WHERE
			    	sh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd') 
		        AND sh.PROVIDER_ID = :branchId 
		        AND sd.ITEM_ID = :itemId
		        UNION ALL
		        SELECT--配送采购退货
		        	rh.FORM_ID,
		            rd.ITEM_ID,
		            NVL(sd.ITEM_NAME,id.ITEM_NAME)                             ITEM_NAME,
		            -rd.RETURN_COUNT                                            ITEM_COUNT,
		            NVL(ih.INPUT_DEPARTMENT_ID,sh.REQUESTER_ID)                branchId,
		            DECODE(ih.INPUT_DEPARTMENT_ID,'','配送退货','采购退货') formType
		        FROM
		        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
		        INNER JOIN
		        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
		        ON
		            rh.FORM_ID=rd.FORM_ID
    		 	LEFT JOIN
    		 	 :{Com_("D_T1_SHIPPING_HEADER")} sh
                 ON
                     sh.FORM_ID=rd.FORM_REF_ID
		        LEFT JOIN
		        :{Com_("D_T1_SHIPPING_DETAIL")} sd
		        ON
		            sd.FORM_ID = rd.FORM_REF_ID
		        AND sd.item_id = rd.ITEM_ID
    		  LEFT JOIN
    		  :{Com_("D_T1_INPUT_HEADER")} ih
              ON
                  ih.FORM_ID=rd.FORM_REF_ID
		        LEFT JOIN
		        :{Com_("D_T1_INPUT_DETAIL")} id
		        ON
		            id.FORM_ID = rd.FORM_REF_ID
		        AND id.item_id = rd.ITEM_ID
		        WHERE
		            rh.AUDIT_TIME= to_date(:startDate,'yyyy-mm-dd')
		        AND (ih.INPUT_DEPARTMENT_ID=:branchId  OR  sh.REQUESTER_ID=:branchId )
		        AND (id.ITEM_ID = :itemId OR sd.ITEM_ID = :itemId)
		        UNION ALL
		        SELECT --报损单
		        	lh.FORM_ID,
		            ld.ITEM_ID,
		            ld.ITEM_NAME,
		            -ld.ITEM_COUNT ITEM_COUNT,
		            lh.LOSS_BRANCH_ID     branchId,
		            '报损单扣库'	formType
		        FROM
		        :{Com_("D_T1_LOSS_HEADER")} lh
		        INNER JOIN
		        :{Com_("D_T1_LOSS_DETAIL")} ld
		        ON
		            lh.FORM_ID=ld.FORM_ID
        		WHERE
 		            lh.AUDIT_TIME= to_date(:startDate,'yyyy-mm-dd')
		        AND lh.LOSS_BRANCH_ID =:branchId
		        AND (
		                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
		            OR  lh.LOSS_TYPE = 'RAWLOSS')
		        AND ld.ITEM_ID = :itemId
	    		UNION ALL
	    		SELECT --调拨出入
	    			th.FORM_ID,
		    	    td.ITEM_ID,
		    	    td.ITEM_NAME,
		    	    DECODE(:branchId ,th.IN_BRANCH_ID,td.ACTUAL_COUNT,-td.ACTUAL_COUNT) ITEM_COUNT,
		    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId,
		    	    '调拨出入库' formType
	    	    FROM
		    	:{Com_("D_T1_TRANSFER_HEADER")} th
		    	INNER JOIN
		    	:{Com_("D_T1_TRANSFER_DETAIL")} td
		    	ON
		    	    th.FORM_ID=td.FORM_ID
	    		WHERE
 		            th.CONFIRM_TIME = to_date(:startDate,'yyyy-mm-dd')
		    	AND (
		    	        th.IN_BRANCH_ID = :branchId
		    	    OR  th.OUT_BRANCH_ID= :branchId)	
	    	    AND td.ITEM_ID = :itemId
	    	    UNION ALL
	            SELECT
	            	'' formId,
	                trim(t.item_id) item_id,
	                t.ITEM_NAME,
	                -SUM(t.item_gross_count * d.nqty) ITEM_COUNT,
	                b.cbranch_c BRANCH_ID,
	                '销售扣仓' formType
	            FROM
	            :{Com_("d_t_food_bill")} b,
	            :{Com_("D_T_FOOD_BILLS")} d,
	            :{Com_("D_T2_THERAPY")} t
	            WHERE
	                trim(d.cbill_c) = trim(b.cbill_c)
	            AND trim(t.therapy_id) = trim(d.cfood_c)
	            AND trim(b.cbranch_c) = :branchId
	            AND t.ITEM_ID = :itemId
	            AND b.dbusiness = to_date(:startDate,'yyyy-mm-dd')
	            GROUP BY
		            trim(t.item_id),
		            t.ITEM_NAME,
		            b.cbranch_c
		        UNION ALL	
    	        SELECT
    	        	'' formId,
    	            s.ITEM_ID,
    	            m.ITEM_NAME,
    	            Round(SUM(s.ITEM_COUNT_IN-s.ITEM_COUNT_OUT),4) item_count,
    	            s.BRANCH_ID                           branchId,
    	            '仓库汇总' fromType
    	        FROM
    	        :{Com_("D_T0_STORAGE_IN_OUT")} s
    	        LEFT JOIN
    	        :{Com_("D_T2_ITEM_META")} m
	    	    ON
	    	        m.ITEM_ID=s.ITEM_ID
    	        WHERE
    	        	s.REASON!='PD'
    	        AND s.BUSINESS_DATE = to_date(:startDate,'yyyy-mm-dd')
        		AND s.BRANCH_ID= :branchId
        		AND s.ITEM_ID = :itemId
    	        GROUP BY
    	            s.ITEM_ID,
    	            s.BRANCH_ID,
    	            m.ITEM_NAME
		};
		List<Map> detailLst = processQueryItemIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	public List<Map> queryLcItemId(String startDate, String itemId,String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		itemQueryIter detailIter = null;
		#sql [myCtx] detailIter = {
			        SELECT--入库
			        	ih.FORM_ID,
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            ih.INPUT_DEPARTMENT_ID branchId,
			            '验收/半成品入库' formType
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId 
			        AND id.ITEM_ID = :itemId
			        UNION ALL
			        SELECT --配退入库，采退出库
			        	rh.FORM_ID,
				        rd.ITEM_ID,
				        NVL(sd.ITEM_NAME,id.ITEM_NAME)                             ITEM_NAME,
				        DECODE(SUBSTR(rd.FORM_ID,0,2) ,'CT',-rd.RETURN_COUNT,'PT',rd.RETURN_COUNT,0)    ITEM_COUNT,
				        NVL(ih.INPUT_DEPARTMENT_ID,sh.PROVIDER_ID)                branchId,
				        DECODE(SUBSTR(rd.FORM_ID,0,2) ,'CT','采退出库','PT','配退入库','未知') formType
			        FROM
			        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
			        INNER JOIN
			        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
			        ON
			            rh.FORM_ID=rd.FORM_ID
        		 	LEFT JOIN
        		 	 :{Com_("D_T1_SHIPPING_HEADER")} sh
	                 ON
	                     sh.FORM_ID=rd.FORM_REF_ID
			        LEFT JOIN
			        :{Com_("D_T1_SHIPPING_DETAIL")} sd
			        ON
			            sd.FORM_ID = rd.FORM_REF_ID
			        AND sd.item_id = rd.ITEM_ID
	        		LEFT JOIN
	        		:{Com_("D_T1_INPUT_HEADER")} ih
		        	ON
		        	    ih.FORM_ID=rd.FORM_REF_ID
		        	LEFT JOIN
		        	:{Com_("D_T1_INPUT_DETAIL")} id
		        	ON
		        	    id.FORM_ID = rd.FORM_REF_ID
		        	AND id.item_id = rd.ITEM_ID
			        WHERE
			            rh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND (sh.PROVIDER_ID = :branchId OR  ih.INPUT_DEPARTMENT_ID = :branchId)
			        AND rd.ITEM_ID = :itemId
	        		UNION ALL
	        		SELECT--配送出库，越库出库，外部出库
	        			sh.FORM_ID,
		        	    sd.ITEM_ID,
		        	    sd.ITEM_NAME,
		        	    -sd.DELIVERY_COUNT ITEM_COUNT,
		        	    sh.PROVIDER_ID      branchId,
		        	    '配送/越库/外部出库'	formType
	        	    FROM
		        	:{Com_("D_T1_SHIPPING_HEADER")} sh
		        	INNER JOIN
		        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
		        	ON
		        	    sd.FORM_ID= sh.FORM_ID
    	    		WHERE
				    	sh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND sh.PROVIDER_ID = :branchId 
			        AND	sd.ITEM_ID = :itemId
	        		UNION ALL
			        SELECT --报损单
			        	lh.FORM_ID,
			            ld.ITEM_ID,
			            ld.ITEM_NAME,
			            -ld.ITEM_COUNT ITEM_COUNT,
			            lh.LOSS_BRANCH_ID                                           branchId,
			            '报损单出库'	formType
			        FROM
			        :{Com_("D_T1_LOSS_HEADER")} lh
			        INNER JOIN
			        :{Com_("D_T1_LOSS_DETAIL")} ld
			        ON
			            lh.FORM_ID=ld.FORM_ID
	        		WHERE
	 		            lh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND lh.LOSS_BRANCH_ID =:branchId
			        AND (
			                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
			            OR  lh.LOSS_TYPE = 'RAWLOSS')
		            AND ld.ITEM_ID = :itemId
		            UNION ALL
		    		SELECT --调拨出入
		    			th.FORM_ID,
			    	    td.ITEM_ID,
			    	    td.ITEM_NAME,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,td.ACTUAL_COUNT,-td.ACTUAL_COUNT) ITEM_COUNT,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,'调拨入库','调拨出库') formType 
		    	    FROM
			    	:{Com_("D_T1_TRANSFER_HEADER")} th
			    	INNER JOIN
			    	:{Com_("D_T1_TRANSFER_DETAIL")} td
			    	ON
			    	    th.FORM_ID=td.FORM_ID
		    		WHERE
	 		            th.CONFIRM_TIME = to_date(:startDate,'yyyy-mm-dd')
			    	AND (
			    	        th.IN_BRANCH_ID = :branchId
			    	    OR  th.OUT_BRANCH_ID= :branchId)
		    	    AND td.ITEM_ID = :itemId
		    		UNION ALL
	    	        SELECT
	    	        	'' FORM_ID,
	    	            s.ITEM_ID,
	    	            m.ITEM_NAME,
	    	            ROUND(SUM(s.ITEM_COUNT_IN-s.ITEM_COUNT_OUT),4) item_count,
	    	            s.BRANCH_ID                           branchId,
	    	            '仓库出入库'	formType
	    	        FROM
	    	        :{Com_("D_T0_STORAGE_IN_OUT")} s
	    	        LEFT JOIN
	    	        :{Com_("D_T2_ITEM_META")} m
		    	    ON
		    	        m.ITEM_ID=s.ITEM_ID
	    	        WHERE
	    	        	s.REASON!='PD'
	    	        AND s.BUSINESS_DATE = to_date(:startDate,'yyyy-mm-dd')
	    	        AND s.BRANCH_ID= :branchId
	    	        AND s.ITEM_ID = :itemId
	    	        GROUP BY
	    	            s.ITEM_ID,
	    	            m.ITEM_NAME,
	    	            s.BRANCH_ID
			};
			List<Map> detailLst = processQueryItemIter(detailIter);
			detailIter.close();
			closeDefaultContext(myCtx);
			return detailLst;
	}
	
	public List<Map> queryCFItemId(String startDate,String itemId, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		itemQueryIter detailIter = null;
		#sql [myCtx] detailIter = {
			        SELECT --采购入库,产品入库
			        	ih.FORM_ID,
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            ih.INPUT_DEPARTMENT_ID branchId,
			            '采购/产品入库' formType
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId 
			        AND id.ITEM_ID = :itemId
			        UNION ALL
			        SELECT--物流中心采购退货加库存，自己退货减库存
			        	rh.FORM_ID,
			            rd.ITEM_ID,
			            id.ITEM_NAME            ITEM_NAME,
			            DECODE(ih.INPUT_DEPARTMENT_ID,:branchId,-rd.RETURN_COUNT ,rd.RETURN_COUNT )  ITEM_COUNT,
			            DECODE(ih.INPUT_DEPARTMENT_ID, :branchId ,ih.INPUT_DEPARTMENT_ID,ih.PROVIDER_ID )     branchId,
			            DECODE(ih.INPUT_DEPARTMENT_ID, :branchId ,'央采购退货入库','物采购退货出库' ) formType
			        FROM
			        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
			        INNER JOIN
			        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
			        ON
			            rh.FORM_ID=rd.FORM_ID
            		 LEFT JOIN
            		 :{Com_("D_T1_INPUT_HEADER")} ih
	                 ON
	                     ih.FORM_ID=rd.FORM_REF_ID
	                 LEFT JOIN
	                 :{Com_("D_T1_INPUT_DETAIL")} id
	                 ON
	                     id.FORM_ID = rd.FORM_REF_ID
	                 AND id.item_id = rd.ITEM_ID
			        WHERE
			            rh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
					AND (ih.INPUT_DEPARTMENT_ID=:branchId or ih.PROVIDER_ID=:branchId)
					AND rd.ITEM_ID = :itemId
	        		UNION ALL
			        SELECT --报损单
			        	lh.FORM_ID,
			            ld.ITEM_ID,
			            ld.ITEM_NAME,
			            -ld.ITEM_COUNT ITEM_COUNT,
			            lh.LOSS_BRANCH_ID         branchId,
			            '报损单'	formType
			        FROM
			        :{Com_("D_T1_LOSS_HEADER")} lh
			        INNER JOIN
			        :{Com_("D_T1_LOSS_DETAIL")} ld
			        ON
			            lh.FORM_ID=ld.FORM_ID
	        		WHERE
	 		            lh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND lh.LOSS_BRANCH_ID =:branchId
			        AND (
			                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
			            OR  lh.LOSS_TYPE = 'RAWLOSS')
		            AND ld.ITEM_ID = :itemId
		           UNION ALL
		    		SELECT --调拨
		    			th.FORM_ID,
			    	    td.ITEM_ID,
			    	    td.ITEM_NAME,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,td.ACTUAL_COUNT,-td.ACTUAL_COUNT) ITEM_COUNT,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,'调拨入库','调拨出库') formType
			    	FROM
			    	:{Com_("D_T1_TRANSFER_HEADER")} th
			    	INNER JOIN
			    	:{Com_("D_T1_TRANSFER_DETAIL")} td
			    	ON
			    	    th.FORM_ID=td.FORM_ID
		    		WHERE
	 		            th.CONFIRM_TIME = to_date(:startDate,'yyyy-mm-dd')
			    	AND (
			    	        th.IN_BRANCH_ID = :branchId
			    	    OR  th.OUT_BRANCH_ID= :branchId)
	    	    	AND td.ITEM_ID = :itemId
		    	    UNION ALL
		    	    SELECT --领料,超领,退料,非工单领料
		    	    	rh.FORM_ID,
			    	    rd.ITEM_ID,
			    	    rd.ITEM_NAME,
			    	    DECODE(rh.FORM_TYPE,'return',rd.ITEM_COUNT,-rd.RECEIVE_COUNT) ITEM_COUNT,
			    	    rh.FORM_BRANCH_ID            branchId,
			    	    DECODE(rh.FORM_TYPE,'return','退料入库','领料出库') formType
			    	FROM
			    	:{Com_("D_T1_REQUISITION_HEADER")} rh
			    	INNER JOIN
			    	:{Com_("D_T1_REQUISITION_DETAIL")} rd
			    	ON
			    	    rd.FORM_ID= rh.FORM_ID
			    	LEFT JOIN
			    	:{Com_("D_T2_ITEM_PRICE")} p
			    	ON
			    	    p.ITEM_ID = rd.ITEM_ID
			    	AND p.PRICE_TYPE LIKE 'BENCHMARK%' --标准价
			    	AND p.IS_CURRENT =1
			    	WHERE
		    	 		rh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			    	AND rh.FORM_BRANCH_ID = :branchId 
			    	AND rd.ITEM_ID = :itemId
			    	UNION ALL
	        		SELECT--出品出库
	        			sh.FORM_ID,
		        	    sd.ITEM_ID,
		        	    sd.ITEM_NAME,
		        	    -sd.DELIVERY_COUNT ITEM_COUNT,
		        	    sh.PROVIDER_ID      branchId,
		        	    '出品出库'	formType
		        	FROM
		        	:{Com_("D_T1_SHIPPING_HEADER")} sh
		        	INNER JOIN
		        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
		        	ON
		        	    sd.FORM_ID= sh.FORM_ID
    	    		WHERE
				    	sh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND sh.PROVIDER_ID = :branchId
			        AND sd.ITEM_ID = :itemId
		    		UNION ALL
		    	        SELECT
		    	        	'' FORM_ID,
		    	            s.ITEM_ID,
		    	            m.ITEM_NAME,
		    	            ROUND(SUM(s.ITEM_COUNT_IN-s.ITEM_COUNT_OUT),4) item_count,
		    	            s.BRANCH_ID                           branchId,
			    	        '仓库出入库'	formType
			    	        FROM
			    	        :{Com_("D_T0_STORAGE_IN_OUT")} s
			    	        LEFT JOIN
			    	        :{Com_("D_T2_ITEM_META")} m
				    	    ON
				    	        m.ITEM_ID=s.ITEM_ID
			    	        WHERE
			    	        	s.REASON!='PD'
			    	        AND s.BUSINESS_DATE = to_date(:startDate,'yyyy-mm-dd')
			    	        AND s.BRANCH_ID= :branchId
			    	        AND s.ITEM_ID = :itemId
			    	        GROUP BY
			    	            s.ITEM_ID,
			    	            m.ITEM_NAME,
			    	            s.BRANCH_ID
			};
			List<Map> detailLst = processQueryItemIter(detailIter);
			detailIter.close();
			closeDefaultContext(myCtx);
			return detailLst;
	}
	
	private List<Map> processQueryItemIter(itemQueryIter detailIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		while(detailIter.next()) {
			Map<String, Object> detail = new HashMap<String, Object>();
			detail.put("formId", detailIter.form_id());
			detail.put("itemId", detailIter.item_id());
			detail.put("itemName", detailIter.item_name());
			detail.put("itemCount", detailIter.item_count());
			detail.put("formType", detailIter.formType());
			headerLst.add(detail);
		}
		return headerLst;
	}
	
	#sql private iterator ItemComputeIter(String item_id,String item_name,String branchId, Double item_count,Double storage_count);
	public List<Map> computeItem(String startDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		ItemComputeIter detailIter = null;
		#sql [myCtx] detailIter = {
				WITH
			    a AS
			    (
			        SELECT--采购入库
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            ih.INPUT_DEPARTMENT_ID branchId
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId 
		        UNION ALL--配送入库
		        SELECT
			        sd.ITEM_ID,
			        sd.ITEM_NAME,
			        sd.RECEIVE_COUNT ITEM_COUNT,
			        sh.REQUESTER_ID branchId
		        FROM
	        	:{Com_("D_T1_SHIPPING_HEADER")} sh
	        	INNER JOIN
	        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
			    ON
			        sd.FORM_ID= sh.FORM_ID
			    WHERE
			    	sh.INPUT_TIME = to_date(:startDate,'yyyy-mm-dd') 
		        AND sh.REQUESTER_ID = :branchId 
        		UNION ALL--配送出库
		        SELECT
			        sd.ITEM_ID,
			        sd.ITEM_NAME,
			        -sd.RECEIVE_COUNT ITEM_COUNT,
			        sh.REQUESTER_ID branchId
		        FROM
	        	:{Com_("D_T1_SHIPPING_HEADER")} sh
	        	INNER JOIN
	        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
			    ON
			        sd.FORM_ID= sh.FORM_ID
			    WHERE
			    	sh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd') 
		        AND sh.PROVIDER_ID = :branchId 
		        UNION ALL
		        SELECT--配送采购退货
		            rd.ITEM_ID,
		            NVL(sd.ITEM_NAME,id.ITEM_NAME)                             ITEM_NAME,
		            -rd.RETURN_COUNT                                            ITEM_COUNT,
		            NVL(ih.INPUT_DEPARTMENT_ID,sh.REQUESTER_ID)                branchId
		        FROM
		        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
		        INNER JOIN
		        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
		        ON
		            rh.FORM_ID=rd.FORM_ID
    		 	LEFT JOIN
    		 	 :{Com_("D_T1_SHIPPING_HEADER")} sh
                 ON
                     sh.FORM_ID=rd.FORM_REF_ID
		        LEFT JOIN
		        :{Com_("D_T1_SHIPPING_DETAIL")} sd
		        ON
		            sd.FORM_ID = rd.FORM_REF_ID
		        AND sd.item_id = rd.ITEM_ID
    		  LEFT JOIN
    		  :{Com_("D_T1_INPUT_HEADER")} ih
              ON
                  ih.FORM_ID=rd.FORM_REF_ID
		        LEFT JOIN
		        :{Com_("D_T1_INPUT_DETAIL")} id
		        ON
		            id.FORM_ID = rd.FORM_REF_ID
		        AND id.item_id = rd.ITEM_ID
		        WHERE
		            rh.AUDIT_TIME= to_date(:startDate,'yyyy-mm-dd')
		        AND (ih.INPUT_DEPARTMENT_ID=:branchId  OR  sh.REQUESTER_ID=:branchId )
		        UNION ALL
		        SELECT --报损单
		            ld.ITEM_ID,
		            ld.ITEM_NAME,
		            -ld.ITEM_COUNT ITEM_COUNT,
		            lh.LOSS_BRANCH_ID                                           branchId
		        FROM
		        :{Com_("D_T1_LOSS_HEADER")} lh
		        INNER JOIN
		        :{Com_("D_T1_LOSS_DETAIL")} ld
		        ON
		            lh.FORM_ID=ld.FORM_ID
        		WHERE
 		            lh.AUDIT_TIME= to_date(:startDate,'yyyy-mm-dd')
		        AND lh.LOSS_BRANCH_ID =:branchId
		        AND (
		                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
		            OR  lh.LOSS_TYPE = 'RAWLOSS')
	    		UNION ALL
	    		SELECT --调拨出入
		    	    td.ITEM_ID,
		    	    td.ITEM_NAME,
		    	    DECODE(:branchId ,th.IN_BRANCH_ID,td.ACTUAL_COUNT,-td.ACTUAL_COUNT) ITEM_COUNT,
		    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId
	    	    FROM
		    	:{Com_("D_T1_TRANSFER_HEADER")} th
		    	INNER JOIN
		    	:{Com_("D_T1_TRANSFER_DETAIL")} td
		    	ON
		    	    th.FORM_ID=td.FORM_ID
	    		WHERE
 		            th.CONFIRM_TIME = to_date(:startDate,'yyyy-mm-dd')
		    	AND (
		    	        th.IN_BRANCH_ID = :branchId
		    	    OR  th.OUT_BRANCH_ID= :branchId)	
	    	    UNION ALL
	            SELECT
	                trim(t.item_id) item_id,
	                t.ITEM_NAME,
	                -SUM(t.item_gross_count * d.nqty) ITEM_COUNT,
	                b.cbranch_c BRANCH_ID
	            FROM
	            :{Com_("d_t_food_bill")} b,
	            :{Com_("D_T_FOOD_BILLS")} d,
	            :{Com_("D_T2_THERAPY")} t
	            WHERE
	                trim(d.cbill_c) = trim(b.cbill_c)
	            AND trim(t.therapy_id) = trim(d.cfood_c)
	            AND trim(b.cbranch_c) = :branchId
	            AND b.dbusiness = to_date(:startDate,'yyyy-mm-dd')
	            GROUP BY
		            trim(t.item_id),
		            t.ITEM_NAME,
		            b.cbranch_c
			    		),
			    	    b AS
			    	    (
			    	        SELECT
			    	            s.ITEM_ID,
			    	            s.BRANCH_ID                           branchId,
			    	            Round(SUM(s.ITEM_COUNT_IN-s.ITEM_COUNT_OUT),4) item_count
			    	        FROM
			    	        :{Com_("D_T0_STORAGE_IN_OUT")} s
			    	        WHERE
			    	        	s.REASON!='PD'
			    	        AND s.BUSINESS_DATE = to_date(:startDate,'yyyy-mm-dd')
	    	        		AND s.BRANCH_ID= :branchId 
			    	        GROUP BY
			    	            s.ITEM_ID,
			    	            s.BRANCH_ID
			    	    )
			    	    ,
			    	    c AS
			    	    (
			    	        SELECT
			    	            a.item_id,
			    	            a.branchId,
			    	            Round(SUM(a.ITEM_COUNT),4) ITEM_COUNT
			    	        FROM
			    	            a
			    	        GROUP BY
			    	            a.item_id,
			    	            a.branchId
			    	    )
			    	SELECT
			    	    c.item_id,
			    	    m.ITEM_NAME,
			    	    c.branchId,
			    	    c.ITEM_COUNT item_count,
			    	    b.item_count storage_count
			    	FROM
			    	    c
			    	LEFT JOIN
			    	    b
			    	ON
			    	    b.item_id = c.item_id
			    	AND b.branchId = c.branchId
	    			LEFT JOIN
	    			:{Com_("D_T2_ITEM_META")} m
		    		ON
		    		    m.ITEM_ID=b.item_id
			    	WHERE
			    	 b.item_count!=c.item_count
			    	 AND ABS(b.item_count-c.item_count)>0.0004
		};
		List<Map> detailLst = processComputeIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	public List<Map> computeLcItem(String startDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		ItemComputeIter detailIter = null;
		#sql [myCtx] detailIter = {
				WITH
			    a AS
			    (
			        SELECT--入库
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            ih.INPUT_DEPARTMENT_ID branchId
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId 
			        UNION ALL
			        SELECT --配退入库，采退出库
				        rd.ITEM_ID,
				        NVL(sd.ITEM_NAME,id.ITEM_NAME)                             ITEM_NAME,
				        DECODE(SUBSTR(rd.FORM_ID,0,2) ,'CT',-rd.RETURN_COUNT,'PT',rd.RETURN_COUNT,0)    ITEM_COUNT,
				        NVL(ih.INPUT_DEPARTMENT_ID,sh.PROVIDER_ID)                branchId
			        FROM
			        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
			        INNER JOIN
			        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
			        ON
			            rh.FORM_ID=rd.FORM_ID
        		 	LEFT JOIN
        		 	 :{Com_("D_T1_SHIPPING_HEADER")} sh
	                 ON
	                     sh.FORM_ID=rd.FORM_REF_ID
			        LEFT JOIN
			        :{Com_("D_T1_SHIPPING_DETAIL")} sd
			        ON
			            sd.FORM_ID = rd.FORM_REF_ID
			        AND sd.item_id = rd.ITEM_ID
	        		LEFT JOIN
	        		:{Com_("D_T1_INPUT_HEADER")} ih
		        	ON
		        	    ih.FORM_ID=rd.FORM_REF_ID
		        	LEFT JOIN
		        	:{Com_("D_T1_INPUT_DETAIL")} id
		        	ON
		        	    id.FORM_ID = rd.FORM_REF_ID
		        	AND id.item_id = rd.ITEM_ID
			        WHERE
			            rh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND (sh.PROVIDER_ID = :branchId OR  ih.INPUT_DEPARTMENT_ID = :branchId)
	        		UNION ALL
	        		SELECT--配送出库，越库出库，外部出库
		        	    sd.ITEM_ID,
		        	    sd.ITEM_NAME,
		        	    -sd.DELIVERY_COUNT ITEM_COUNT,
		        	    sh.PROVIDER_ID      branchId
	        	    FROM
		        	:{Com_("D_T1_SHIPPING_HEADER")} sh
		        	INNER JOIN
		        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
		        	ON
		        	    sd.FORM_ID= sh.FORM_ID
    	    		WHERE
				    	sh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND sh.PROVIDER_ID = :branchId 
	        		UNION ALL
			        SELECT --报损单
			            ld.ITEM_ID,
			            ld.ITEM_NAME,
			            -ld.ITEM_COUNT ITEM_COUNT,
			            lh.LOSS_BRANCH_ID                                           branchId
			        FROM
			        :{Com_("D_T1_LOSS_HEADER")} lh
			        INNER JOIN
			        :{Com_("D_T1_LOSS_DETAIL")} ld
			        ON
			            lh.FORM_ID=ld.FORM_ID
	        		WHERE
	 		            lh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND lh.LOSS_BRANCH_ID =:branchId
			        AND (
			                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
			            OR  lh.LOSS_TYPE = 'RAWLOSS')
		            UNION ALL
		    		SELECT --调拨出入
			    	    td.ITEM_ID,
			    	    td.ITEM_NAME,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,td.ACTUAL_COUNT,-td.ACTUAL_COUNT) ITEM_COUNT,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId
		    	    FROM
			    	:{Com_("D_T1_TRANSFER_HEADER")} th
			    	INNER JOIN
			    	:{Com_("D_T1_TRANSFER_DETAIL")} td
			    	ON
			    	    th.FORM_ID=td.FORM_ID
		    		WHERE
	 		            th.CONFIRM_TIME = to_date(:startDate,'yyyy-mm-dd')
			    	AND (
			    	        th.IN_BRANCH_ID = :branchId
			    	    OR  th.OUT_BRANCH_ID= :branchId)	
				    		),
				    	    b AS
				    	    (
				    	        SELECT
				    	            s.ITEM_ID,
				    	            s.BRANCH_ID                           branchId,
				    	            ROUND(SUM(s.ITEM_COUNT_IN-s.ITEM_COUNT_OUT),4) item_count
				    	        FROM
				    	        :{Com_("D_T0_STORAGE_IN_OUT")} s
				    	        WHERE
				    	        	s.REASON!='PD'
				    	        AND s.BUSINESS_DATE = to_date(:startDate,'yyyy-mm-dd')
				    	        AND s.BRANCH_ID= :branchId 
				    	        GROUP BY
				    	            s.ITEM_ID,
				    	            s.BRANCH_ID
				    	    )
				    	    ,
				    	    c AS
				    	    (
				    	        SELECT
				    	            a.item_id,
				    	            a.branchId,
				    	            ROUND(SUM(a.ITEM_COUNT),4) ITEM_COUNT
				    	        FROM
				    	            a
				    	        GROUP BY
				    	            a.item_id,
				    	            a.branchId
				    	    )
				    	SELECT
				    	    c.item_id,
				    	    m.item_name,
				    	    c.branchId,
				    	    c.ITEM_COUNT item_count,
				    	    b.item_count storage_count
				    	FROM
				    	    c
				    	LEFT JOIN
				    	    b
				    	ON
				    	    b.item_id = c.item_id
				    	AND b.branchId = c.branchId
		    			LEFT JOIN
		    			:{Com_("D_T2_ITEM_META")} m
			    		ON
			    		    m.ITEM_ID=b.item_id
				    	WHERE
				    	 b.item_count!=c.item_count
				    	 AND ABS(b.item_count-c.item_count)>0.0004
			};
			List<Map> detailLst = processComputeIter(detailIter);
			detailIter.close();
			closeDefaultContext(myCtx);
			return detailLst;
	}
	
	public List<Map> computeCFItem(String startDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		ItemComputeIter detailIter = null;
		#sql [myCtx] detailIter = {
				WITH
			    a AS
			    (
			        SELECT --采购入库,产品入库
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            ih.INPUT_DEPARTMENT_ID branchId
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId 
			        UNION ALL
			        SELECT--物流中心采购退货加库存，自己退货减库存
			            rd.ITEM_ID,
			            id.ITEM_NAME            ITEM_NAME,
			            DECODE(ih.INPUT_DEPARTMENT_ID,:branchId,-rd.RETURN_COUNT ,rd.RETURN_COUNT )  ITEM_COUNT,
			            DECODE(ih.INPUT_DEPARTMENT_ID, 'F00' ,ih.INPUT_DEPARTMENT_ID,ih.PROVIDER_ID )     branchId
			        FROM
			        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
			        INNER JOIN
			        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
			        ON
			            rh.FORM_ID=rd.FORM_ID
            		 LEFT JOIN
            		 :{Com_("D_T1_INPUT_HEADER")} ih
	                 ON
	                     ih.FORM_ID=rd.FORM_REF_ID
	                 LEFT JOIN
	                 :{Com_("D_T1_INPUT_DETAIL")} id
	                 ON
	                     id.FORM_ID = rd.FORM_REF_ID
	                 AND id.item_id = rd.ITEM_ID
			        WHERE
			            rh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
					AND (ih.INPUT_DEPARTMENT_ID=:branchId or ih.PROVIDER_ID=:branchId)
	        		UNION ALL
			        SELECT --报损单
			            ld.ITEM_ID,
			            ld.ITEM_NAME,
			            -ld.ITEM_COUNT ITEM_COUNT,
			            lh.LOSS_BRANCH_ID         branchId
			        FROM
			        :{Com_("D_T1_LOSS_HEADER")} lh
			        INNER JOIN
			        :{Com_("D_T1_LOSS_DETAIL")} ld
			        ON
			            lh.FORM_ID=ld.FORM_ID
	        		WHERE
	 		            lh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND lh.LOSS_BRANCH_ID =:branchId
			        AND (
			                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
			            OR  lh.LOSS_TYPE = 'RAWLOSS')
		           UNION ALL
		    		SELECT --调拨
			    	    td.ITEM_ID,
			    	    td.ITEM_NAME,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,td.ACTUAL_COUNT,-td.ACTUAL_COUNT) ITEM_COUNT,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId
			    	FROM
			    	:{Com_("D_T1_TRANSFER_HEADER")} th
			    	INNER JOIN
			    	:{Com_("D_T1_TRANSFER_DETAIL")} td
			    	ON
			    	    th.FORM_ID=td.FORM_ID
		    		WHERE
	 		            th.CONFIRM_TIME = to_date(:startDate,'yyyy-mm-dd')
			    	AND (
			    	        th.IN_BRANCH_ID = :branchId
			    	    OR  th.OUT_BRANCH_ID= :branchId)
		    	    UNION ALL
		    	    SELECT --领料,超领,退料,非工单领料
			    	    rd.ITEM_ID,
			    	    rd.ITEM_NAME,
			    	    DECODE(rh.FORM_TYPE,'return',rd.ITEM_COUNT,-rd.RECEIVE_COUNT) ITEM_COUNT,
			    	    rh.FORM_BRANCH_ID            branchId
			    	FROM
			    	:{Com_("D_T1_REQUISITION_HEADER")} rh
			    	INNER JOIN
			    	:{Com_("D_T1_REQUISITION_DETAIL")} rd
			    	ON
			    	    rd.FORM_ID= rh.FORM_ID
			    	LEFT JOIN
			    	:{Com_("D_T2_ITEM_PRICE")} p
			    	ON
			    	    p.ITEM_ID = rd.ITEM_ID
			    	AND p.PRICE_TYPE LIKE 'BENCHMARK%' --标准价
			    	AND p.IS_CURRENT =1
			    	WHERE
		    	 		rh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			    	AND rh.FORM_BRANCH_ID = :branchId 
			    	UNION ALL
	        		SELECT--出品出库
		        	    sd.ITEM_ID,
		        	    sd.ITEM_NAME,
		        	    -sd.DELIVERY_COUNT ITEM_COUNT,
		        	    sh.PROVIDER_ID      branchId
		        	FROM
		        	:{Com_("D_T1_SHIPPING_HEADER")} sh
		        	INNER JOIN
		        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
		        	ON
		        	    sd.FORM_ID= sh.FORM_ID
    	    		WHERE
				    	sh.AUDIT_TIME = to_date(:startDate,'yyyy-mm-dd')
			        AND sh.PROVIDER_ID = :branchId 
				    		),
				    	    b AS
				    	    (
				    	        SELECT
				    	            s.ITEM_ID,
				    	            s.BRANCH_ID                           branchId,
				    	            ROUND(SUM(s.ITEM_COUNT_IN-s.ITEM_COUNT_OUT),4) item_count
				    	        FROM
				    	        :{Com_("D_T0_STORAGE_IN_OUT")} s
				    	        WHERE
				    	        	s.REASON!='PD'
				    	        AND s.BUSINESS_DATE = to_date(:startDate,'yyyy-mm-dd')
		    	        		AND s.BRANCH_ID= :branchId 
				    	        GROUP BY
				    	            s.ITEM_ID,
				    	            s.BRANCH_ID
				    	    )
				    	    ,
				    	    c AS
				    	    (
				    	        SELECT
				    	            a.item_id,
				    	            a.branchId,
				    	            ROUND(SUM(a.ITEM_COUNT),4) ITEM_COUNT
				    	        FROM
				    	            a
				    	        GROUP BY
				    	            a.item_id,
				    	            a.branchId
				    	    )
				    	SELECT
				    	    c.item_id,
				    	    m.item_name,
				    	    c.branchId,
				    	    c.ITEM_COUNT item_count,
				    	    b.item_count storage_count
				    	FROM
				    	    c
				    	LEFT JOIN
				    	    b
				    	ON
				    	    b.item_id = c.item_id
				    	AND b.branchId = c.branchId
		    			LEFT JOIN
		    			:{Com_("D_T2_ITEM_META")} m
			    		ON
			    		    m.ITEM_ID=b.item_id
				    	WHERE
				    	 b.item_count!=c.item_count
				    	 AND ABS(b.item_count-c.item_count)>0.0004
			};
			List<Map> detailLst = processComputeIter(detailIter);
			detailIter.close();
			closeDefaultContext(myCtx);
			return detailLst;
	}
	
	private List<Map> processComputeIter(ItemComputeIter detailIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		while(detailIter.next()) {
			Map<String, Object> detail = new HashMap<String, Object>();
			detail.put("itemId", detailIter.item_id());
			detail.put("itemName", detailIter.item_name());
			detail.put("branchId", detailIter.branchId());
			detail.put("itemCount", detailIter.item_count());
			detail.put("storageCount", detailIter.storage_count());
			headerLst.add(detail);
		}
		return headerLst;
	}
	
	#sql private iterator ItemDetailIter( String item_dimension,String item_id, String item_name, Double item_unit_price, Double item_count, String form_id,Double pay_amt,String type_flag,String branchId ,String reason,Date operationTime, Date restaurantDate);
	public List<Map> queryItem(String startDate, String endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
//		Date sDate = SqlDateUtil.getSqlDate(startDate);
//		Date eDate = SqlDateUtil.getSqlDate(endDate);
//		if(!TextUtil.isEmpty(branchId)){
//			
//		}
		DefaultContext myCtx = getDefaultContext();
		ItemDetailIter detailIter = null;
		#sql [myCtx] detailIter = {
				WITH
			    a AS
			    (
			        SELECT--采购入库
			            id.FORM_ID,
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.ITEM_DIMENSION,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            id.ITEM_UNIT_PRICE,
			            id.PAY_AMT,
			            ih.INPUT_DEPARTMENT_ID branchId,
			            ih.AUDIT_TIME          restaurantDate,
			            ih.AUDIT_TIME_ACTUAL   operationTime,
			            DECODE(ih.FORM_TYPE,'PURCHASE','CGRK','PRODUCE','CPRK','MANUAL','CGRK','SEMIS','PSRK' ,'')  reason,
			            'IN' type_flag
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND ih.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId 
		        UNION ALL--配送入库
		        SELECT
			        sd.FORM_ID,
			        sd.ITEM_ID,
			        sd.ITEM_NAME,
			        sd.ITEM_DIMENSION,
			        sd.RECEIVE_COUNT ITEM_COUNT,
			        sd.ITEM_UNIT_PRICE,
			        sd.PAY_AMT,
			        sh.REQUESTER_ID branchId,
			        sh.INPUT_TIME        restaurantDate,
			        sh.INPUT_TIME_ACTUAL operationTime,
			        'PSRK'          reason,
			        'IN'            type_flag
		        FROM
	        	:{Com_("D_T1_SHIPPING_HEADER")} sh
	        	INNER JOIN
	        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
			    ON
			        sd.FORM_ID= sh.FORM_ID
			    WHERE
			    	sh.INPUT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss') 
				AND sh.INPUT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
		        AND sh.REQUESTER_ID = :branchId 
        		UNION ALL--配送出库
		        SELECT
			        sd.FORM_ID,
			        sd.ITEM_ID,
			        sd.ITEM_NAME,
			        sd.ITEM_DIMENSION,
			        sd.RECEIVE_COUNT ITEM_COUNT,
			        sd.ITEM_UNIT_PRICE,
			        sd.PAY_AMT,
			        sh.REQUESTER_ID branchId,
			        sh.INPUT_TIME        restaurantDate,
			        sh.INPUT_TIME_ACTUAL operationTime,
			        'PSCK'          reason,
			        'OUT'            type_flag
		        FROM
	        	:{Com_("D_T1_SHIPPING_HEADER")} sh
	        	INNER JOIN
	        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
			    ON
			        sd.FORM_ID= sh.FORM_ID
			    WHERE
			    	sh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss') 
				AND sh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
		        AND sh.PROVIDER_ID = :branchId 
		        UNION ALL
		        SELECT--配送采购退货
		            rd.FORM_ID,
		            rd.ITEM_ID,
		            NVL(sd.ITEM_NAME,id.ITEM_NAME)                             ITEM_NAME,
		            NVL(sd.ITEM_DIMENSION,id.ITEM_DIMENSION)                   ITEM_DIMENSION,
		            rd.RETURN_COUNT                                            ITEM_COUNT,
		            NVL(sd.ITEM_UNIT_PRICE,id.ITEM_UNIT_PRICE)                 ITEM_UNIT_PRICE,
		            rd.RETURN_PAY_AMT                                          PAY_AMT,
		            NVL(ih.INPUT_DEPARTMENT_ID,sh.REQUESTER_ID)                branchId,
		            rh.AUDIT_TIME                                              restaurantDate,
		            rh.AUDIT_TIME_ACTUAL                                       operationTime,
		            DECODE(SUBSTR(rd.FORM_ID,0,2) ,'CT','CGTH','PT','PSTH','') reason,
		            'OUT'                                                      type_flag
		        FROM
		        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
		        INNER JOIN
		        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
		        ON
		            rh.FORM_ID=rd.FORM_ID
    		 	LEFT JOIN
    		 	 :{Com_("D_T1_SHIPPING_HEADER")} sh
                 ON
                     sh.FORM_ID=rd.FORM_REF_ID
		        LEFT JOIN
		        :{Com_("D_T1_SHIPPING_DETAIL")} sd
		        ON
		            sd.FORM_ID = rd.FORM_REF_ID
		        AND sd.item_id = rd.ITEM_ID
    		  LEFT JOIN
    		  :{Com_("D_T1_INPUT_HEADER")} ih
              ON
                  ih.FORM_ID=rd.FORM_REF_ID
		        LEFT JOIN
		        :{Com_("D_T1_INPUT_DETAIL")} id
		        ON
		            id.FORM_ID = rd.FORM_REF_ID
		        AND id.item_id = rd.ITEM_ID
		        WHERE
		            rh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
				AND rh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
		        AND (ih.INPUT_DEPARTMENT_ID=:branchId  OR  sh.REQUESTER_ID=:branchId )
		        UNION ALL
		        SELECT --报损单
		            ld.FORM_ID,
		            ld.ITEM_ID,
		            ld.ITEM_NAME,
		            ld.ITEM_DIMENSION,
		            ld.ITEM_COUNT,
		            ld.UNIT_PRICE ITEM_UNIT_PRICE,
		            ld.PAY_AMT,
		            lh.LOSS_BRANCH_ID                                           branchId,
		            lh.AUDIT_TIME                                               restaurantDate,
		            lh.AUDIT_TIME_ACTUAL                                        operationTime,
		            DECODE(lh.LOSS_TYPE,'RAWLOSS','YLBS','DISHLOSS','CPBS', '') reason,
		            'OUT'                                                       type_flag
		        FROM
		        :{Com_("D_T1_LOSS_HEADER")} lh
		        INNER JOIN
		        :{Com_("D_T1_LOSS_DETAIL")} ld
		        ON
		            lh.FORM_ID=ld.FORM_ID
        		WHERE
 		            lh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
 				AND lh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
		        AND lh.LOSS_BRANCH_ID =:branchId
		        AND (
		                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
		            OR  lh.LOSS_TYPE = 'RAWLOSS')
	    		UNION ALL
	    		SELECT --调拨出入
		    	    td.FORM_ID,
		    	    td.ITEM_ID,
		    	    td.ITEM_NAME,
		    	    td.ITEM_DIMENSION,
		    	    td.ACTUAL_COUNT ITEM_COUNT,
		    	    td.UNIT_PRICE ITEM_UNIT_PRICE,
		    	    td.PAY_AMT,
		    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId,
		    	    th.CONFIRM_TIME                                                     restaurantDate,
		    	    th.AUDIT_TIME_ACTUAL                                                operationTime,
		    	    'DB'                                                                reason,
		    	    DECODE(:branchId ,th.IN_BRANCH_ID,'IN','OUT')                       type_flag
	    	    FROM
		    	:{Com_("D_T1_TRANSFER_HEADER")} th
		    	INNER JOIN
		    	:{Com_("D_T1_TRANSFER_DETAIL")} td
		    	ON
		    	    th.FORM_ID=td.FORM_ID
	    		WHERE
 		            th.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
 				AND th.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
		    	AND (
		    	        th.IN_BRANCH_ID = :branchId
		    	    OR  th.OUT_BRANCH_ID= :branchId)	
	    	    UNION ALL
	            SELECT
	                ''              form_id,
	                trim(t.item_id) item_id,
	                t.ITEM_NAME,
	                t.ITEM_DIMENSION,
	                SUM(t.item_gross_count * d.nqty) ITEM_COUNT,
	                0                                ITEM_UNIT_PRICE,
	                0                                PAY_AMT,
	                a.BRANCH_ID,
	                b.dbusiness                      restaurantDate,
	                a.OPERATING_TIME                 operationTime,
	                'LLKU'                           reason,
	                'OUT'                            type_flag
	            FROM
	            :{Com_("d_t_food_bill")} b,
	            :{Com_("D_T_FOOD_BILLS")} d,
	            :{Com_("D_T2_THERAPY")} t,
	            :{Com_("D_T3_DAILY_SETTLE_RECORD")} a
	            WHERE
	                trim(d.cbill_c) = trim(b.cbill_c)
	            AND trim(t.therapy_id) = trim(d.cfood_c)
	            AND trim(b.cbranch_c) = :branchId
	            AND a.BRANCH_ID=trim(b.cbranch_c)
	            AND b.dbusiness = a.BUSINESS_DATE
	            AND a.OPERATING_TIME >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
	            AND a.OPERATING_TIME <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
	            GROUP BY
	                trim(t.item_id),
	                t.ITEM_NAME,
	                t.ITEM_DIMENSION,
	                b.dbusiness,
	                a.BRANCH_ID,
	                a.OPERATING_TIME
			    		)
			SELECT
			    *
			FROM
			    a
			ORDER BY
			    a.item_id,a.operationTime
		};
		List<Map> detailLst = processDetailIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	public List<Map> queryLcItem(String startDate,String endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
//		Date sDate = SqlDateUtil.getSqlDate(startDate);
//		Date eDate = SqlDateUtil.getSqlDate(endDate);
//		if(!TextUtil.isEmpty(branchId)){
//			
//		}
		DefaultContext myCtx = getDefaultContext();
		ItemDetailIter detailIter = null;
		#sql [myCtx] detailIter = {
				WITH
			    a AS
			    (
			        SELECT--入库
			            id.FORM_ID,
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.ITEM_DIMENSION,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            id.ITEM_UNIT_PRICE,
			            id.PAY_AMT,
			            ih.INPUT_DEPARTMENT_ID branchId,
			            ih.AUDIT_TIME          restaurantDate,
			            ih.AUDIT_TIME_ACTUAL   operationTime,
			            DECODE(ih.FORM_TYPE,'PURCHASE','CGRK','PRODUCE','CPRK','MANUAL','CGRK','SEMIS','PSRK','JSRK','JSRK' ,'')  reason,
			            'IN' type_flag
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND ih.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId 
			        UNION ALL
			        SELECT --配退入库，采退出库
				        rd.FORM_ID,
				        rd.ITEM_ID,
				        NVL(sd.ITEM_NAME,id.ITEM_NAME)                             ITEM_NAME,
				        NVL(sd.ITEM_DIMENSION,id.ITEM_DIMENSION)                   ITEM_DIMENSION,
				        rd.RETURN_COUNT                                            ITEM_COUNT,
				        NVL(sd.ITEM_UNIT_PRICE,id.ITEM_UNIT_PRICE)                 ITEM_UNIT_PRICE,
				        rd.RETURN_PAY_AMT                                          PAY_AMT,
				        NVL(ih.INPUT_DEPARTMENT_ID,sh.PROVIDER_ID)                branchId,
				        rh.AUDIT_TIME                                              restaurantDate,
				        rh.AUDIT_TIME_ACTUAL                                       operationTime,
				        DECODE(SUBSTR(rd.FORM_ID,0,2) ,'CT','CGTH','PT','PSTH','') reason,
				        DECODE(SUBSTR(rd.FORM_ID,0,2) ,'CT','OUT','PT','IN','')   type_flag
			        FROM
			        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
			        INNER JOIN
			        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
			        ON
			            rh.FORM_ID=rd.FORM_ID
        		 	LEFT JOIN
        		 	 :{Com_("D_T1_SHIPPING_HEADER")} sh
	                 ON
	                     sh.FORM_ID=rd.FORM_REF_ID
			        LEFT JOIN
			        :{Com_("D_T1_SHIPPING_DETAIL")} sd
			        ON
			            sd.FORM_ID = rd.FORM_REF_ID
			        AND sd.item_id = rd.ITEM_ID
	        		LEFT JOIN
	        		:{Com_("D_T1_INPUT_HEADER")} ih
		        	ON
		        	    ih.FORM_ID=rd.FORM_REF_ID
		        	LEFT JOIN
		        	:{Com_("D_T1_INPUT_DETAIL")} id
		        	ON
		        	    id.FORM_ID = rd.FORM_REF_ID
		        	AND id.item_id = rd.ITEM_ID
			        WHERE
			            rh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND rh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND (sh.PROVIDER_ID = :branchId OR  ih.INPUT_DEPARTMENT_ID = :branchId)
			        UNION ALL--半成品配送入库
			        SELECT
				        sd.FORM_ID,
				        sd.ITEM_ID,
				        sd.ITEM_NAME,
				        sd.ITEM_DIMENSION,
				        sd.RECEIVE_COUNT ITEM_COUNT,
				        sd.ITEM_UNIT_PRICE,
				        sd.PAY_AMT,
				        sh.REQUESTER_ID branchId,
				        sh.INPUT_TIME        restaurantDate,
				        sh.INPUT_TIME_ACTUAL operationTime,
				        'PSRK'          reason,
				        'IN'            type_flag
			        FROM
		        	:{Com_("D_T1_SHIPPING_HEADER")} sh
		        	INNER JOIN
		        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
				    ON
				        sd.FORM_ID= sh.FORM_ID
				    WHERE
				    	sh.INPUT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND sh.INPUT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND sh.REQUESTER_ID = :branchId 
	        		UNION ALL
	        		SELECT--配送出库，越库出库，外部出库
		        	    sd.FORM_ID,
		        	    sd.ITEM_ID,
		        	    sd.ITEM_NAME,
		        	    sd.ITEM_DIMENSION,
		        	    sd.SHIPPING_COUNT ITEM_COUNT,
		        	    sd.ITEM_UNIT_PRICE,
		        	    sd.PAY_AMT,
		        	    sh.PROVIDER_ID      branchId,
		        	    sh.AUDIT_TIME        restaurantDate,
		        	    sh.AUDIT_TIME_ACTUAL operationTime,
		        	    decode(sh.FORM_TYPE,'INNER_UNIFIED','PSCK','INNER_CROSS','YKCK','WBCH')               reason,
		        	    'OUT'                 type_flag
	        	    FROM
		        	:{Com_("D_T1_SHIPPING_HEADER")} sh
		        	INNER JOIN
		        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
		        	ON
		        	    sd.FORM_ID= sh.FORM_ID
    	    		WHERE
				    	sh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND sh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND sh.PROVIDER_ID = :branchId 
	        		UNION ALL
			        SELECT --报损单
			            ld.FORM_ID,
			            ld.ITEM_ID,
			            ld.ITEM_NAME,
			            ld.ITEM_DIMENSION,
			            ld.ITEM_COUNT,
			            ld.UNIT_PRICE ITEM_UNIT_PRICE,
			            ld.PAY_AMT,
			            lh.LOSS_BRANCH_ID                                           branchId,
			            lh.AUDIT_TIME                                               restaurantDate,
			            lh.AUDIT_TIME_ACTUAL                                        operationTime,
			            DECODE(lh.LOSS_TYPE,'RAWLOSS','YLBS','DISHLOSS','CPBS', '') reason,
			            'OUT'                                                       type_flag
			        FROM
			        :{Com_("D_T1_LOSS_HEADER")} lh
			        INNER JOIN
			        :{Com_("D_T1_LOSS_DETAIL")} ld
			        ON
			            lh.FORM_ID=ld.FORM_ID
	        		WHERE
	 		            lh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
	 				AND lh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND lh.LOSS_BRANCH_ID =:branchId
			        AND (
			                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
			            OR  lh.LOSS_TYPE = 'RAWLOSS')
		            UNION ALL
		    		SELECT --调拨出入
			    	    td.FORM_ID,
			    	    td.ITEM_ID,
			    	    td.ITEM_NAME,
			    	    td.ITEM_DIMENSION,
			    	    td.ACTUAL_COUNT ITEM_COUNT,
			    	    td.UNIT_PRICE ITEM_UNIT_PRICE,
			    	    td.PAY_AMT,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId,
			    	    th.CONFIRM_TIME                                                     restaurantDate,
			    	    th.AUDIT_TIME_ACTUAL                                                operationTime,
			    	    'DB'                                                                reason,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,'IN','OUT')                       type_flag
		    	    FROM
			    	:{Com_("D_T1_TRANSFER_HEADER")} th
			    	INNER JOIN
			    	:{Com_("D_T1_TRANSFER_DETAIL")} td
			    	ON
			    	    th.FORM_ID=td.FORM_ID
		    		WHERE
	 		            th.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
	 				AND th.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			    	AND (
			    	        th.IN_BRANCH_ID = :branchId
			    	    OR  th.OUT_BRANCH_ID= :branchId)	
				    		)
			SELECT
			    *
			FROM
			    a
			ORDER BY
			    a.item_id,a.operationTime
		};
		List<Map> detailLst = processDetailIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	public List<Map> queryCFItem(String startDate, String endDate, String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
//		Date sDate = SqlDateUtil.getSqlDate(startDate);
//		Date eDate = SqlDateUtil.getSqlDate(endDate);
//		if(!TextUtil.isEmpty(branchId)){
//			
//		}
		DefaultContext myCtx = getDefaultContext();
		ItemDetailIter detailIter = null;
		#sql [myCtx] detailIter = {
				WITH
			    a AS
			    (
			        SELECT --采购入库,产品入库
			            id.FORM_ID,
			            id.ITEM_ID,
			            id.ITEM_NAME,
			            id.ITEM_DIMENSION,
			            id.RECEIVE_COUNT ITEM_COUNT,
			            id.ITEM_UNIT_PRICE,
			            id.PAY_AMT,
			            ih.INPUT_DEPARTMENT_ID branchId,
			            ih.AUDIT_TIME          restaurantDate,
			            ih.AUDIT_TIME_ACTUAL   operationTime,
			            DECODE(ih.FORM_TYPE,'PURCHASE','CGRK','PRODUCE','CPRK','MANUAL','CGRK','SEMIS','PSRK' ,'')  reason,
			            'IN' type_flag
			        FROM
			        :{Com_("D_T1_INPUT_HEADER")} ih
			        INNER JOIN
			        :{Com_("D_T1_INPUT_DETAIL")} id
			        ON
			            ih.FORM_ID=id.FORM_ID
			        WHERE
			        	ih.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND ih.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND ih.INPUT_DEPARTMENT_ID = :branchId 
			        UNION ALL
			        SELECT--采购退货（物流退到央厂加库存，央厂退货减库存）
			            rd.FORM_ID,
			            rd.ITEM_ID,
			            id.ITEM_NAME            ITEM_NAME,
			            id.ITEM_DIMENSION  ITEM_DIMENSION,
			            rd.RETURN_COUNT         ITEM_COUNT,
			            id.ITEM_UNIT_PRICE,
			            rd.RETURN_PAY_AMT       PAY_AMT,
			            ih.INPUT_DEPARTMENT_ID                                            branchId,
			            rh.AUDIT_TIME                                              restaurantDate,
			            rh.AUDIT_TIME_ACTUAL                                       operationTime,
			            DECODE(SUBSTR(rd.FORM_ID,0,2) ,'CT','CGTH','PT','PSTH','') reason,
			            DECODE(ih.INPUT_DEPARTMENT_ID,:branchId,'OUT','IN')        type_flag
			        FROM
			        :{Com_("D_T1_RETURN_GOODS_HEADER")} rh
			        INNER JOIN
			        :{Com_("D_T1_RETURN_GOODS_DETAIL")} rd
			        ON
			            rh.FORM_ID=rd.FORM_ID
            		 LEFT JOIN
            		 :{Com_("D_T1_INPUT_HEADER")} ih
	                 ON
	                     ih.FORM_ID=rd.FORM_REF_ID
	                 LEFT JOIN
	                 :{Com_("D_T1_INPUT_DETAIL")} id
	                 ON
	                     id.FORM_ID = rd.FORM_REF_ID
	                 AND id.item_id = rd.ITEM_ID
			        WHERE
			            rh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND rh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND (ih.INPUT_DEPARTMENT_ID=:branchId or ih.PROVIDER_ID=:branchId)
	        		UNION ALL
			        SELECT --报损单
			            ld.FORM_ID,
			            ld.ITEM_ID,
			            ld.ITEM_NAME,
			            ld.ITEM_DIMENSION,
			            ld.ITEM_COUNT,
			            ld.UNIT_PRICE ITEM_UNIT_PRICE,
			            ld.PAY_AMT,
			            lh.LOSS_BRANCH_ID                                           branchId,
			            lh.AUDIT_TIME                                               restaurantDate,
			            lh.AUDIT_TIME_ACTUAL                                        operationTime,
			            DECODE(lh.LOSS_TYPE,'RAWLOSS','YLBS','DISHLOSS','CPBS', '') reason,
			            'OUT'                                                       type_flag
			        FROM
			        :{Com_("D_T1_LOSS_HEADER")} lh
			        INNER JOIN
			        :{Com_("D_T1_LOSS_DETAIL")} ld
			        ON
			            lh.FORM_ID=ld.FORM_ID
	        		WHERE
	 		            lh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
	 				AND lh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND lh.LOSS_BRANCH_ID =:branchId
			        AND (
			                ld.REASON= DECODE(lh.LOSS_TYPE,'DISHLOSS','DISH2RAW')
			            OR  lh.LOSS_TYPE = 'RAWLOSS')
		           UNION ALL
		    		SELECT --调拨
			    	    td.FORM_ID,
			    	    td.ITEM_ID,
			    	    td.ITEM_NAME,
			    	    td.ITEM_DIMENSION,
			    	    td.ACTUAL_COUNT ITEM_COUNT,
			    	    td.UNIT_PRICE ITEM_UNIT_PRICE,
			    	    td.PAY_AMT,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,th.IN_BRANCH_ID,th.OUT_BRANCH_ID) branchId,
			    	    th.CONFIRM_TIME                                                     restaurantDate,
			    	    th.AUDIT_TIME_ACTUAL                                                operationTime,
			    	    'DB'																reason,
			    	    DECODE(:branchId ,th.IN_BRANCH_ID,'IN','OUT')                       type_flag
			    	FROM
			    	:{Com_("D_T1_TRANSFER_HEADER")} th
			    	INNER JOIN
			    	:{Com_("D_T1_TRANSFER_DETAIL")} td
			    	ON
			    	    th.FORM_ID=td.FORM_ID
		    		WHERE
	 		            th.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
	 				AND th.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			    	AND (
			    	        th.IN_BRANCH_ID = :branchId
			    	    OR  th.OUT_BRANCH_ID= :branchId)
		    	    UNION ALL
		    	    SELECT --领料,超领,退料,非工单领料
			    	    rd.FORM_ID,
			    	    rd.ITEM_ID,
			    	    rd.ITEM_NAME,
			    	    rd.ITEM_DIMENSION,
			    	    DECODE(rh.FORM_TYPE,'return',rd.ITEM_COUNT,rd.RECEIVE_COUNT) ITEM_COUNT,
			    	    p.ITEM_PRICE,
			    	    DECODE(rh.FORM_TYPE,'return',rd.ITEM_COUNT,rd.RECEIVE_COUNT)*p.ITEM_PRICE               PAY_AMT,
			    	    rh.FORM_BRANCH_ID                                                                      branchId,
			    	    rh.AUDIT_TIME                                                                    restaurantDate,
			    	    rh.AUDIT_TIME_ACTUAL                                                              operationTime,
			    	    DECODE(rh.FORM_TYPE,'manual','FGLL','produce', 'SCLL','extra','SCCL','return','SCTL','') reason,
			    	    DECODE(rh.FORM_TYPE,'return','IN','OUT') type_flag
			    	FROM
			    	:{Com_("D_T1_REQUISITION_HEADER")} rh
			    	INNER JOIN
			    	:{Com_("D_T1_REQUISITION_DETAIL")} rd
			    	ON
			    	    rd.FORM_ID= rh.FORM_ID
			    	LEFT JOIN
			    	:{Com_("D_T2_ITEM_PRICE")} p
			    	ON
			    	    p.ITEM_ID = rd.ITEM_ID
			    	AND p.PRICE_TYPE LIKE 'BENCHMARK%' --标准价
			    	AND p.IS_CURRENT =1
			    	WHERE
		    	 		rh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
	 				AND rh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			    	AND rh.FORM_BRANCH_ID = :branchId 
			    	UNION ALL
	        		SELECT--出品出库
		        	    sd.FORM_ID,
		        	    sd.ITEM_ID,
		        	    sd.ITEM_NAME,
		        	    sd.ITEM_DIMENSION,
		        	    sd.DELIVERY_COUNT ITEM_COUNT,
		        	    sd.ITEM_UNIT_PRICE,
		        	    sd.PAY_AMT,
		        	    sh.PROVIDER_ID      branchId,
		        	    sh.AUDIT_TIME        restaurantDate,
		        	    sh.AUDIT_TIME_ACTUAL operationTime,
		        	    'CPCK'               reason,
		        	    'OUT'                 type_flag
		        	FROM
		        	:{Com_("D_T1_SHIPPING_HEADER")} sh
		        	INNER JOIN
		        	:{Com_("D_T1_SHIPPING_DETAIL")} sd
		        	ON
		        	    sd.FORM_ID= sh.FORM_ID
    	    		WHERE
				    	sh.AUDIT_TIME_ACTUAL >= to_date(:startDate,'yyyy-mm-dd hh24:mi:ss')
					AND sh.AUDIT_TIME_ACTUAL <= to_date(:endDate,'yyyy-mm-dd hh24:mi:ss')
			        AND sh.PROVIDER_ID = :branchId 
				    		)
			SELECT
			    *
			FROM
			    a
			ORDER BY
			    a.item_id,a.operationTime
		};
		List<Map> detailLst = processDetailIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}
	
	private List<Map> processDetailIter(ItemDetailIter detailIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		while(detailIter.next()) {
			Map<String, Object> detail = new HashMap<String, Object>();
			detail.put("formId", detailIter.form_id());
			detail.put("itemId", detailIter.item_id());
			detail.put("itemName", detailIter.item_name());
			detail.put("itemDimension", detailIter.item_dimension());
			detail.put("itemCount", detailIter.item_count());
			detail.put("itemUnitPrice", detailIter.item_unit_price());
			detail.put("payAmt", detailIter.pay_amt());
			detail.put("branchId", detailIter.branchId());
			detail.put("reason", detailIter.reason());
			detail.put("typeFlag", detailIter.type_flag());
			detail.put("restaurantDate", SqlDateUtil.getUtilDate(detailIter.restaurantDate()));
			detail.put("operationTime", SqlDateUtil.getUtilDate(detailIter.operationTime()));
			headerLst.add(detail);
		}
		return headerLst;
	}
}