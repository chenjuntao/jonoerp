/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Thu Dec 11 15:06:51 CST 2014 by lyz
 * Last edited on Thu Dec 11 15:06:51 CST 2014 by lyz
 * 
 * comment: 装箱单明细
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.PackingDetail;
import sqlj.runtime.ref.DefaultContext;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class PackingDetailBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(PackingDetailBean.class);
	
	public int saveEntity(PackingDetail detail)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formId = detail.getFormId();
		String branchId = detail.getBranchId();
		String boxId = detail.getBoxId();
		String boxName = detail.getBoxName();
		String itemId = detail.getItemId();
		String itemName = detail.getItemName();
		String itemDimension = detail.getItemDimension();
		Double unitVolume = detail.getUnitVolume();
		Double unitWeight = detail.getUnitWeight();
		Double itemCount = detail.getItemCount();
		Double volume = detail.getVolume();
		Double weight = detail.getWeight();
		String itemCategory = detail.getItemCategory();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_PACKING_DETAIL")} 
				(FORM_ID, BRANCH_ID, BOX_ID, BOX_NAME, ITEM_ID, ITEM_NAME, ITEM_DIMENSION, UNIT_VOLUME, UNIT_WEIGHT, ITEM_COUNT, VOLUME, WEIGHT, ITEM_CATEGORY) 
			VALUES (:formId, :branchId, :boxId, :boxName, :itemId, :itemName, :itemDimension, :unitVolume, :unitWeight, :itemCount, :volume, :weight, :itemCategory)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(PackingDetail detail)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = detail.getFormId();
		String branchId = detail.getBranchId();
		String boxId = detail.getBoxId();
		String itemId = detail.getItemId();
		String itemName = detail.getItemName();
		String itemDimension = detail.getItemDimension();
		Double unitVolume = detail.getUnitVolume();
		Double unitWeight = detail.getUnitWeight();
		Double itemCount = detail.getItemCount();
		Double volume = detail.getVolume();
		Double weight = detail.getWeight();
		String itemCategory = detail.getItemCategory();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PACKING_DETAIL")}
			SET
				FORM_ID = :formId,
				ITEM_ID = :itemId,
				ITEM_NAME = :itemName,
				ITEM_DIMENSION = :itemDimension,
				UNIT_VOLUME = :unitVolume,
				ITEM_COUNT = :itemCount,
				VOLUME = :volume,
				ITEM_CATEGORY = :itemCategory
			WHERE 
				FORM_ID = :formId
			AND ITEM_ID = :itemId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteByForm(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_PACKING_DETAIL")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public List<PackingDetail> query(String formId)
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		DetailIter detailIter = null;
		#sql [myCtx] detailIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T1_PACKING_DETAIL")} d
			WHERE
			    d.FORM_ID = :formId
			ORDER BY
			    d.BRANCH_ID,
			    d.BOX_ID,
			    d.ITEM_ID
		};
		List<PackingDetail> detailLst = processIter(detailIter);
		detailIter.close();
		closeDefaultContext(myCtx);
		return detailLst;
	}

	#sql private iterator DetailIter(String form_id, String branch_id, String box_id, String box_name, 
			String item_id, String item_name, String item_dimension, Double item_count, 
			Double unit_volume, Double unit_weight, Double volume, Double weight, String item_category);
	
	private List<PackingDetail> processIter(DetailIter detailIter) 
			throws SQLException {
		List<PackingDetail> detailLst = new ArrayList<PackingDetail>();
		while(detailIter.next()) {
			PackingDetail detail = new PackingDetail();
			detail.setFormId(detailIter.form_id());
			detail.setBranchId(detailIter.branch_id());
			detail.setBoxId(detailIter.box_id());
			detail.setBoxName(detailIter.box_name());
			detail.setItemId(detailIter.item_id());
			detail.setItemName(detailIter.item_name());
			detail.setItemDimension(detailIter.item_dimension());
			detail.setItemCount(detailIter.item_count());
			detail.setUnitVolume(detailIter.unit_volume());
			detail.setVolume(detailIter.volume());
			detail.setUnitWeight(detailIter.unit_weight());
			detail.setWeight(detailIter.weight());
			detail.setItemCategory(detailIter.item_category());
			detailLst.add(detail);
		}
		return detailLst;
	}
}