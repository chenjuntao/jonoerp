//===============================================
//
// Copyright (c) 2014
// Tanry Electronic Technology Co., Ltd.
// ChangSha, China
//
// All Rights Reserved.
//
// First created on 2014.8.7 by lyz
// Last edited on 2014.8.21 by cjt
//
// Comments:Calculate amount of raw per ten thousands of CNY from business data.
// 说明：根据营业数据来计算原材料的万元用量。
//
//===============================================

package logic.businessquery;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.math.BigDecimal;
import org.apache.log4j.Logger;
import logic.NoConnection;
import logic.pool.ConnectionPool;
import sqlj.runtime.ref.DefaultContext;
import com.tanry.framework.acl.NoPrivilegeException;
import org.apache.commons.lang3.StringUtils;
import com.tanry.framework.util.TextUtil;

public class FoodRawMaterialBean extends ConnectionPool {
	
	public static Logger log = Logger.getLogger(FoodRawMaterialBean.class);
	
	private String strDateFormat = "yyyy-MM-dd";//设置日期格式
	
	#sql public static iterator MaterialIterator(
			String ITEM_ID, 
			String ITEM_NAME,
			String ITEM_DIMENSION, 
			BigDecimal nqty); 
	
	public BigDecimal getAmt(String shopC, String startDate, String endDate,DefaultContext myCtx)
		throws NoPrivilegeException,SQLException,NoConnection{
			BigDecimal amt = BigDecimal.ZERO;
			BigDecimal amt2 = BigDecimal.ZERO;
			BigDecimal amt3 = BigDecimal.ZERO;
			
				try {
					// 统计餐厅营业额应用 应付款
					#sql [myCtx] {
						SELECT round(sum(nOughtAmt),4) INTO :amt
							FROM :{Com_("d_t_food_bill")}
						WHERE cbranch_c = :shopC
		  				AND dbusiness >= to_date(:startDate, :strDateFormat)
		  				AND dbusiness <= to_date(:endDate, :strDateFormat)
					};
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
				if (amt != null) {
					amt = (BigDecimal)amt;
				}else{
					amt = BigDecimal.ZERO;
				}
				
				try {
					//3033 卡类  3036 ID售卖/预冲
					//金牛角中的营业额要扣除这种类型的数据，但是这是不规范的做法
					//正常的标准版不应该有这样的扣除
					#sql [myCtx] {
			        SELECT
			            round(SUM(bs.NAMT),4) INTO :amt2
			        FROM
			        	:{Com_("d_t_food_bills")} bs
			        LEFT JOIN
			        	:{Com_("d_t_food_bill")} b
			        ON
			            bs.CBILL_C = b.CBILL_C
			        WHERE
			        	b.cbranch_c = :shopC
					AND dbusiness >= to_date(:startDate, :strDateFormat)
					AND dbusiness <= to_date(:endDate, :strDateFormat)
			        AND bs.cLitCls_C in('3033','3036')
			        GROUP BY
			            b.CBRANCH_C 
			    };
					} catch (SQLException e) {
					e.printStackTrace();
				}
				
		    if (amt2 != null) {
		    	amt2 = (BigDecimal)amt2;
			}else{
				amt2 = BigDecimal.ZERO;
			}
		    
		    amt3 = amt.subtract(amt2);
		    amt3 = amt3.setScale(2, BigDecimal.ROUND_HALF_UP);
			
		return amt3;
	}
	
	public BigDecimal getAmt(String shopC, String startDate, String endDate)
				throws NoPrivilegeException,SQLException,NoConnection{
		DefaultContext myCtx = getDefaultContext();
		BigDecimal amt = BigDecimal.ZERO;
		BigDecimal amt2 = BigDecimal.ZERO;
		BigDecimal amt3 = BigDecimal.ZERO;
		
		try {
			#sql [myCtx] {
				SELECT round(sum(nOughtAmt),4) INTO :amt
					FROM :{Com_("d_t_food_bill")}
				WHERE cbranch_c = :shopC
  				AND dbusiness >= to_date(:startDate, :strDateFormat)
  				AND dbusiness <= to_date(:endDate, :strDateFormat)
			};
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		if (amt != null) {
			amt = (BigDecimal)amt;
		}else{
			amt = BigDecimal.ZERO;
		}
		
		try {
			#sql [myCtx] {
		        SELECT
		            round(SUM(bs.NAMT),4) NAMT into :amt2
		        FROM
		            :{Com_("d_t_food_bills")} bs
		        LEFT JOIN
		            :{Com_("d_t_food_bill")} b
		        ON
		            bs.CBILL_C = b.CBILL_C
		        WHERE
		        	b.cbranch_c = :shopC
				AND dbusiness >= to_date(:startDate, :strDateFormat)
				AND dbusiness <= to_date(:endDate, :strDateFormat)
		        AND bs.cLitCls_C in('3033','3036')
		        GROUP BY
		            b.CBRANCH_C 
		    };
		}catch (SQLException e) {
			e.printStackTrace();
		}
	    
		if (amt2 != null) {
	    	amt2 = (BigDecimal)amt2;
		}else{
			amt2 = BigDecimal.ZERO;
		}
		    
	    amt3 = amt.subtract(amt2);
	    amt3 = amt3.setScale(4, BigDecimal.ROUND_HALF_UP);
		
		closeDefaultContext(myCtx);
		return amt3;
	}
	
	//根据原材料种类查询万元用量，by lyz.
	public List<Map> getDetail(String shopC, String startDate, String endDate, String categoryId)
			throws NoPrivilegeException,SQLException,NoConnection{
		List<Map> detailLst = new ArrayList();
		DefaultContext myCtx = getDefaultContext();
		MaterialIterator materialIterator = null;
		
		if (myCtx != null) {
			BigDecimal amt = getAmt(shopC,startDate,endDate,myCtx);
			
			amt = amt.setScale(4, BigDecimal.ROUND_HALF_UP);

			//查询某类别下所有的原料数量
			#sql [myCtx] materialIterator = {
				SELECT
					im.ITEM_ID,
				    im.ITEM_NAME,
				    im.ITEM_DIMENSION,
				    round(SUM(t.item_gross_count * d.nqty),4) AS nqty
				FROM
					:{Com_("d_t_food_bill")} b,
				    :{Com_("d_t_food_bills")} d,
				    :{Com_("d_t2_therapy")} t,
				    :{Com_("d_t2_item_meta")} im
				WHERE
				    d.CBILL_C = b.CBILL_C
				AND b.cbranch_c = :shopC
				AND t.THERAPY_ID = d.cfood_c
				AND t.item_id =trim(im.ITEM_ID)
				AND trim(im.CATEGORY_ID )= :categoryId
				AND b.dbusiness >= to_date(:startDate, :strDateFormat)
				AND b.dbusiness <= to_date(:endDate, :strDateFormat)
				GROUP BY
			    	im.ITEM_ID,
				    im.ITEM_NAME,
				    im.ITEM_DIMENSION
				ORDER BY
				    im.ITEM_ID
			};
			while(materialIterator.next()) {
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("itemId", materialIterator.ITEM_ID());
				map.put("itemName", materialIterator.ITEM_NAME());
				map.put("unit", materialIterator.ITEM_DIMENSION());

				// 每万元材料数量计算公式： amt / nqty = 10000 / 每万元材料数量				
				BigDecimal nqty = materialIterator.nqty().setScale(4, BigDecimal.ROUND_HALF_UP);
				map.put("nqty", nqty);
				BigDecimal unitQty = BigDecimal.ZERO;
				if (amt.compareTo(BigDecimal.ZERO) != 0) {
					unitQty = nqty.multiply(new BigDecimal(10000)).divide(amt,4, BigDecimal.ROUND_HALF_UP);
				}
				map.put("unitQty", unitQty);
				detailLst.add(map);
			}
			materialIterator.close();
		} else {
            throw new NoConnection();
        }
		closeDefaultContext(myCtx);
		return detailLst;
	}

	#sql public static iterator MyIterator(
			String item_id, 
			Double nqty1,
			Double nqty2,
			Double nqty3
		); 
	
	public List<Map> getAllAmtTTCNY(String shopC, String startDate1, String endDate1,String startDate2, String endDate2,
			String startDate3, String endDate3,String query)
			throws NoPrivilegeException,SQLException,NoConnection {
		BigDecimal amt1 = BigDecimal.ZERO; 
		BigDecimal amt2 = BigDecimal.ZERO; 
		BigDecimal amt3 = BigDecimal.ZERO; 
		
		DefaultContext myCtx = getDefaultContext();

		if (!TextUtil.isEmpty(startDate1)) {
			amt1 = getAmt(shopC, startDate1, endDate1, myCtx);
		}

		if (!TextUtil.isEmpty(startDate2)) {
			amt2 = getAmt(shopC, startDate2, endDate2, myCtx);
		}

		if (!TextUtil.isEmpty(startDate3)) {
			amt3 = getAmt(shopC, startDate3, endDate3, myCtx);
		}
		
		MyIterator myIterator = null;
		
		#sql [myCtx] myIterator = {
		WITH
		    items AS
		    (
		        SELECT
		            m.item_id
		        FROM
		            :{Com_("d_t2_item_meta")} m
		        WHERE
		            :{query :: 1=1}
		    )
		    ,
		    g1 AS
		    (
		        SELECT
		            round(SUM(t.item_gross_count * d.nqty),4) qty1,
		            t.item_id
		        FROM
		        	:{Com_("d_t_food_bill")} b,
		            :{Com_("d_t_food_bills")} d,
		            :{Com_("d_t2_therapy")} t
		        WHERE
		            d.CBILL_C = b.CBILL_C
		        AND t.THERAPY_ID = trim(d.cfood_c)
		        AND b.cbranch_c = :shopC
        		AND b.dbusiness >= to_date(:startDate1, :strDateFormat)
    			AND b.dbusiness <= to_date(:endDate1, :strDateFormat)
		        GROUP BY
		            t.item_id
		    )
		    ,
		    g2 AS
		    (
		        SELECT
		            round(SUM(t.item_gross_count * d.nqty),4) qty2,
		            t.item_id
		        FROM
		        	:{Com_("d_t_food_bill")} b,
		        	:{Com_("d_t_food_bills")} d,
		            :{Com_("d_t2_therapy")} t
		        WHERE
		            d.CBILL_C = b.CBILL_C
		        AND t.THERAPY_ID = d.cfood_c
		        AND b.cbranch_c = :shopC
        		AND b.dbusiness >= to_date(:startDate2, :strDateFormat)
    			AND b.dbusiness <= to_date(:endDate2, :strDateFormat)
		        GROUP BY
		            t.item_id
		    )
		    ,
		    g3 AS
		    (
		        SELECT
		            round(SUM(t.item_gross_count * d.nqty),4) qty3,
		            t.item_id
		        FROM
		        	:{Com_("d_t_food_bill")} b,
		            :{Com_("d_t_food_bills")} d,
		            :{Com_("d_t2_therapy")} t
		        WHERE
		            d.CBILL_C = b.CBILL_C
		        AND t.THERAPY_ID = d.cfood_c
		        AND b.cbranch_c = :shopC
        		AND b.dbusiness >= to_date(:startDate3, :strDateFormat)
    			AND b.dbusiness <= to_date(:endDate3, :strDateFormat)
		        GROUP BY
		            t.item_id
		    )
		SELECT
		    m.item_id,
		    DECODE(:amt1,0,'',ROUND(qty1*10000/:amt1,4)) nqty1,
		    DECODE(:amt2,0,'',ROUND(qty2*10000/:amt2,4)) nqty2,
		    DECODE(:amt3,0,'',ROUND(qty3*10000/:amt3,4)) nqty3
		FROM
		    items m
		LEFT JOIN
		    g1
		ON
		    m.item_id = g1.item_id
		LEFT JOIN
		    g2
		ON
		    m.item_id = g2.item_id
		LEFT JOIN
		    g3
		ON
		    m.item_id = g3.item_id};
		
		List<Map> detailLst = new ArrayList<Map>();
		
		while(myIterator.next()) {
			Map map = new HashMap();
			map.put("itemId", myIterator.item_id());
			
			if( myIterator.nqty1()==null){
				map.put("nqty1", null);
			}else{
				BigDecimal nqty1 = new BigDecimal(Double.valueOf(myIterator.nqty1().toString())).setScale(4, BigDecimal.ROUND_HALF_UP);
				map.put("nqty1", nqty1);
			}
			
			if(myIterator.nqty2() == null){
				map.put("nqty2", null);
			}else{
				BigDecimal nqty2 = new BigDecimal(Double.valueOf(myIterator.nqty2().toString())).setScale(4, BigDecimal.ROUND_HALF_UP);
				map.put("nqty2", nqty2);
			}
			
			if(myIterator.nqty3() == null){
				map.put("nqty3", null);
			}else{
				BigDecimal nqty3 = new BigDecimal(Double.valueOf(myIterator.nqty3().toString())).setScale(4, BigDecimal.ROUND_HALF_UP);
				map.put("nqty3", nqty3);
			}
			
			detailLst.add(map);
		}
		
		closeDefaultContext(myCtx);
		return detailLst;
	}
}