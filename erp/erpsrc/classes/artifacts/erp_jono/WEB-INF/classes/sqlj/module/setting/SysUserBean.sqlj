/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Tue Mar 17 11:33:49 CST 2015 by lyz
 * Last edited on Tue Mar 17 11:33:49 CST 2015 by lyz
 * 
 * comment: 系统用户表
 */
package logic.module.setting;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.module.setting.user.pojo.SysUser;
import com.tanry.business.module.setting.user.vo.UserInfo;
import com.tanry.framework.acl.NoPrivilegeException;

public class SysUserBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(SysUserBean.class);
	
	#sql private iterator UserIter(
			String user_id,
			String user_name, 
			String password, 
			Integer weight, 
			String email, 
			String telephone, 
			String gender,
			String role_name
		);
	
	public int saveEntity(SysUser user)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String userId = user.getUserId();
		String userName = user.getUserName();
		String password = user.getPassword();
		Integer weight = user.getWeight();
		String email = user.getEmail();
		String telephone = user.getTelephone();
		String gender = user.getGender();
		
		#sql [myCtx] {
			INSERT INTO :{Com_("d_t2_user")}
				(USER_ID, USER_NAME, PASSWORD, WEIGHT, EMAIL, TELEPHONE, GENDER) 
			VALUES (:userId, :userName, :password, :weight, :email, :telephone, :gender)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(String oldUserId, SysUser user)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String userId = user.getUserId();
		String userName = user.getUserName();
		String password = user.getPassword();
		Integer weight = user.getWeight();
		String email = user.getEmail();
		String telephone = user.getTelephone();
		String gender = user.getGender();

		#sql [myCtx] {
			UPDATE
				:{Com_("d_t2_user")}
			SET
				USER_ID = :userId,
				USER_NAME = :userName,
				-- PASSWORD = :password,
				WEIGHT = :weight,
				EMAIL = :email,
				TELEPHONE = :telephone,
				GENDER = :gender
			WHERE 
				USER_ID = :oldUserId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int modifyPwd(String userId, String newPwd)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
				:{Com_("d_t2_user")}
			SET
				PASSWORD = :newPwd
			WHERE 
				USER_ID = :userId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String userId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			DELETE
			FROM
				:{Com_("d_t2_user")}
			WHERE
				USER_ID = :userId
		};
		#sql [myCtx] {
			DELETE
			FROM
				:{Com_("D_T0_USERTOBRANCH")}
			WHERE
				USER_ID = :userId
		};
		#sql [myCtx] {
			DELETE
			FROM
				:{Com_("D_T0_USERTOROLE")}
			WHERE
				USER_ID = :userId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public List<SysUser> query(String branchId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		UserIter userIter = null;

		#sql [myCtx] userIter = {
			SELECT
			    u.*,tr.role_name
			    FROM
			        :{Com_("d_t2_user")} u
			    INNER JOIN
			        :{Com_("d_t0_userToBranch")} u2b
			    ON
			        u2b.USER_ID = u.USER_ID
			    LEFT JOIN
			        :{Com_("D_T0_USERTOROLE")} ut
			    ON
			        u.USER_ID = ut.USER_ID
			    LEFT JOIN
			        :{Com_("D_T0_ROLE")} tr
			    ON
			        ut.ROLE_ID = tr.ROLE_ID
			    WHERE
			        u2b.BRANCH_ID = :branchId};
		List<SysUser> userLst = processIter(userIter);
		userIter.close();
		closeDefaultContext(myCtx);
		return userLst;
	}
	
	#sql private iterator UIDIterator(
			String USER_ID 
			);
	public List<SysUser> listSysUser() 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		UIDIterator userIter = null;
		#sql [myCtx] userIter = {
			SELECT
			    u.*
			FROM
			    :{Com_("d_t2_user")} u
		};
		List<SysUser> userLst = new ArrayList();
		try {
			while(userIter.next()) {
				SysUser sysUser = new SysUser();
				sysUser.setUserId( userIter.USER_ID());
				userLst.add(sysUser);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		userIter.close();
		closeDefaultContext(myCtx);
		return userLst;
	}
	
	public SysUser queryById(String userId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		UserIter userIter = null;
		#sql [myCtx] userIter = {
			SELECT
			    u.*,tr.role_name
			FROM
				:{Com_("d_t2_user")} u
			LEFT JOIN
		        :{Com_("D_T0_USERTOROLE")} ut
		    ON
		        u.USER_ID = ut.USER_ID
		    LEFT JOIN
		        :{Com_("D_T0_ROLE")} tr
		    ON
		        ut.ROLE_ID = tr.ROLE_ID
			WHERE
				u.USER_ID = :userId
		};
		List<SysUser> userLst = processIter(userIter);
		userIter.close();
		closeDefaultContext(myCtx);
		if (userLst !=null && !userLst.isEmpty()) {
			return userLst.get(0);
		}
		return null;
	}
	
	public List<SysUser> GetAllUsers() 
			throws NoPrivilegeException,SQLException,NoConnection {
		List<SysUser> result = new ArrayList<SysUser>();
		DefaultContext myCtx = getDefaultContext();
		UserIter userIter = null;

		#sql [myCtx] userIter = {
			SELECT
		    	b.*,tr.role_name
			FROM
				:{Com_("d_t2_user")} b
			LEFT JOIN
				:{Com_("D_T0_USERTOROLE")} ut
		    ON
		        u.USER_ID = ut.USER_ID
		    LEFT JOIN
		        :{Com_("D_T0_ROLE")} tr
		    ON
		        ut.ROLE_ID = tr.ROLE_ID
		};

		List<SysUser> userLst = processIter(userIter);
		userIter.close();
		closeDefaultContext(myCtx);
		return userLst;
	}
	
	private List<SysUser> processIter(UserIter userIter) 
			throws SQLException {
		List<SysUser> userLst = new ArrayList<SysUser>();
		while(userIter.next()) {
			SysUser user = new SysUser();
			user.setRoleName(userIter.role_name());
			user.setUserId(userIter.user_id());
			user.setUserName(userIter.user_name());
			user.setPassword(userIter.password());
			user.setWeight(userIter.weight());
			user.setEmail(userIter.email());
			user.setTelephone(userIter.telephone());
			user.setGender(userIter.gender());
			userLst.add(user);
		}
		return userLst;
	}

	#sql private iterator UserInfoIter(String user_id, String user_name, String role_id, String role_name);
	
	public UserInfo queryUserInfo(String userId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		UserInfoIter userIter = null;

		#sql [myCtx] userIter = {
			SELECT
			    u.*,
			    r.ROLE_ID,
			    r.ROLE_NAME
			FROM
			    :{Com_("d_t2_user")} u
			LEFT JOIN
			    :{Com_("d_t0_userToRole")} u2r
			ON
			    u.USER_ID = u2r.USER_ID
			LEFT JOIN
			   :{Com_("D_T0_ROLE")} r
			ON
			    r.ROLE_ID = u2r.ROLE_ID
			WHERE
				u.USER_ID = :userId
		};

		UserInfo userInfo = new UserInfo();
		while(userIter.next()) {
			userInfo.setUserId(userIter.user_id());
			userInfo.setUserName(userIter.user_name());
			userInfo.setRoleId(userIter.role_id());
			userInfo.setRoleName(userIter.role_name());
			break;
		}
		userIter.close();
		closeDefaultContext(myCtx);
		return userInfo;
	}
	
	#sql private iterator roleInfoIter(
			String roleId,
			String roleName,
			String userName,
			String rootName,
			String userId
			);
	public List<Map> roleSearch() 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		roleInfoIter iter = null;
		#sql [myCtx] iter = {
			WITH
			    roles AS
			    (
			        SELECT
			            TYPE_ID   AS id ,
			            TYPE_NAME AS name,
			            'root'    AS parent,
			            'btype'   AS type
			        FROM
			        	:{Com_("D_T2_BRANCH_TYPE")} 
			        UNION ALL
			        SELECT
			            r.ROLE_ID     AS id ,
			            r.ROLE_NAME   AS name,
			            r.BRANCH_TYPE AS parent,
			            'role'        AS type
			        FROM
			        	:{Com_("D_T0_ROLE")}   r
			    ),
			    b as(
					SELECT
					    ID,
					    NAME,
					    PARENT,
					    TYPE,
					    CONNECT_BY_ROOT NAME "ROOT",
					    CONNECT_BY_ISLEAF    is_leaf,
					    LEVEL levels,
					    SYS_CONNECT_BY_PATH(ID, '/') "PATH"
					FROM
					    roles u START WITH PARENT = 'root' CONNECT BY PRIOR ID = PARENT
			    ),
				c as(
					select 
						b.id,
						b.name,
						b.root 
					from 
						b where b.levels = 2
				)
				select 
					cc.id roleId,
					cc.Name roleName,
					cc.Root rootName,
					us.user_name userName,
					us.USER_ID userId
				from c cc 
				inner join 
					:{Com_("D_T0_USERTOROLE")} u 
				on 
					cc.id = u.role_id 
				inner join 
					:{Com_("D_T2_USER")} us 
				on 
					u.user_id = us.USER_ID
		};
		
		List<Map> nodeLst = new ArrayList<Map>();
		while(iter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("roleId", iter.roleId());
			node.put("roleName", iter.roleName());
			node.put("rootName", iter.rootName());
			node.put("userName", iter.userName());
			node.put("userId", iter.userId());
			nodeLst.add(node);
		}
		iter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
		
	}
	
	
	#sql private iterator powerInfoIter(
		String roleId,
		String roleName,
		String powerId,
		String rootName
	);
	public List<Map> powerSearch() 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		powerInfoIter iter = null;
		#sql [myCtx] iter = {
				WITH
			    roles AS
			    (
			        SELECT
			            TYPE_ID   AS id ,
			            TYPE_NAME AS name,
			            'root'    AS parent,
			            'btype'   AS type
			        FROM
			        	:{Com_("D_T2_BRANCH_TYPE")}
			        UNION ALL
			        SELECT
			            r.ROLE_ID     AS id ,
			            r.ROLE_NAME   AS name,
			            r.BRANCH_TYPE AS parent,
			            'role'        AS type
			        FROM
			        	:{Com_("D_T0_ROLE")} r
			    )
			    ,
			    temp1 AS
			    (
			        SELECT
			            ID,
			            NAME,
			            PARENT,
			            TYPE,
			            CONNECT_BY_ROOT NAME "ROOT",
			            CONNECT_BY_ISLEAF    is_leaf,
			            LEVEL,
			            SYS_CONNECT_BY_PATH(ID, '/') "PATH"
			        FROM
			            roles u START WITH PARENT = 'root' CONNECT BY PRIOR ID = PARENT
			    )
			    ,
			    temp2 AS
			    (
			        SELECT
			            t1.ID   ids,
			            t1.name names,
			            t1.type types,
			            t1.root roots
			        FROM
			            temp1 t1
			        WHERE
			            IS_LEAF = 1
			    )
			SELECT
			    temp2.Ids roleId,
			    temp2.Names roleName,
			    temp2.roots rootName,
			    p.RESOURCE_ID powerId
			FROM
			    temp2
			INNER JOIN
				:{Com_("D_T0_PERMISSION p")}
			ON
			    temp2.ids = p.PRINCIPAL_ID
			order by 
				roleId,rootName,powerId
		};
		List<Map> nodeLst = new ArrayList<Map>();
		while(iter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("roleId", iter.roleId());
			node.put("roleName", iter.roleName());
			node.put("rootName", iter.rootName());
			node.put("powerId", iter.powerId());
			nodeLst.add(node);
		}
		iter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}
	
//	#sql private iterator powerInfoIter(
//			String roleId,
//			String roleName,
//			String powerName,
//			String powerRoot,
//			String rootName
//			);
//	public List<Map> powerSearch() 
//			throws NoPrivilegeException,SQLException,NoConnection {
//		DefaultContext myCtx = getDefaultContext();
//		powerInfoIter iter = null;
//		#sql [myCtx] iter = {
//				WITH
//			    roles AS
//			    (
//			        SELECT
//			            TYPE_ID   AS id ,
//			            TYPE_NAME AS name,
//			            'root'    AS parent,
//			            'btype'   AS type
//			        FROM
//			        	:{Com_("D_T2_BRANCH_TYPE")}
//			        UNION ALL
//			        SELECT
//			            r.ROLE_ID     AS id ,
//			            r.ROLE_NAME   AS name,
//			            r.BRANCH_TYPE AS parent,
//			            'role'        AS type
//			        FROM
//			        	:{Com_("D_T0_ROLE")} r
//			    )
//			    ,
//			    temp1 AS
//			    (
//			        SELECT
//			            ID,
//			            NAME,
//			            PARENT,
//			            TYPE,
//			            CONNECT_BY_ROOT NAME "ROOT",
//			            CONNECT_BY_ISLEAF    is_leaf,
//			            LEVEL,
//			            SYS_CONNECT_BY_PATH(ID, '/') "PATH"
//			        FROM
//			            roles u START WITH PARENT = 'root' CONNECT BY PRIOR ID = PARENT
//			    )
//			    ,
//			    temp2 AS
//			    (
//			        SELECT
//			            t1.ID ids,
//			            t1.name names,
//			            t1.type types,
//			            t1.root roots
//			        FROM
//			            temp1 t1
//			        WHERE
//			            IS_LEAF = 1
//			    )
//			    ,
//			    menu AS
//			    (
//			        SELECT
//			            ID,
//			            NAME,
//			            PARENT_ID,
//			            URL,
//			            CONNECT_BY_ROOT NAME         "ROOT",
//			            CONNECT_BY_ISLEAF            is_leaf,
//			            LEVEL                        levels,
//			            SYS_CONNECT_BY_PATH(ID, '/') "PATH"
//			        FROM
//			            (
//			                SELECT
//			                    *
//			                FROM
//			                	:{Com_("D_T0_MENU")} m
//			                WHERE
//			                    m.PRIORITY !=0 ) m START WITH m.PARENT_ID IS NULL CONNECT BY PRIOR m.ID =
//			            m.PARENT_ID ORDER SIBLINGS BY m.PRIORITY DESC
//			    )
//			    ,
//			    results AS
//			    (
//			        SELECT
//			            t2.*,
//			            m.name,
//			            m.ROOT,
//			            m.LEVELS,
//			            CASE
//			                WHEN p.RESOURCE_ID IS NULL
//			                THEN 0
//			                ELSE 1
//			            END AS checked
//			        FROM
//			            menu m
//			        LEFT JOIN
//			        	:{Com_("D_T0_PERMISSION")} p
//			        ON
//			            p.RESOURCE_ID= m.id
//			        inner JOIN
//			            temp2 t2
//			        ON
//			            p.PRINCIPAL_TYPE = t2.types
//			        AND p.PRINCIPAL_ID = t2.ids
//			    )
//			SELECT
//			    s.ids roleId,
//				s.names roleName,
//				s.roots rootName,
//				s.name powerName,
//				s.root powerRoot
//			FROM
//			    results s
//			WHERE
//			    s.CHECKED = 1
//			AND s.LEVELS = 3
//			order by s.ids,s.root
//		};
//		List<Map> nodeLst = new ArrayList<Map>();
//		while(iter.next()) {
//			Map<String, String> node = new HashMap<String, String>();
//			node.put("roleId", iter.roleId());
//			node.put("roleName", iter.roleName());
//			node.put("rootName", iter.rootName());
//			node.put("powerName", iter.powerName());
//			node.put("powerRoot", iter.powerRoot());
//			nodeLst.add(node);
//		}
//		iter.close();
//		closeDefaultContext(myCtx);
//		return nodeLst;
//		
//	}
	
}