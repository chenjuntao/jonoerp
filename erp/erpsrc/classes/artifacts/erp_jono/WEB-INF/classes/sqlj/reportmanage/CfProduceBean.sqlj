package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class CfProduceBean extends ConnectionPool {
	
	public static Logger log = Logger.getLogger(CfProduceBean.class);
	
	#sql private static iterator HeaderIter(
		String item_id, 
		String item_name,
		String item_dimension,
		Double getAmt,
		Double extraAmt,
		Double returnAmt,
		Double standardCount,
		Double actualCount,
		Double diff
	);
	
	public List<Map> query(String branchId,java.util.Date completeDate)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		Date sDate = SqlDateUtil.getSqlDate(completeDate);
		
		DefaultContext myCtx = getDefaultContext();
		
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			WITH
			    a AS
			    (SELECT
			    	    t.ITEM_ID,
			    	    t.ITEM_NAME,
			    	    m.ITEM_DIMENSION,
			    	    ROUND(SUM(h.ITEM_COUNT*t.ITEM_GROSS_COUNT/t.UNIT_CONVERT_FACTOR),2)   standardCount,
			    	    ROUND(SUM(h.ACTUAL_COUNT*t.ITEM_GROSS_COUNT/t.UNIT_CONVERT_FACTOR),2) actualCount
			    	FROM
			    	:{Com_("D_T1_WORK_ORDER_HEADER")} h
			    	LEFT JOIN
			    	:{Com_("D_T1_ARRENGMENT_DETAIL")} d
			    	ON
			    	    h.FORM_ID = d.WORK_ORDER_ID
			    	LEFT JOIN
			    	:{Com_("D_T2_THERAPY")} t
			    	ON
			    	    h.ITEM_ID = t.THERAPY_ID
			    	LEFT JOIN
			    	:{Com_("D_T2_ITEM_META")} m
			    	ON
			    	    t.ITEM_ID = m.ITEM_ID
			    	WHERE
			    		h.ACTUAL_COUNT IS NOT NULL
			    	AND t.OWNER = 'CENTRALFACTORY'
	    			AND d.PRODUCE_TIME <= :sDate
			    	GROUP BY
			    	    t.ITEM_ID,
			    	    t.ITEM_NAME,
			    	    m.ITEM_DIMENSION
			    	ORDER BY
			    	    t.ITEM_ID)
			    ,
			    b AS
			    (-- 未解决 需关联工单以及生产明细表，完工时间进行过滤数据
			    		SELECT
			    	    d.ITEM_ID,
			    	    d.ITEM_NAME,
			    	    SUM(
			    	        CASE
			    	            WHEN h.FORM_TYPE = 'produce'
			    	            THEN d.RECEIVE_COUNT
			    	            ELSE 0
			    	        END )getAmt,
			    	    SUM(
			    	        CASE
			    	            WHEN h.FORM_TYPE = 'extra'
			    	            THEN d.RECEIVE_COUNT
			    	            ELSE 0
			    	        END )extraAmt,
			    	    SUM(
			    	        CASE
			    	            WHEN h.FORM_TYPE = 'return'
			    	            THEN d.ITEM_COUNT
			    	            ELSE 0
			    	        END )returnAmt
			    	FROM
			    	:{Com_("D_T1_REQUISITION_HEADER")} h
			    	LEFT JOIN
			    	:{Com_("D_T1_REQUISITION_DETAIL")} d
			    	ON
			    	    h.FORM_ID = d.FORM_ID
			    	LEFT JOIN
			    	:{Com_("D_T1_WORK_ORDER_HEADER")} oh
			    	ON
			    	    h.FORM_REF_ID = oh.FORM_ID
    	    		LEFT JOIN
    	    		:{Com_("D_T1_ARRENGMENT_DETAIL")} ad
			    	ON
			    		oh.FORM_ID = ad.WORK_ORDER_ID
			    	WHERE
			    	    oh.ACTUAL_COUNT IS NOT NULL
                    AND ad.PRODUCE_TIME <= :sDate
			    	AND d.ITEM_ID IS NOT NULL
			    	GROUP BY
			    	    d.ITEM_ID,
			    	    d.ITEM_NAME
			    	ORDER BY
			    	    d.ITEM_ID
			    )
			
			  SELECT
	            a.item_id,
	            a.item_name,
	            a.item_dimension,
	            NVL(b.getAmt,0)                                    getAmt,
	            NVL(b.extraAmt,0)                                  extraAmt,
	            NVL(b.returnAmt,0)                                 returnAmt,
	            ROUND(NVL(a.standardCount,0),2)                    standardCount,
	            ROUND(NVL(a.actualCount,0),2)                      actualCount,
	            ROUND(NVL(NVL(actualCount,0) - standardCount,0) -  NVL(b.returnAmt,0) ,2) diff
	        FROM
	            a
	        LEFT JOIN
	            b
	        ON
	            a.ITEM_ID = b.ITEM_ID
	        ORDER BY
	            a.item_id};
		
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("item_id", headerIter.item_id());
			header.put("item_name", headerIter.item_name());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("getAmt", headerIter.getAmt());
			header.put("extraAmt", headerIter.extraAmt());
			header.put("returnAmt", headerIter.returnAmt());
			header.put("standardCount", headerIter.standardCount());
			header.put("actualCount", headerIter.actualCount());
			header.put("diff", headerIter.diff());
			headerLst.add(header);
		}
		return headerLst;
	}
}