/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Nov 20, 2014 by liyzh
 * Last edited on Nov 20, 2014 by liyzh
 * 
 * 说明： 物流中心物资清单查询
 */
package logic.module.lc;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class MaterialListBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(MaterialListBean.class);
	
	#sql private iterator MaterialIter(String item_id,
			String item_name, String item_dimension,
			String item_specification, String category_id,
			Double item_count);
	
	/**
	 * 查询两部分数据：
	 * 1、物流中心汇总后生成的采购单，通过汇总单，间接与要货单关联
	 * 2、直配单、越库单与要货单直接关联
	 */
	public List<Map> query(java.util.Date startDate, java.util.Date endDate, String itemName, String branchId, String supplierId)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = " 1=1";
		if (!"-1".equals(supplierId)) {
			query = query + " AND h.PROVIDER_ID = '" + supplierId + "'";
		}
		itemName = "%" + itemName + "%";
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		MaterialIter materialIter = null;
		#sql [myCtx] materialIter = {
			SELECT
			    m.*, 0 as item_count
			FROM
			:{Com_("D_T2_ITEM_META")} m
			RIGHT JOIN
			    (
			    	SELECT
			    	    d.item_id
			    	FROM
			    	:{Com_("D_T1_PURCHASING_DETAIL")} d
			    	INNER JOIN
			    	:{Com_("D_T1_PURCHASING_HEADER")} h
			    	ON
			    	    h.FORM_ID = d.FORM_ID
			    	WHERE
			    	    (d.ITEM_ID LIKE :itemName
			    	OR  d.ITEM_NAME LIKE :itemName)
	                AND :{query :: 1=1}
                    AND (h.FORM_TIME >= :sDate or :sDate is null)
        			AND (h.FORM_TIME <= :eDate or :eDate is null)
			    	GROUP BY
			    	    d.ITEM_ID
			        ORDER BY
			            1) i
			ON
			    i.item_id = m.ITEM_ID
		};
		List<Map> materialLst = processIter(materialIter);
		materialIter.close();
		closeDefaultContext(myCtx);
		return materialLst;
	}

	private List<Map> processIter(MaterialIter materialIter) 
			throws SQLException {
		List<Map> materialLst = new ArrayList<Map>();
		while(materialIter.next()) {
			Map item = new HashMap<String, Object>();
			item.put("itemId", materialIter.item_id());
			item.put("itemName", materialIter.item_name());
			item.put("itemCategory", materialIter.category_id());
			item.put("itemDimension", materialIter.item_dimension());
			item.put("itemSpecification", materialIter.item_specification());
			item.put("itemCount", materialIter.item_count());
			materialLst.add(item);
		}
		return materialLst;
	}
}