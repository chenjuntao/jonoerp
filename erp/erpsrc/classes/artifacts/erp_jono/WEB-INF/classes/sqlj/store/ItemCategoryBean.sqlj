//===============================================
//
// Copyright (c) 2014
// Tanry Electronic Technology Co., Ltd.
// ChangSha, China
//
// All Rights Reserved.
//
// First created on 2014.8.6 by cjt
// Last edited on 2014.8.6 by cjt
//
// Comments:read:{Com_("D_T2_ITEM_CATEGORY")} table.
// 说明：读取原材料、成品、半成品的类别信息。
//
//===============================================
// 
package logic.store;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.commons.lang.StringUtils;

import pojo.store.ItemCategory;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.framework.acl.NoPrivilegeException;
import com.tanry.framework.util.constant.ItemType;
import com.tanry.framework.util.constant.SysOption;

public class ItemCategoryBean extends ConnectionPool {

	#sql public static iterator CateIter(String category_id, String category_name, 
				String category_level, String parent_id, String path, String item_type);
	
	/**
	 * companyId由调用者通过参数指定,by cjt
	 */
	public int saveEntity(ItemCategory itemCategory, String comId)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getComContext(comId);
		return saveEntityImp(itemCategory, myCtx);
	}
	
	/**
	 * companyId默认通过session访问,by cjt
	 */
	public int saveEntity(ItemCategory itemCategory)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		return saveEntityImp(itemCategory, myCtx);
	}
	
	private int saveEntityImp(ItemCategory itemCategory, DefaultContext myCtx) 
			throws NoPrivilegeException, SQLException, NoConnection {
		String id = itemCategory.getCategoryId();
		String name = itemCategory.getCategoryName();
		String level = itemCategory.getCategoryLevel();
		String parentId = itemCategory.getParentId();
		String path = itemCategory.getPath();
		String itemType = itemCategory.getItemType();

		#sql [myCtx] {
			INSERT
			INTO
			:{Com_("D_T2_ITEM_CATEGORY")}
			    (
			        CATEGORY_ID,
			        CATEGORY_NAME,
			        PARENT_ID,
			        CATEGORY_LEVEL,
			        ITEM_TYPE,
			        PATH
			    )
			    VALUES
			    (
			    	:id,
			    	:name,
			        :parentId,
			        :level,
			        :itemType,
			        :path
			    )
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	/**
	 * companyId由调用者通过参数指定,by cjt
	 */
	public int updateEntity(ItemCategory itemCategory, String comId)
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getComContext(comId);
		return updateEntityImp(itemCategory, myCtx);
	}
		
	/**
	 * companyId默认通过session访问,by cjt
	 */
	public int updateEntity(ItemCategory itemCategory) 
			throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		return updateEntityImp(itemCategory, myCtx);
	}
	
	private int updateEntityImp(ItemCategory itemCategory, DefaultContext myCtx)
			throws NoPrivilegeException, SQLException, NoConnection {
		
		String id = itemCategory.getCategoryId();
		String name = itemCategory.getCategoryName();
		String level = itemCategory.getCategoryLevel();
		String parentId = itemCategory.getParentId();
		String path = itemCategory.getPath();
		String itemType = itemCategory.getItemType();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T2_ITEM_CATEGORY")}
			SET
			    CATEGORY_NAME = :name,
			    PARENT_ID = :parentId,
			    CATEGORY_LEVEL = :level,
			    ITEM_TYPE = :itemType,
			    PATH = :path
			WHERE 
				CATEGORY_ID = :id
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	/**
	 * 是否包含该类别,by cjt
	 */
	public boolean containsEntity(String itemId, String itemType, String comId)
			throws NoPrivilegeException, SQLException, NoPrivilegeException{
		DefaultContext myCtx = getComContext(comId);
		int count = 0;
		#sql [myCtx] {
			select count(*) into :count
			from :{Com_("D_T2_ITEM_CATEGORY")}
			where CATEGORY_ID = :itemId
			and ITEM_TYPE = :itemType
		};

		closeDefaultContext(myCtx);
		return count > 0;
	}
	
	public ItemCategory queryById(String cateId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		CateIter cateIter = null;
		#sql [myCtx] cateIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T2_ITEM_CATEGORY")}
			WHERE
				CATEGORY_ID = :cateId
		};
		ItemCategory category = null;
		while(cateIter.next()) {
			category = new ItemCategory();
			category.setCategoryId(cateIter.category_id());
			category.setCategoryName(cateIter.category_name());
			category.setCategoryLevel(cateIter.category_level());
			category.setParentId(cateIter.parent_id());
			category.setPath(cateIter.path());
			category.setItemType(cateIter.item_type());
		}
		cateIter.close();
		closeDefaultContext(myCtx);
		return category;
	}

	#sql public static iterator NodeIter(String category_id, String category_name, 
			String parent_id, String path, String item_type,String isLeaf);
	
	/**
	 * 按照（1原材料/2半成品/3成品）来查询该类型的所有类别集合
	 */
	public List<ItemCategory> queryTree(String itemType) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String inClause = "'" + itemType + "'";
		if (ItemType.R_S.equals(itemType)) {
			inClause = "'RAW', 'SEMIS','SELFSEMIS'";
		}
		String query = " AND c.ITEM_TYPE IN (" + inClause + ")";
		
		DefaultContext myCtx = getDefaultContext();
		NodeIter nodeIter = null;
		#sql [myCtx] nodeIter = {
			SELECT
			    LEVEL                               levelNum,
			    DECODE(CONNECT_BY_ISLEAF,0,'N','Y') isLeaf,
			    c.*
			FROM
				D_T2_ITEM_CATEGORY c CONNECT BY PRIOR c.CATEGORY_ID = c.PARENT_ID START WITH c.PARENT_ID = '*'
			    	:{query :: 1=1}  ORDER siblings BY c.CATEGORY_ID
		};
		
		List<ItemCategory> nodeLst = new ArrayList<ItemCategory>();
		while(nodeIter.next()) {
			ItemCategory node = new ItemCategory();
			node.setCategoryId(nodeIter.category_id());
			node.setCategoryName(nodeIter.category_name());
			node.setParentId(nodeIter.parent_id());
			node.setPath(nodeIter.path());
			node.setItemType(nodeIter.item_type());
			node.setIsLeaf(nodeIter.isLeaf());
			nodeLst.add(node);
		}
		nodeIter.close();
		closeDefaultContext(myCtx);
		
		return nodeLst;
	}

	public List<ItemCategory> GetAllItemCategory() 
			throws NoPrivilegeException,SQLException,NoConnection {
		List<ItemCategory> result = new ArrayList<ItemCategory>();
		DefaultContext myCtx = getDefaultContext();
		CateIter cateIter = null;
		#sql [myCtx] cateIter = {
			SELECT
		    	*
			FROM
			:{Com_("D_T2_ITEM_CATEGORY")} b
		};
		while(cateIter.next()) {
			ItemCategory category = new ItemCategory();
			category.setCategoryId(cateIter.category_id());
			category.setCategoryName(cateIter.category_name());
			category.setCategoryLevel(cateIter.category_level());
			category.setParentId(cateIter.parent_id());
			category.setPath(cateIter.path());
			category.setItemType(cateIter.item_type());
			result.add(category);
		}
		cateIter.close();
		closeDefaultContext(myCtx);
		
		return result;
	}
	
	#sql private iterator CateIdIter(String category_id);
	/**
	 * 获取所有的分类id，用于导入数据时比较异同
	 */
	public List<ItemCategory> listCategoryId() 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		CateIdIter idIter = null;
		#sql [myCtx] idIter = {
			select category_id from :{Com_("D_T2_ITEM_CATEGORY")} 
		};

		List<ItemCategory> idLst = new ArrayList<ItemCategory>();
		while(idIter.next())
		{
			ItemCategory category = new ItemCategory();
			category.setCategoryId(idIter.category_id());
			idLst.add(category);
		}
		idIter.close();
		closeDefaultContext(myCtx);
		return idLst;
	}

}