/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Thu Dec 11 15:06:52 CST 2014 by lyz
 * Last edited on Wed July 22 8:17:12 CST 2015 by lyz
 * 
 * comment: 装箱单表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.PackingHeader;
import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class PackingHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(PackingHeaderBean.class);
	
	public int newSerial(java.util.Date businessDate, String branchId) 
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String maxId = null;
		Date bDate = SqlDateUtil.getSqlDate(businessDate);
		#sql [myCtx] {
			SELECT
			    MAX(h.FORM_ID) into :maxId
			FROM
			:{Com_("D_T1_PACKING_HEADER")} h
			WHERE
			    h.FORM_TIME = :bDate
			AND h.PACKING_BRANCH_ID = :branchId
		};
		closeDefaultContext(myCtx);

		int result = 1;
		if (maxId != null) {
			maxId = maxId.substring(maxId.length() - FormConstant.DEFAULT_SERIAL_LENGTH);
			result = Integer.parseInt(maxId) + 1;
		}
		return result;
	}
	
	public int saveEntity(PackingHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		
		String formId = header.getFormId();
		String packingBranchId = header.getPackingBranchId();
		String formRefId = header.getFormRefId();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		Date formTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		Date packingTime = SqlDateUtil.getSqlDate(header.getPackingTime());
		String formNote = header.getFormNote();

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_PACKING_HEADER")} 
				(FORM_ID, PACKING_BRANCH_ID, FORM_REF_ID, FORM_MAKER_ID, FORM_MAKER, FORM_TIME, FORM_TIME_ACTUAL, PACKING_TIME, FORM_NOTE) 
			VALUES (:formId, :packingBranchId, :formRefId, :formMakerId, :formMaker, :formTime, :formTimeActual, :packingTime, :formNote)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(PackingHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String formMakerId = header.getFormMakerId();
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		Date packingTime = SqlDateUtil.getSqlDate(header.getPackingTime());
		String formNote = header.getFormNote();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PACKING_HEADER")}
			SET
				FORM_ID = :formId,
				FORM_MAKER_ID = :formMakerId,
				FORM_MAKER = :formMaker,
				FORM_TIME = :formTime,
				PACKING_TIME = :packingTime,
				FORM_NOTE = :formNote
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_PACKING_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int audit(String formId, String userId, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_PACKING_HEADER")}
			SET
				auditor = :userId,
				audit_time = :sAuditTime
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_PACKING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId, String queryType) {
		String query = " 1=1";
		if (!"-1".equals(branchId)) {
			query = query + " AND h.REQUESTER_ID = '" + branchId + "'";
		}
		if ("unaudit".equals(queryType)) { // 获取未处理记录
			query = query + " AND NVL( s.STATUS, 'null') = '未处理'"; 
		}
		return query;
	}
	
	public List<PackingHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, String queryType, int startRow, int endRow) 
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T1_PACKING_HEADER")} h
			LEFT JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query ::}
			AND (h.AUDIT_TIME >= :sDate or :sDate is null)
			AND (h.AUDIT_TIME <= :eDate or :eDate is null)
		};
		List<PackingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public PackingHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			FROM
			:{Com_("D_T1_PACKING_HEADER")} h
			WHERE
				h.form_id = :formId
		};
		List<PackingHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}

	#sql private iterator NodeIter(String id, String name, String parent);

	/**
	 * 查询装箱单，以树形控件组织，制单日期-〉装箱单
	 */
	public List<Map> queryTree() 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		NodeIter nodeIter = null;
		#sql [myCtx] nodeIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                TO_CHAR( h.FORM_TIME, 'yyyy-MM-dd') AS id,
			                TO_CHAR( h.FORM_TIME, 'yyyy-MM-dd') AS name,
			                'root'                              AS parent
			            FROM
			            :{Com_("D_T1_PACKING_HEADER")} h
			            GROUP BY
			                h.FORM_TIME
			            ORDER BY
			                h.FORM_TIME DESC)
			    UNION ALL
			    SELECT
			        *
			    FROM
			        (
			            SELECT
			                h.form_id                           AS id,
			                h.form_id                           AS name,
			                TO_CHAR( h.FORM_TIME, 'yyyy-MM-dd') AS parent
			            FROM
			            :{Com_("D_T1_PACKING_HEADER")} h
			            ORDER BY
			                h.FORM_ID)};
		List<Map> nodeLst = new ArrayList<Map>();
		while(nodeIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", nodeIter.id());
			node.put("name", nodeIter.name());
			node.put("parent", nodeIter.parent());
			nodeLst.add(node);
		}
		nodeIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}

	/**
	 * 查询装箱单，以树形控件组织，制单日期-〉装箱单  添加时间查询条件
	 */
	public List<Map> queryTree(java.util.Date startDate, java.util.Date endDate) 
			throws NoPrivilegeException,SQLException,NoConnection {
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		DefaultContext myCtx = getDefaultContext();
		NodeIter nodeIter = null;
		#sql [myCtx] nodeIter = {
			SELECT
			    *
			    FROM(
			            SELECT
			                TO_CHAR( h.FORM_TIME, 'yyyy-MM-dd') AS id,
			                TO_CHAR( h.FORM_TIME, 'yyyy-MM-dd') AS name,
			                'root'                              AS parent
			            FROM
			            :{Com_("D_T1_PACKING_HEADER")} h
			                WHERE
					           (h.FORM_TIME >= :sDate or :sDate is null)
								AND (h.FORM_TIME <= :eDate or :eDate is null)
			            GROUP BY
			                h.FORM_TIME
			            ORDER BY
			                h.FORM_TIME DESC)
			    UNION ALL
			    SELECT
			        *
			    FROM
			        (
			            SELECT
			                h.form_id                           AS id,
			                h.form_id                           AS name,
			                TO_CHAR( h.FORM_TIME, 'yyyy-MM-dd') AS parent
			            FROM
			            :{Com_("D_T1_PACKING_HEADER")} h
			            ORDER BY
			                h.FORM_ID)};
		List<Map> nodeLst = new ArrayList<Map>();
		while(nodeIter.next()) {
			Map<String, String> node = new HashMap<String, String>();
			node.put("id", nodeIter.id());
			node.put("name", nodeIter.name());
			node.put("parent", nodeIter.parent());
			nodeLst.add(node);
		}
		nodeIter.close();
		closeDefaultContext(myCtx);
		return nodeLst;
	}

	#sql private iterator HeaderIter(String form_id, String form_maker_id, String form_maker, 
			Date form_time,Date form_time_actual, Date packing_time, String form_note);
	
	private List<PackingHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<PackingHeader> headerLst = new ArrayList<PackingHeader>();
		while(headerIter.next()) {
			PackingHeader header = new PackingHeader();
			header.setFormId(headerIter.form_id());
			header.setFormMakerId(headerIter.form_maker_id());
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setFormTimeActual(SqlDateUtil.getUtilDate(headerIter.form_time_actual()));
			header.setPackingTime(SqlDateUtil.getUtilDate(headerIter.packing_time()));
			header.setFormNote(headerIter.form_note());
			headerLst.add(header);
		}
		return headerLst;
	}
}