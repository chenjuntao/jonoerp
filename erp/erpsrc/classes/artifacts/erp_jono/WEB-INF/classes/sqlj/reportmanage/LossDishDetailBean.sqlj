package logic.reportmanage;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import sqlj.runtime.ref.DefaultContext;
import com.tanry.business.form.FormConstant;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.util.constant.BillStatus;
import com.tanry.framework.acl.NoPrivilegeException;

public class LossDishDetailBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(LossDishDetailBean.class);
	
	#sql private iterator HeaderIter(
			String form_id, //报损单据
		 	String item_id, //出品编码
		 	String item_id2, // 原料编码
	 	 	String item_name, //出品名称
	 	 	String item_name2, // 原料名称
	 	 	String item_dimension,
	 	 	Double item_count,// 出品报损数量
	 	 	Double item_count2,// 原料报损数量
	 	 	Double unit_price, //原料单价
	 	 	Double pay_amt, //原料金额
	 	 	Date loss_time,
	 	 	Date audit_time,
	 	 	String reason, // 出品报损原因
	 	 	String storage_id,
	 	 	String storage,
	 	 	String loss_branch_id,
	 	 	String loss_branch);
	
	#sql private iterator SumIter(
			Double item_count,
			Double pay_amt);
	
	public Map getColmunType(){
		Map map  = new HashMap();
		map.put("form_id", "String");
		map.put("item_id", "String");
		map.put("item_id2", "String");
		map.put("item_name", "String");
		map.put("item_name2", "String");
		map.put("item_dimension", "String");
		map.put("item_count", "Number"); 
		map.put("item_count2", "Number"); 
		map.put("loss_time", "Date"); 
		map.put("audit_time", "Date"); 
		map.put("reason", "String"); 
		map.put("storage_id", "String"); 
		map.put("storage", "String"); 
		map.put("loss_branch_id", "String"); 
		map.put("loss_branch", "String"); 
		
		return map;
	}
	
	public Map getColmunPrefix(){
		Map map  = new HashMap();
		map.put("form_id", "d");
		map.put("item_id", "d");
		map.put("item_name", "d");
		map.put("item_dimension", "d");
		map.put("item_specification", "d");
		map.put("item_count", "d"); 
		map.put("loss_time", "h"); 
		map.put("audit_time", "h"); 
		map.put("storage_id", "h"); 
		map.put("storage", "h"); 
		map.put("loss_branch_id", "h"); 
		map.put("loss_branch", "h"); 
		map.put("reason", "d"); 
		
		return map;
	}
	
	public int count(String queryStr)
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
		SELECT
		    COUNT(*)
		INTO
		    :total
		    FROM
           :{Com_("D_T1_LOSS_HEADER")} h
        INNER JOIN
           :{Com_("D_T1_LOSS_DETAIL")} d
        ON
            d.FORM_ID = h.FORM_ID
        AND h.AUDIT_TIME IS NOT NULL
        LEFT JOIN
           :{Com_("D_T2_BRANCH")} b
        ON
            h.LOSS_BRANCH_ID = b.BRANCH_ID
        LEFT JOIN
           :{Com_("D_T2_THERAPY")} t
        ON
            d.ITEM_ID = t.THERAPY_ID
        AND t.OWNER = 'RESTAURANT'
        LEFT JOIN
           :{Com_("D_T2_ITEM_PRICE")} p
        ON
            t.ITEM_ID = p.ITEM_ID
        AND p.IS_CURRENT =1
        AND p.PRICE_TYPE = 'BENCHMARK'
        WHERE
        	 1 = 1  :{queryStr :: ''} };
		closeDefaultContext(myCtx);
		return total;
	}
	
	
	public List<Map> query(int startRow, int endRow,String queryStr,String sortStr)  
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                ROWNUM rowNumber
			            FROM
			                (
			                    SELECT
			                        d.FORM_ID,
			                        d.ITEM_ID,
			                        d.ITEM_NAME,
			                        d.ITEM_DIMENSION,
			                        d.ITEM_COUNT,
			                        d.REASON,
			                        h.loss_type,
			                        h.storage_id,
			                        h.storage,
			                        h.loss_branch_id,
			                        h.loss_branch,
			                        h.loss_time,
			                        h.audit_time,
			                        t.ITEM_ID                                        item_id2,
			                        t.ITEM_NAME                                      item_name2,
			                        t.ITEM_GROSS_COUNT*d.item_count                       item_count2,
			                        p.ITEM_PRICE                                          UNIT_PRICE,
			                        ROUND(t.ITEM_GROSS_COUNT*d.item_count*p.ITEM_PRICE,2) PAY_AMT
			                    FROM
			                       :{Com_("D_T1_LOSS_HEADER")} h
			                    INNER JOIN
			                       :{Com_("D_T1_LOSS_DETAIL")} d
			                    ON
			                        d.FORM_ID = h.FORM_ID
			                    AND h.AUDIT_TIME IS NOT NULL
			                    LEFT JOIN
			                       :{Com_("D_T2_BRANCH")} b
			                    ON
			                        h.LOSS_BRANCH_ID = b.BRANCH_ID
			                    LEFT JOIN
			                       :{Com_("D_T2_THERAPY")} t
			                    ON
			                        d.ITEM_ID = t.THERAPY_ID
			                    AND t.OWNER = 'RESTAURANT'
			                    LEFT JOIN
			                       :{Com_("D_T2_ITEM_PRICE")} p
			                    ON
			                        t.ITEM_ID = p.ITEM_ID
			                    AND p.IS_CURRENT =1
			                    AND p.PRICE_TYPE = 'BENCHMARK'
			                    WHERE
			                        1 = 1 :{queryStr :: ''} :{sortStr :: ''}) t
			            WHERE
			                ROWNUM < :endRow)
			    WHERE
			        rowNumber >= :startRow};
		List<Map> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public Map sum( String queryStr) 
			throws NoPrivilegeException,SQLException,NoConnection {
		
		DefaultContext myCtx = getDefaultContext();
		
		SumIter sumIter = null;
		
		#sql [myCtx] sumIter = {
			SELECT
			    SUM( d.ITEM_COUNT) ITEM_COUNT,
			    SUM(t.ITEM_GROSS_COUNT*d.item_count) ITEM_COUNT2,
			    SUM(round(t.ITEM_GROSS_COUNT*d.item_count*p.ITEM_PRICE,2))     PAY_AMT
		    FROM
               :{Com_("D_T1_LOSS_HEADER")} h
            INNER JOIN
               :{Com_("D_T1_LOSS_DETAIL")} d
            ON
                d.FORM_ID = h.FORM_ID
            AND h.AUDIT_TIME IS NOT NULL
            LEFT JOIN
               :{Com_("D_T2_BRANCH")} b
            ON
                h.LOSS_BRANCH_ID = b.BRANCH_ID
            LEFT JOIN
               :{Com_("D_T2_THERAPY")} t
            ON
                d.ITEM_ID = t.THERAPY_ID
            AND t.OWNER = 'RESTAURANT'
            LEFT JOIN
               :{Com_("D_T2_ITEM_PRICE")} p
            ON
                t.ITEM_ID = p.ITEM_ID
            AND p.IS_CURRENT =1
            AND p.PRICE_TYPE = 'BENCHMARK'
            WHERE
            	 1 = 1  :{queryStr :: ''} };
		
		closeDefaultContext(myCtx);
		
		Map sumMap = processSumIter(sumIter);
		sumIter.close();
		
		return sumMap;
	}
	
	private Map processSumIter(SumIter sumIter) 
			throws SQLException {
		Map sumMap = new HashMap();
		
		while(sumIter.next()) {
			sumMap.put("item_count", sumIter.item_count());
			sumMap.put("pay_amt", sumIter.pay_amt());
		}
			
		return sumMap;
	}
	
	private List<Map> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<Map> headerLst = new ArrayList<Map>();
		
		while(headerIter.next()) {
			Map header = new HashMap();
			header.put("form_id", headerIter.form_id());
			header.put("item_id", headerIter.item_id());
			header.put("item_id2", headerIter.item_id2());
			header.put("item_name", headerIter.item_name());
			header.put("item_name2", headerIter.item_name2());
			header.put("item_dimension", headerIter.item_dimension());
			header.put("item_count", headerIter.item_count());
			header.put("item_count2", headerIter.item_count2());
			header.put("unit_price", headerIter.unit_price());
			header.put("pay_amt", headerIter.pay_amt());
			header.put("loss_time", headerIter.loss_time());
			header.put("audit_time", headerIter.audit_time());
			header.put("reason", headerIter.reason());
			header.put("storage_id", headerIter.storage_id());
			header.put("storage", headerIter.storage());
			header.put("loss_branch_id", headerIter.loss_branch_id());
			header.put("loss_branch", headerIter.loss_branch());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}