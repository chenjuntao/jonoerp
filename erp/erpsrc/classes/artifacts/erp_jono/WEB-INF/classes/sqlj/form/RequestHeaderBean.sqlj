/**
 * Copyright (c) 2014
 * Tanry Electronic Technology Co., Ltd.
 * ChangSha, China
 * 
 * All Rights Reserved.
 * 
 * First created on Aug 26, 2014 by liyzh
 * Last edited on Aug 26, 2014 by liyzh
 * 
 * 说明： 餐厅要货、外部订货商订货需求表头
 */
package logic.form;

import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.NoConnection;
import logic.pool.ConnectionPool;

import org.apache.log4j.Logger;

import pojo.form.RequestHeader;
import sqlj.runtime.ref.DefaultContext;

import com.tanry.business.form.FormConstant;
import com.tanry.business.form.FormType;
import com.tanry.framework.util.SqlDateUtil;
import com.tanry.framework.util.TextUtil;
import com.tanry.framework.acl.NoPrivilegeException;

public class RequestHeaderBean extends ConnectionPool {

	public static Logger log = Logger.getLogger(RequestHeaderBean.class);
	
	#sql private iterator HeaderIter(
			String rownumber,
			String form_id,
			String form_type,
			String buyer_id,
			String buyer_name,
			String buyer_address,
			Date receive_time,
			String form_maker,
			Date form_time,
			Date form_time_actual,
			String auditor,
			Date audit_time, 
			String purchase_status, 
			String shipping_status,
			String form_note,
			Date ref_date_start1,
			Date ref_date_end1,
			Date ref_date_start2,
			Date ref_date_end2,
			Date ref_date_start3,
			Date ref_date_end3,
			Double delay_predict,
			Double purchase_predict,
			Double safety_stock,
			Double sell_predict,
			Double all_pay_amt,
			String max_pay_item, 
			Integer arrive_period, 
			String delivery_type, 
			String form_status,
			String provider,
			String provider_Id,
			String template_Id,
			String template_Name,
			String isAddForm
		);
	
	public int newSerial(java.util.Date businessDate, String branchId) 
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String maxId = null;
		Date bDate = SqlDateUtil.getSqlDate(businessDate);
		#sql [myCtx] {
			SELECT
			    MAX(h.FORM_ID) into :maxId
			FROM
			:{Com_("D_T1_REQUEST_HEADER")} h
			WHERE
			    h.FORM_TIME = :bDate
			AND h.BUYER_ID = :branchId
		};
		closeDefaultContext(myCtx);

		int result = 1;
		if (maxId != null) {
			maxId = maxId.substring(maxId.length() - FormConstant.DEFAULT_SERIAL_LENGTH);
			result = Integer.parseInt(maxId) + 1;
		}
		return result;
	}
	
	/**
	 * 保存
	 */
	public int saveEntity(RequestHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		String formType = header.getFormType();
		String buyerId = header.getBuyerId();
		String buyerName = header.getBuyerName();
		String storageId = header.getStorageId();
		String storage = header.getStorage();
		String buyerAddress = header.getBuyerAddress();
		
		String providerId = header.getProviderId();
		String provider = header.getProvider();
		
		String templateId = header.getTemplateId();
		String templateName = header.getTemplateName();
		
		Date receiveTime = SqlDateUtil.getSqlDate(header.getReceiveTime());
		String formMaker = header.getFormMaker();
		Date formTime = SqlDateUtil.getSqlDate(header.getFormTime());
		Date formTimeActual = SqlDateUtil.getSqlDate(new java.util.Date());
		String auditor = header.getAuditor();
		Date auditTime = SqlDateUtil.getSqlDate(header.getAuditTime());
		String formNote = header.getFormNote();
		Date refDateStart1 = SqlDateUtil.getSqlDate(header.getRefDateStart1());
		Date refDateEnd1 = SqlDateUtil.getSqlDate(header.getRefDateEnd1());
		Date refDateStart2 = SqlDateUtil.getSqlDate(header.getRefDateStart2());
		Date refDateEnd2 = SqlDateUtil.getSqlDate(header.getRefDateEnd2());
		Date refDateStart3 = SqlDateUtil.getSqlDate(header.getRefDateStart3());
		Date refDateEnd3 = SqlDateUtil.getSqlDate(header.getRefDateEnd3());
		Double delayPredict = header.getDelayPredict();
		Double purchasePredict = header.getPurchasePredict();
		Double safetyStock = header.getSafetyStock();
		Double sellPredict = header.getSellPredict();
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();
		int arrivePeriod = header.getArrivePeriod();
		String deliveryType = header.getDeliveryType();
		String isAddForm = header.getIsAddForm();

		if (FormType.REQUEST_REST.equals(formType)) {
			#sql [myCtx] {
				SELECT
				    s.STORAGE_ID,
				    s.STORAGE_NAME into :storageId, :storage
				FROM
				:{Com_("D_T2_BRANCH_STORAGE")} s
				WHERE
				    s.BRANCH_ID = :buyerId
			};
		}

		#sql [myCtx] {
			INSERT INTO :{Com_("D_T1_REQUEST_HEADER")} 
				(FORM_ID, FORM_TYPE, BUYER_ID, BUYER_NAME, STORAGE_ID, STORAGE, BUYER_ADDRESS,PROVIDER_ID,PROVIDER,TEMPLATE_ID,TEMPLATE_NAME, RECEIVE_TIME, FORM_MAKER, 
						FORM_TIME, FORM_TIME_ACTUAL, AUDITOR, AUDIT_TIME, FORM_NOTE, 
						REF_DATE_START1, REF_DATE_END1, REF_DATE_START2, REF_DATE_END2, REF_DATE_START3, REF_DATE_END3,
						DELAY_PREDICT, PURCHASE_PREDICT, SAFETY_STOCK, SELL_PREDICT, ALL_PAY_AMT, MAX_PAY_ITEM, ARRIVE_PERIOD, DELIVERY_TYPE,ISADDFORM) 
						VALUES (:formId, :formType,
								:buyerId, :buyerName, :storageId, :storage,
								:buyerAddress,
								:providerId,
								:provider,
								:templateId,
								:templateName,
								:receiveTime, 
								:formMaker, 
								:formTime, :formTimeActual,
								:auditor, 
								:auditTime, 
								:formNote, 
								:refDateStart1, 
								:refDateEnd1, 
								:refDateStart2, 
								:refDateEnd2, 
								:refDateStart3, 
								:refDateEnd3, 
								:delayPredict, 
								:purchasePredict, 
								:safetyStock, 
								:sellPredict, :allPayAmt, :maxPayItem, :arrivePeriod, :deliveryType,:isAddForm)
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateEntity(RequestHeader header)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		String formId = header.getFormId();
		Date receiveTime = SqlDateUtil.getSqlDate(header.getReceiveTime());
		String formNote = header.getFormNote();
		Double delayPredict = header.getDelayPredict();
		Double purchasePredict = header.getPurchasePredict();
		Double safetyStock = header.getSafetyStock();
		Double sellPredict = header.getSellPredict();
		Double allPayAmt = header.getAllPayAmt();
		String maxPayItem = header.getMaxPayItem();

		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_REQUEST_HEADER")}
			SET
				RECEIVE_TIME = :receiveTime,
				FORM_NOTE = :formNote,
				DELAY_PREDICT = :delayPredict,
				PURCHASE_PREDICT = :purchasePredict,
				SAFETY_STOCK = :safetyStock,
				SELL_PREDICT = :sellPredict,
			    ALL_PAY_AMT = :allPayAmt,
			    MAX_PAY_ITEM = :maxPayItem
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	public int updateDeliveryType(String formId) 
			throws NoPrivilegeException, SQLException, NoConnection {
			DefaultContext myCtx = getDefaultContext();

			#sql [myCtx] {
				UPDATE
			    :{Com_("D_T1_REQUEST_DETAIL")} d2
			    SET
			        d2.DELIVERY_TYPE =
			        (
			            SELECT
			                DECODE(m.ITEM_TYPE,'RAW',dt.DELIVERY_TYPE,'UNIFIED')DELIVERY_TYPE
			            FROM
			                :{Com_("D_T1_REQUEST_DETAIL")} d
			            INNER JOIN
			                :{Com_("D_T1_REQUEST_HEADER")} h
			            ON
			                d.FORM_ID = h.FORM_ID
			            AND h.FORM_ID = :formId
			            LEFT JOIN
			                :{Com_("D_T2_DELIVERY_REGION_BRANCH")} drb
			            ON
			                h.BUYER_ID = drb.BRANCH_ID
			            LEFT JOIN
			                :{Com_("D_T2_DELIVERY_TYPE")} dt
			            ON
			                drb.REGION_ID = dt.REGION_ID
			            AND d.ITEM_ID = dt.ITEM_ID
			            LEFT JOIN
			                :{Com_("D_T2_ITEM_META")} m
			            ON
			                d.ITEM_ID = m.ITEM_ID
			            WHERE
			                d.FORM_ID = :formId
                		AND d.FORM_ID=d2.FORM_ID
			            AND d.ITEM_ID = d2.ITEM_ID)
			    WHERE
			        EXISTS
			        (
			            SELECT
			                1
			            FROM
			                :{Com_("D_T1_REQUEST_DETAIL")} d
			            INNER JOIN
			                :{Com_("D_T1_REQUEST_HEADER")} h
			            ON
			                d.FORM_ID = h.FORM_ID
			            AND h.FORM_ID = :formId
			            LEFT JOIN
			                :{Com_("D_T2_DELIVERY_REGION_BRANCH")} drb
			            ON
			                h.BUYER_ID = drb.BRANCH_ID
			            LEFT JOIN
			                :{Com_("D_T2_DELIVERY_TYPE")} dt
			            ON
			                drb.REGION_ID = dt.REGION_ID
			            AND d.ITEM_ID = dt.ITEM_ID
			            LEFT JOIN
			                :{Com_("D_T2_ITEM_META")} m
			            ON
			                d.ITEM_ID = m.ITEM_ID
			            WHERE
			                d.FORM_ID = :formId
                		AND d.FORM_ID=d2.FORM_ID
			            AND d.ITEM_ID = d2.ITEM_ID)};
			closeDefaultContext(myCtx);
			
			return 1;
		}

	public int deleteEntity(String formId)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		#sql [myCtx] {
			DELETE
			FROM
			:{Com_("D_T1_REQUEST_HEADER")}
			WHERE
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	/**
	 * 设置是否进行采购汇总
	 */
	public int savePurchaseStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_REQUEST_HEADER")}
			SET
				PURCHASE_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	/**
	 * 设置是否进行配送处理
	 */
	public int saveShippingStatus(String formId, String status)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_REQUEST_HEADER")}
			SET
				SHIPPING_STATUS = :status
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}
	
	/**
	 * 餐厅要货单审核
	 */
	public int audit(String formId, String userId, java.util.Date auditTime)
		throws NoPrivilegeException, SQLException, NoConnection {
		DefaultContext myCtx = getDefaultContext();

		Date sAuditTime = SqlDateUtil.getSqlDate(auditTime);
		#sql [myCtx] {
			UPDATE
			:{Com_("D_T1_REQUEST_HEADER")}
			SET
				auditor = :userId,
				audit_time = :sAuditTime
			WHERE 
				FORM_ID = :formId
		};
		closeDefaultContext(myCtx);
		
		return 1;
	}

	public int count(java.util.Date startDate, java.util.Date endDate, String branchId, String formType, String queryType)
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		int total = 0;
		#sql [myCtx] {
			SELECT
			    count(*) into :total
			FROM
			:{Com_("D_T1_REQUEST_HEADER")} h
			INNER JOIN
			:{Com_("D_T0_FORM_STATUS")} s
			ON
			    s.FORM_ID = h.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
				:{query :: 1=1}
            AND h.FORM_TYPE = :formType
            AND (h.FORM_TIME >= :sDate or :sDate is null)
			AND (h.FORM_TIME <= :eDate or :eDate is null)
		};
		closeDefaultContext(myCtx);
		return total;
	}
	
	private String formQuery(String branchId, String queryType) {
		String query = " 1=1";
		if (!TextUtil.isEmpty(branchId)) {
			query = query + " AND h.BUYER_ID = '" + branchId + "'";
		}
		if ("unaudit".equals(queryType)) { // 获取未审核记录
			query = query + " AND NVL( s.STATUS, 'null') = '未审核'"; 
		} else if ("audit".equals(queryType)) { // 获取已审核记录
			query = query + " AND NVL( s.STATUS, 'null') = '已审核'";
		} else if ("handled".equals(queryType)) {//物流中心生成外部出货单后过滤已出货单
			query = query + " AND NVL( s.STATUS, 'null') = '已审核' AND h.SHIPPING_STATUS IS NULL";
		} else if ("dcreate".equals(queryType)) { // 获取已审核的统配要货单记录，用于生成相应的配送单
			query = query + " AND NVL( s.STATUS, 'null') = '已审核' AND h.DELIVERY_TYPE = 'UNIFIED'";
		} else if ("pcreate".equals(queryType)) { // 获取已审核的非统配要货单记录，用于生成相应的采购单（即直配和越库单据）
			query = query + " AND NVL( s.STATUS, 'null') = '已审核' AND h.DELIVERY_TYPE != 'UNIFIED'";
		}
		return query;
	}
	
	/**
	 * 查询所有状态的要货单， 查询时间是该门店的营业时间
	 */
	public List<RequestHeader> query(java.util.Date startDate, java.util.Date endDate, String branchId, int startRow, int endRow, String formType, String queryType)  
			throws NoPrivilegeException,SQLException,NoConnection {
		String query = formQuery(branchId, queryType);
		Date sDate = SqlDateUtil.getSqlDate(startDate);
		Date eDate = SqlDateUtil.getSqlDate(endDate);
		
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    *
			    FROM
			        (
			            SELECT
			                t.*,
			                DECODE(FORM_ID,NULL,'合计',to_char(ROWNUM)) rownumber,
			                ROWNUM                           rowIndex
			            FROM
			                (
			                    SELECT
			                        h.FORM_ID,
			                        h.FORM_TYPE,
			                        h.BUYER_ID,
			                        h.BUYER_NAME,
			                        h.STORAGE_ID,
			                        h.STORAGE,
			                        h.BUYER_ADDRESS,
			                        h.PROVIDER_ID,
			                        h.PROVIDER,
			                        h.RECEIVE_TIME,
			                        h.FORM_MAKER,
			                        h.FORM_TIME,
			                        h.AUDITOR,
			                        h.AUDIT_TIME,
			                        h.FORM_NOTE,
			                        h.REF_DATE_START1,
			                        h.REF_DATE_END1,
			                        h.REF_DATE_START2,
			                        h.REF_DATE_END2,
			                        h.REF_DATE_START3,
			                        h.REF_DATE_END3,
			                        h.DELAY_PREDICT,
			                        h.PURCHASE_PREDICT,
			                        h.SAFETY_STOCK,
			                        h.SELL_PREDICT,
			                        SUM(h.ALL_PAY_AMT) ALL_PAY_AMT,
			                        h.MAX_PAY_ITEM,
			                        h.ARRIVE_PERIOD,
			                        h.DELIVERY_TYPE,
			                        h.PURCHASE_STATUS,
			                        h.SHIPPING_STATUS,
			                        h.FORM_TIME_ACTUAL,
			                        h.TEMPLATE_ID,
			                        h.TEMPLATE_NAME,
			                        h.ISADDFORM,
			                        s.STATUS AS FORM_STATUS
			                    FROM
			                        :{Com_("D_T1_REQUEST_HEADER")} h
			                    LEFT JOIN
			                        :{Com_("D_T0_FORM_STATUS")} s
			                    ON
			                        s.FORM_ID = h.FORM_ID
			                    AND s.IS_CURRENT = 1
			                    WHERE
			                        :{query :: 1=1}
			                    AND h.FORM_TYPE = :formType
			                    AND (
			                            h.FORM_TIME >= :sDate
			                        OR  :sDate IS NULL)
			                    AND (
			                            h.FORM_TIME <= :eDate
			                        OR  :eDate IS NULL)
			                    GROUP BY
			                        GROUPING SETS( ( h.FORM_ID, h.FORM_TYPE, h.BUYER_ID, h.BUYER_NAME, h.STORAGE_ID
			                        , h.STORAGE, h.BUYER_ADDRESS, h.PROVIDER_ID, h.PROVIDER, h.RECEIVE_TIME,
			                        h.FORM_MAKER, h.FORM_TIME, h.AUDITOR, h.AUDIT_TIME, h.FORM_NOTE,
			                        h.REF_DATE_START1, h.REF_DATE_END1, h.REF_DATE_START2, h.REF_DATE_END2,
			                        h.REF_DATE_START3, h.REF_DATE_END3, h.DELAY_PREDICT, h.PURCHASE_PREDICT,
			                        h.SAFETY_STOCK, h.SELL_PREDICT, h.ALL_PAY_AMT, h.MAX_PAY_ITEM, h.ARRIVE_PERIOD,
			                        h.DELIVERY_TYPE, h.PURCHASE_STATUS, h.SHIPPING_STATUS, h.FORM_TIME_ACTUAL,
			                        h.TEMPLATE_ID, h.TEMPLATE_NAME, h.ISADDFORM, s.STATUS),NULL)
			                    ORDER BY
			                        NVL(h.FORM_ID,' ') DESC ) t
		                        WHERE
					                ROWNUM < :endRow)
					    WHERE
					    	rowIndex >= :startRow};
		List<RequestHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		return headerLst;
	}
	
	public RequestHeader queryById(String formId) 
			throws NoPrivilegeException,SQLException,NoConnection {
		DefaultContext myCtx = getDefaultContext();
		HeaderIter headerIter = null;
		#sql [myCtx] headerIter = {
			SELECT
			    h.*,
			    s.STATUS FORM_STATUS,
			    ''       rownumber
			FROM
				:{Com_("D_T1_REQUEST_HEADER")} h
			LEFT JOIN
			    :{Com_("D_T0_FORM_STATUS")} s
			ON
			    h.FORM_ID = s.FORM_ID
			AND s.IS_CURRENT = 1
			WHERE
			    h.form_id =  :formId
		};
		List<RequestHeader> headerLst = processIter(headerIter);
		headerIter.close();
		closeDefaultContext(myCtx);
		if (headerLst !=null && !headerLst.isEmpty()) {
			return headerLst.get(0);
		}
		return null;
	}
	
	private List<RequestHeader> processIter(HeaderIter headerIter) 
			throws SQLException {
		List<RequestHeader> headerLst = new ArrayList<RequestHeader>();
		while(headerIter.next()) {
			RequestHeader header = new RequestHeader();
			header.setRownumber(headerIter.rownumber());
			header.setFormId(headerIter.form_id());
			header.setFormType(headerIter.form_type());
			header.setBuyerId(headerIter.buyer_id());
			header.setBuyerName(headerIter.buyer_name());
			header.setBuyerAddress(headerIter.buyer_address());
			header.setReceiveTime(SqlDateUtil.getUtilDate(headerIter.receive_time()));
			header.setFormMaker(headerIter.form_maker());
			header.setFormTime(SqlDateUtil.getUtilDate(headerIter.form_time()));
			header.setFormTimeActual(SqlDateUtil.getUtilDate(headerIter.form_time_actual()));
			header.setAuditor(headerIter.auditor());
			header.setAuditTime(SqlDateUtil.getUtilDate(headerIter.audit_time()));
			header.setPurchaseStatus(headerIter.purchase_status());
			header.setShippingStatus(headerIter.shipping_status());
			header.setFormNote(headerIter.form_note());
			header.setRefDateStart1(SqlDateUtil.getUtilDate(headerIter.ref_date_start1()));
			header.setRefDateEnd1(SqlDateUtil.getUtilDate(headerIter.ref_date_end1()));
			header.setRefDateStart2(SqlDateUtil.getUtilDate(headerIter.ref_date_start2()));
			header.setRefDateEnd2(SqlDateUtil.getUtilDate(headerIter.ref_date_end2()));
			header.setRefDateStart3(SqlDateUtil.getUtilDate(headerIter.ref_date_start3()));
			header.setRefDateEnd3(SqlDateUtil.getUtilDate(headerIter.ref_date_end3()));
			header.setDelayPredict(headerIter.delay_predict());
			header.setPurchasePredict(headerIter.purchase_predict());
			header.setSafetyStock(headerIter.safety_stock());
			header.setSellPredict(headerIter.sell_predict());
			header.setAllPayAmt(headerIter.all_pay_amt());
			header.setMaxPayItem(headerIter.max_pay_item());
			header.setArrivePeriod(headerIter.arrive_period());
			header.setDeliveryType(headerIter.delivery_type());
			header.setFormStatus(headerIter.form_status());
			header.setProviderId(headerIter.provider_Id());
			header.setProvider(headerIter.provider());
			header.setTemplateId(headerIter.template_Id());
			header.setTemplateName(headerIter.template_Name());
			
			header.setIsAddForm(headerIter.isAddForm());
			
			headerLst.add(header);
		}
		return headerLst;
	}
}